{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data Engineering Team 1 - Documentation Internal Training Schedule Date Topic Status Source Code 3 Mar 2022 Production Apache Airflow Done Download 9 Mar 2022 Docker #1 - Basics Confirmed Download Docker #2 - Advanced Waiting Databases in MEA Waiting Kubernetes #1 - Basics Waiting Kubernetes #2 - Application Deployment Waiting Kubernetes #3 - Administration Waiting","title":"Home"},{"location":"#data-engineering-team-1-documentation","text":"","title":"Data Engineering Team 1 - Documentation"},{"location":"#internal-training-schedule","text":"Date Topic Status Source Code 3 Mar 2022 Production Apache Airflow Done Download 9 Mar 2022 Docker #1 - Basics Confirmed Download Docker #2 - Advanced Waiting Databases in MEA Waiting Kubernetes #1 - Basics Waiting Kubernetes #2 - Application Deployment Waiting Kubernetes #3 - Administration Waiting","title":"Internal Training Schedule"},{"location":"apache-airflow/databases/","text":"Databases \u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Databases \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d \u0e40\u0e02\u0e35\u0e22\u0e19 Python Function \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a PythonOperator \u0e41\u0e19\u0e30\u0e19\u0e33 \u0e43\u0e0a\u0e49 sqlalchemy \u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49\u0e01\u0e31\u0e1a\u0e2b\u0e25\u0e32\u0e22 Database \u0e40\u0e0a\u0e48\u0e19 PostgreSQL, MySQL, Oracle, MSSQL PostgreSQL \u0e43\u0e0a\u0e49 psycopg2 MSSQL \u0e43\u0e0a\u0e49 pymssql MySQL \u0e43\u0e0a\u0e49 mysql-connector-python MongoDB \u0e43\u0e0a\u0e49 pymongo Neo4j \u0e43\u0e0a\u0e49 neo4j Redis \u0e43\u0e0a\u0e49 redis \u0e16\u0e49\u0e32 Database \u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19 ODBC \u0e43\u0e0a\u0e49 pyodbc \u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 TIBCO Data Virtualization \u0e43\u0e0a\u0e49 pyodbc \u0e43\u0e0a\u0e49 Airflow Operators PostgreSQL MongoDB MSSQL MySQL Redis Neo4j \u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Data Platform \u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 Data Platform Apache Airflow \u0e41\u0e15\u0e48\u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34 Operators \u0e02\u0e2d\u0e07 Airflow \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a\u0e23\u0e30\u0e1a\u0e1a\u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49 \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e15\u0e34\u0e14\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 Policies \u0e41\u0e25\u0e30 Security Kerberos \u0e42\u0e14\u0e22\u0e2a\u0e23\u0e38\u0e1b HDFS \u0e43\u0e0a\u0e49 WebHDFS Hook Hive/Impala \u0e43\u0e0a\u0e49 JDBCOperator Spark \u0e43\u0e0a\u0e49 LivyOperator Sqoop \u0e43\u0e0a\u0e49 SSHOperator HBase \u0e43\u0e0a\u0e49 PythonOperator \u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e1a HBase REST API \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1c\u0e48\u0e32\u0e19 Apache Phoenix \u0e14\u0e49\u0e27\u0e22 phoenixdb","title":"Databases"},{"location":"apache-airflow/databases/#databases","text":"","title":"Databases"},{"location":"apache-airflow/databases/#databases_1","text":"\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d \u0e40\u0e02\u0e35\u0e22\u0e19 Python Function \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a PythonOperator \u0e41\u0e19\u0e30\u0e19\u0e33 \u0e43\u0e0a\u0e49 sqlalchemy \u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49\u0e01\u0e31\u0e1a\u0e2b\u0e25\u0e32\u0e22 Database \u0e40\u0e0a\u0e48\u0e19 PostgreSQL, MySQL, Oracle, MSSQL PostgreSQL \u0e43\u0e0a\u0e49 psycopg2 MSSQL \u0e43\u0e0a\u0e49 pymssql MySQL \u0e43\u0e0a\u0e49 mysql-connector-python MongoDB \u0e43\u0e0a\u0e49 pymongo Neo4j \u0e43\u0e0a\u0e49 neo4j Redis \u0e43\u0e0a\u0e49 redis \u0e16\u0e49\u0e32 Database \u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19 ODBC \u0e43\u0e0a\u0e49 pyodbc \u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 TIBCO Data Virtualization \u0e43\u0e0a\u0e49 pyodbc \u0e43\u0e0a\u0e49 Airflow Operators PostgreSQL MongoDB MSSQL MySQL Redis Neo4j","title":"\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Databases"},{"location":"apache-airflow/databases/#data-platform","text":"\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 Data Platform Apache Airflow \u0e41\u0e15\u0e48\u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34 Operators \u0e02\u0e2d\u0e07 Airflow \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a\u0e23\u0e30\u0e1a\u0e1a\u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49 \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e15\u0e34\u0e14\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 Policies \u0e41\u0e25\u0e30 Security Kerberos \u0e42\u0e14\u0e22\u0e2a\u0e23\u0e38\u0e1b HDFS \u0e43\u0e0a\u0e49 WebHDFS Hook Hive/Impala \u0e43\u0e0a\u0e49 JDBCOperator Spark \u0e43\u0e0a\u0e49 LivyOperator Sqoop \u0e43\u0e0a\u0e49 SSHOperator HBase \u0e43\u0e0a\u0e49 PythonOperator \u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e1a HBase REST API \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1c\u0e48\u0e32\u0e19 Apache Phoenix \u0e14\u0e49\u0e27\u0e22 phoenixdb","title":"\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Data Platform"},{"location":"apache-airflow/use/","text":"Basics Prerequisites \u0e17\u0e31\u0e01\u0e29\u0e30\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e04\u0e27\u0e23\u0e21\u0e35 Python 3.6+ Basic Apache Airflow Basic databases Linux Airflow Architecture \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Airflow \u0e2d\u0e48\u0e32\u0e19 DAGs \u0e08\u0e32\u0e01 Bucket \u0e0a\u0e37\u0e48\u0e2d dags \u0e43\u0e19 MinIO \u0e21\u0e35\u0e01\u0e32\u0e23\u0e0b\u0e34\u0e07\u0e04\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e38\u0e01\u0e46 1 \u0e19\u0e32\u0e17\u0e35 Airflow \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Data Platform Services \u0e2b\u0e25\u0e31\u0e07\u0e1a\u0e49\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 Hive, Impala, HBase, Spark Airflow \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 MEA \u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19 \u0e40\u0e0a\u0e48\u0e19 SAP SFTP, AMR Oracle Database, OT MSSQL Database, etc. Airflow \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker \u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1a\u0e1a Celery Executor \u0e21\u0e35 15 Workers Airflow Server \u0e21\u0e35 92 vCPUs \u0e41\u0e25\u0e30 312 GB RAM \u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e07\u0e32\u0e19\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 \u0e40\u0e02\u0e35\u0e22\u0e19 DAGs \u0e14\u0e49\u0e27\u0e22\u0e20\u0e32\u0e29\u0e32 Python Log in \u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 MinIO Server \u0e41\u0e25\u0e30\u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c .py \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Bucket \u0e0a\u0e37\u0e48\u0e2d dags . \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14 Airflow \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e0b\u0e34\u0e07\u0e04\u0e4c DAGs \u0e20\u0e32\u0e22\u0e43\u0e19 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e16\u0e49\u0e32\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 UI \u0e08\u0e30\u0e41\u0e08\u0e49\u0e07 \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 DAGs \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Airflow Web UI . Example 1 - Simple DAG Create DAGs Copy code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e41\u0e25\u0e30\u0e40\u0e0b\u0e1f\u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d dpd_training_<name>.py dpd_training_chatree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import airflow from airflow import DAG from airflow.operators.dummy import DummyOperator # Initialize the DAG with DAG ( dag_id = \"dpd_training_chatree\" , description = \"DAG for learning Apache Airflow\" , start_date = airflow . utils . dates . days_ago ( 1 ), schedule_interval = \"@daily\" ) as dag : task1 = DummyOperator ( task_id = \"task1\" ) task2 = DummyOperator ( task_id = \"task2\" ) task3 = DummyOperator ( task_id = \"task3\" ) task4 = DummyOperator ( task_id = \"task4\" ) task1 >> task2 >> task3 >> task4 \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Line 8 : DAG ID \u0e15\u0e49\u0e2d\u0e07 \u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19 (Globally unique) Line 10 : start_date \u0e04\u0e37\u0e2d\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49 DAG \u0e40\u0e23\u0e34\u0e48\u0e21\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e43\u0e0a\u0e49 datetime \u0e2b\u0e23\u0e37\u0e2d airflow.utils.dates \u0e01\u0e47\u0e44\u0e14\u0e49 Line 11 : schedule_interval \u0e04\u0e37\u0e2d\u0e23\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 DAG \u0e40\u0e0a\u0e48\u0e19 @daily \u0e04\u0e37\u0e2d \u0e43\u0e2b\u0e49\u0e23\u0e31\u0e19\u0e23\u0e32\u0e22\u0e27\u0e31\u0e19, @monthly \u0e04\u0e37\u0e2d\u0e23\u0e31\u0e19\u0e23\u0e32\u0e22\u0e40\u0e14\u0e37\u0e2d\u0e19 Objective \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48\u0e23\u0e31\u0e19\u0e44\u0e14\u0e49 \u0e41\u0e15\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e43\u0e14\u0e46 Deploy DAGs \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e02\u0e2d\u0e07 MinIO \u0e17\u0e35\u0e48 http://172.17.113.251:9000 \u0e41\u0e25\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48 Bucket dags \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e25\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c dpd_training_<name>.py \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19 dags Manage DAGs \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c Airflow UI \u0e17\u0e35\u0e48 http://airflow.mea.or.th \u0e23\u0e2d\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e41\u0e25\u0e49\u0e27\u0e25\u0e2d\u0e07\u0e04\u0e49\u0e19\u0e2b\u0e32 DAG \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d dpd_training \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 DAG \u0e17\u0e35\u0e48\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 \u0e40\u0e1b\u0e34\u0e14\u0e1b\u0e34\u0e14 DAG \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 Results \u0e01\u0e14 Switch \u0e02\u0e49\u0e32\u0e07\u0e0b\u0e49\u0e32\u0e22\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 DAG \u0e41\u0e25\u0e30 \u0e14\u0e39\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c Example 2 - Read from MinIO \u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e19\u0e33\u0e44\u0e1f\u0e25\u0e4c\u0e1e\u0e27\u0e01 CSV, JSON \u0e2b\u0e23\u0e37\u0e2d \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e43\u0e19 Airflow \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e04\u0e37\u0e2d \u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c\u0e43\u0e19 Bucket \u0e0a\u0e37\u0e48\u0e2d airflow (\u0e40\u0e09\u0e1e\u0e32\u0e30 Data Engineer) \u0e2b\u0e23\u0e37\u0e2d public (\u0e40\u0e2b\u0e47\u0e19\u0e44\u0e14\u0e49\u0e17\u0e38\u0e01\u0e04\u0e19) \u0e40\u0e02\u0e35\u0e22\u0e19 DAG \u0e43\u0e2b\u0e49\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c\u0e08\u0e32\u0e01 MinIO Deploy DAG \u0e1a\u0e19 MinIO Bucket dags \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 DAG \u0e1a\u0e19 Airflow UI Objective \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 MinIO \u0e41\u0e25\u0e30\u0e2a\u0e48\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19 \u0e01\u0e1f\u0e19. Upload files \u0e40\u0e2d\u0e32\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e42\u0e22\u0e19\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 airflow Bucket Create DAG Copy code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e43\u0e2a\u0e48\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d dpd_training_minio_<name>.py \u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e28\u0e36\u0e01\u0e29\u0e32\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e14\u0e39\u0e17\u0e35\u0e48 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e14\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e2d\u0e48\u0e32\u0e19\u0e44\u0e1f\u0e25\u0e4c CSV \u0e08\u0e32\u0e01 MinIO MinIO Python SDK dpd_training_minio_chatree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import airflow import urllib3 from minio import Minio from airflow import DAG from airflow.models import Variable from airflow.operators.email import EmailOperator from airflow.operators.python import PythonOperator # Initialize the DAG with DAG ( dag_id = \"dpd_training_minio_chatree\" , description = \"Download file from MinIO to Airflow Cluster\" , start_date = airflow . utils . dates . days_ago ( 1 ), schedule_interval = \"@daily\" ) as dag : # define python function to be used with PythonOperator def _read_file_from_minio ( obj , bucket , out ): client = Minio ( Variable . get ( 'MINIO_HOST' ), access_key = Variable . get ( 'MINIO_SECRET_ACCESS_KEY' ), secret_key = Variable . get ( 'MINIO_SECRET_KEY' ), secure = False , http_client = urllib3 . ProxyManager ( 'http://meaproxy.mea.or.th:80' ) ) client . fget_object ( bucket_name = bucket , object_name = obj , file_path = out ) download_file = PythonOperator ( task_id = \"download_file\" , python_callable = _read_file_from_minio , op_kwargs = { \"obj\" : 'DPD/crash_catalonia.csv' , \"bucket\" : 'airflow' , \"out\" : '/shared/crash_catalonia.csv' } ) send_file = EmailOperator ( task_id = \"send_file\" , to = [ \"chatree.sr@mea.or.th\" ], subject = \"[{{ ds }}] File downloaded from MinIO\" , html_content = \"\"\" <p>Please find attached</p> \"\"\" , files = [ \"/shared/crash_catalonia.csv\" ] ) download_file >> send_file \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Line 5 : \u0e1b\u0e23\u0e30\u0e01\u0e32\u0e28\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e1c\u0e22\u0e04\u0e48\u0e32 \u0e40\u0e0a\u0e48\u0e19 Password, Key \u0e1c\u0e48\u0e32\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 Airflow UI > Admin > Variables Line 6-7 : Operator \u0e04\u0e37\u0e2d Code \u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e19\u0e40\u0e02\u0e35\u0e22\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e49 \u0e43\u0e0a\u0e49\u0e41\u0e01\u0e49\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e08\u0e38\u0e14 \u0e40\u0e0a\u0e48\u0e19 EmailOperator \u0e43\u0e0a\u0e49\u0e2a\u0e48\u0e07 Email, PythonOperator \u0e43\u0e0a\u0e49\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 Python Line 19-25 : \u0e40\u0e02\u0e35\u0e22\u0e19 Function \u0e43\u0e0a\u0e49\u0e2d\u0e49\u0e32\u0e07\u0e16\u0e36\u0e07\u0e15\u0e2d\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 PythonOperator \u0e15\u0e31\u0e27 MinIO \u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 http_client=urllib3.ProxyManager \u0e14\u0e49\u0e27\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Network \u0e01\u0e1f\u0e19. \u0e15\u0e49\u0e2d\u0e07\u0e1c\u0e48\u0e32\u0e19 Proxy Line 38 : Pass arguments \u0e44\u0e1b\u0e17\u0e35\u0e48 python_callable \u0e14\u0e49\u0e27\u0e22 op_kwargs={} Line 41 : Airflow \u0e21\u0e35 Workers 15 \u0e15\u0e31\u0e27 \u0e41\u0e15\u0e48\u0e25\u0e30\u0e15\u0e31\u0e27\u0e21\u0e35 File System \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 Path /shared \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 Shared Path \u0e40\u0e14\u0e35\u0e22\u0e27\u0e17\u0e35\u0e48 Worker \u0e17\u0e38\u0e01\u0e15\u0e31\u0e27\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e44\u0e14\u0e49 Line 45 : \u0e2a\u0e48\u0e07\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e41\u0e19\u0e1a\u0e44\u0e1f\u0e25\u0e4c\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 Config SMTP (\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2b\u0e25\u0e31\u0e07\u0e1a\u0e49\u0e32\u0e19\u0e44\u0e27\u0e49\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27) Line 47 : \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19 Email \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c Line 48 : {{ ds }} \u0e04\u0e37\u0e2d Jinja Template \u0e17\u0e35\u0e48 Airflow \u0e43\u0e0a\u0e49\u0e41\u0e17\u0e19\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e40\u0e0a\u0e48\u0e19 ds \u0e04\u0e37\u0e2d Dag Run Date \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2d\u0e37\u0e48\u0e19\u0e46\u0e14\u0e39\u0e17\u0e35\u0e48 Template Reference Deploy DAG \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e02\u0e2d\u0e07 MinIO \u0e17\u0e35\u0e48 http://172.17.113.251:9000 \u0e41\u0e25\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48 Bucket dags \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e25\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c dpd_training_minio_<name>.py \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19 dags Manage DAG \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c Airflow UI \u0e17\u0e35\u0e48 http://airflow.mea.or.th \u0e23\u0e2d\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e41\u0e25\u0e49\u0e27\u0e25\u0e2d\u0e07\u0e04\u0e49\u0e19\u0e2b\u0e32 DAG \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d dpd_training \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 DAG \u0e17\u0e35\u0e48\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 \u0e40\u0e1b\u0e34\u0e14\u0e1b\u0e34\u0e14 DAG \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 Results \u0e40\u0e0a\u0e47\u0e04\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 UI \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Task \u0e23\u0e31\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e0a\u0e47\u0e04\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e14\u0e39\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e08\u0e32\u0e01 Airflow Example 3 - Pandas & REST API \u0e15\u0e31\u0e07\u0e41\u0e15\u0e48\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19\u0e44\u0e1b\u0e08\u0e30\u0e44\u0e21\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Deploy \u0e41\u0e25\u0e30 Manage DAG Objective \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48 \u0e14\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 EGAT API \u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e14\u0e49\u0e27\u0e22 Pandas \u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e44\u0e1f\u0e25\u0e4c\u0e40\u0e1e\u0e37\u0e48\u0e2d Backup \u0e1a\u0e19 MinIO \u0e08\u0e31\u0e14\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 Hive \u0e2a\u0e48\u0e07\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e44\u0e1f\u0e25\u0e4c\u0e41\u0e19\u0e1a\u0e43\u0e2b\u0e49\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07 Create DAG dpd_training_egat_chatree.pyimport airflow import json import urllib3 import requests import numpy as np import pandas as pd from minio import Minio from airflow import DAG from airflow.models import Variable from airflow.operators.email import EmailOperator from airflow.operators.python import PythonOperator from airflow.providers.jdbc.operators.jdbc import JdbcOperator # Custom MEA hooks from mea.hooks.webhdfs import WebHDFSHook # Initialize the DAG with DAG ( dag_id = \"dpd_training_minio_egat_chatree\" , description = \"Store data from EGAT API to Data Platform \" , start_date = airflow . utils . dates . days_ago ( 1 ), template_searchpath = [ \"/shared\" ], schedule_interval = \"@daily\" ) as dag : ############################################################################### # Utility functions; Should be in a separate file. # ############################################################################### def _get_token (): headers = { 'Content-Type' : 'application/json' } data = { \"username\" : Variable . get ( 'DPD_EGAT_API_ACCESS_KEY' ), \"password\" : Variable . get ( 'DPD_EGAT_API_SECRET_KEY' ) } try : res = requests . post ( Variable . get ( 'DPD_EGAT_API_AUTH_URL' ), headers = headers , json = data ) res . raise_for_status () except requests . exceptions . HTTPError as e : raise SystemExit ( e ) return res . json () . get ( 'access_token' ) def _get_data ( api_url , feeder_name , year , month , outfile ): token = _get_token () headers = { \"Content-Type\" : \"application/json\" , \"Authorization\" : f \"Bearer { token } \" } data = { \"linefeederName\" : feeder_name , \"year\" : year , \"month\" : month } try : res = requests . post ( Variable . get ( api_url ), headers = headers , json = data ) except requests . exceptions . HTTPError as e : raise SystemExit ( e ) with open ( outfile , 'w' ) as f : json . dump ( res . json (), f ) def _get_billing ( feeder_name , year , month , outfile ): _get_data ( 'DPD_EGAT_API_BILLING_URL' , feeder_name , year , month , outfile ) def _get_lp ( feeder_name , year , month , outfile ): _get_data ( 'DPD_EGAT_API_LP_URL' , feeder_name , year , month , outfile ) def _convert_json_to_csv ( infile , outfile ): with open ( infile , 'r' ) as f : records = json . load ( f ) # Convert JSON to DataFrame and save to CSV pd . DataFrame . from_records ( records ) . to_csv ( outfile , index = False ) def _generate_hive_sql ( infile , outfile , db_name , table_name , hdfs_path ): df = pd . read_csv ( infile ) with open ( outfile , 'w' ) as f : f . write ( f 'CREATE EXTERNAL TABLE IF NOT EXISTS { db_name } . { table_name } ( \\n ' ) for col in df . columns : if df [ col ] . dtype == object : f . write ( f ' \\t { col } STRING' ) if df [ col ] . dtype == np . int64 : f . write ( f ' \\t { col } DOUBLE' ) if df [ col ] . dtype == np . float64 : f . write ( f ' \\t { col } DOUBLE' ) if col != df . columns [ - 1 ]: f . write ( ', \\n ' ) f . write ( ') \\n ' ) f . write ( 'ROW FORMAT DELIMITED \\n ' ) f . write ( \"FIELDS TERMINATED BY ',' \\n \" ) f . write ( 'STORED AS TEXTFILE \\n ' ) f . write ( f \"LOCATION ' { hdfs_path } ' \\n \" ) f . write ( \"TBLPROPERTIES ('skip.header.line.count'='1');\" ) def _upload_file_to_hdfs ( infile , hdfs_path ): hdfs = WebHDFSHook ( webhdfs_conn_id = 'sys-hdfs' ) hdfs . load_file ( source = infile , destination = hdfs_path , overwrite = True ) def _upload_file_to_minio ( obj , bucket , file_path ): client = Minio ( Variable . get ( 'MINIO_HOST' ), access_key = Variable . get ( 'MINIO_SECRET_ACCESS_KEY' ), secret_key = Variable . get ( 'MINIO_SECRET_KEY' ), secure = False , http_client = urllib3 . ProxyManager ( 'http://meaproxy.mea.or.th:80' ) ) client . fput_object ( bucket_name = bucket , object_name = obj , file_path = file_path ) ############################################################################### # Tasks # ############################################################################### get_egat_lp = PythonOperator ( task_id = \"get_egat_lp\" , python_callable = _get_lp , op_kwargs = { \"feeder_name\" : \"BK/69 MEA#1 M\" , \"year\" : 2021 , \"month\" : 12 , \"outfile\" : \"/shared/bk69_mea1_m.json\" } ) convert_json_to_csv = PythonOperator ( task_id = \"convert_json_to_csv\" , python_callable = _convert_json_to_csv , op_kwargs = { \"infile\" : \"/shared/bk69_mea1_m.json\" , \"outfile\" : \"/shared/bk69_mea1_m.csv\" } ) upload_file_to_hdfs = PythonOperator ( task_id = \"upload_file_to_hdfs\" , python_callable = _upload_file_to_hdfs , op_kwargs = { \"infile\" : '/shared/bk69_mea1_m.csv' , \"hdfs_path\" : '/user/airflow/dpd-training/egat/bk69_mea1_m.csv' } ) upload_backup_to_minio = PythonOperator ( task_id = \"upload_backup_to_minio\" , python_callable = _upload_file_to_minio , op_kwargs = { 'bucket' : 'airflow' , 'obj' : 'DPD/bk69_mea1_m.csv' , 'file_path' : '/shared/bk69_mea1_m.csv' } ) generate_hive_sql = PythonOperator ( task_id = \"generate_hive_sql\" , python_callable = _generate_hive_sql , op_kwargs = { \"infile\" : '/shared/bk69_mea1_m.csv' , \"outfile\" : '/shared/bk69_mea1_m.sql' , \"db_name\" : 'airflow' , \"table_name\" : 'dpd_training_egat_chatree' , \"hdfs_path\" : '/user/airflow/dpd-training/egat/' } ) create_external_table = JdbcOperator ( task_id = \"create_external_table\" , jdbc_conn_id = 'sys-jdbc-hive' , sql = \"bk69_mea1_m.sql\" ) send_email = EmailOperator ( task_id = \"send_email\" , to = [ \"chatree.sr@mea.or.th\" ], subject = \"[{{ ds }}] EGAT file saved!\" , html_content = \"\"\" <h1 style=\"color: blue;\">Please find attached</h1> <p>Please find attached EGAT data as of {{ ds }}</p> \"\"\" , files = [ \"/shared/bk69_mea1_m.csv\" ] ) get_egat_lp >> convert_json_to_csv >> upload_file_to_hdfs >> generate_hive_sql >> create_external_table >> send_email convert_json_to_csv >> upload_backup_to_minio >> send_email \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e2d\u0e30\u0e44\u0e23\u0e17\u0e35\u0e48\u0e17\u0e33\u0e1a\u0e19 Python \u0e44\u0e14\u0e49 \u0e17\u0e33\u0e1a\u0e19 Airflow \u0e44\u0e14\u0e49\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e08\u0e30\u0e21\u0e35 Operator \u0e40\u0e09\u0e1e\u0e32\u0e30\u0e01\u0e34\u0e08\u0e44\u0e27\u0e49\u0e43\u0e2b\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Airflow Operators & Hooks \u0e1d\u0e27\u0e17. \u0e1e\u0e31\u0e12\u0e19\u0e32 Custom Hooks & Operators \u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Data Platform \u0e44\u0e14\u0e49 \u0e40\u0e0a\u0e48\u0e19 mea.hooks.webhdfs Results","title":"Basics"},{"location":"apache-airflow/use/#basics","text":"","title":"Basics"},{"location":"apache-airflow/use/#prerequisites","text":"\u0e17\u0e31\u0e01\u0e29\u0e30\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e04\u0e27\u0e23\u0e21\u0e35 Python 3.6+ Basic Apache Airflow Basic databases Linux","title":"Prerequisites"},{"location":"apache-airflow/use/#airflow-architecture","text":"","title":"Airflow Architecture"},{"location":"apache-airflow/use/#_1","text":"Airflow \u0e2d\u0e48\u0e32\u0e19 DAGs \u0e08\u0e32\u0e01 Bucket \u0e0a\u0e37\u0e48\u0e2d dags \u0e43\u0e19 MinIO \u0e21\u0e35\u0e01\u0e32\u0e23\u0e0b\u0e34\u0e07\u0e04\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e38\u0e01\u0e46 1 \u0e19\u0e32\u0e17\u0e35 Airflow \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Data Platform Services \u0e2b\u0e25\u0e31\u0e07\u0e1a\u0e49\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 Hive, Impala, HBase, Spark Airflow \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 MEA \u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19 \u0e40\u0e0a\u0e48\u0e19 SAP SFTP, AMR Oracle Database, OT MSSQL Database, etc. Airflow \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker \u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1a\u0e1a Celery Executor \u0e21\u0e35 15 Workers Airflow Server \u0e21\u0e35 92 vCPUs \u0e41\u0e25\u0e30 312 GB RAM","title":"\u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d"},{"location":"apache-airflow/use/#_2","text":"\u0e40\u0e02\u0e35\u0e22\u0e19 DAGs \u0e14\u0e49\u0e27\u0e22\u0e20\u0e32\u0e29\u0e32 Python Log in \u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 MinIO Server \u0e41\u0e25\u0e30\u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c .py \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Bucket \u0e0a\u0e37\u0e48\u0e2d dags . \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14 Airflow \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e0b\u0e34\u0e07\u0e04\u0e4c DAGs \u0e20\u0e32\u0e22\u0e43\u0e19 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e16\u0e49\u0e32\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 UI \u0e08\u0e30\u0e41\u0e08\u0e49\u0e07 \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 DAGs \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Airflow Web UI .","title":"\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e07\u0e32\u0e19\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19"},{"location":"apache-airflow/use/#example-1-simple-dag","text":"","title":"Example 1 - Simple DAG"},{"location":"apache-airflow/use/#create-dags","text":"Copy code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e41\u0e25\u0e30\u0e40\u0e0b\u0e1f\u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d dpd_training_<name>.py dpd_training_chatree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import airflow from airflow import DAG from airflow.operators.dummy import DummyOperator # Initialize the DAG with DAG ( dag_id = \"dpd_training_chatree\" , description = \"DAG for learning Apache Airflow\" , start_date = airflow . utils . dates . days_ago ( 1 ), schedule_interval = \"@daily\" ) as dag : task1 = DummyOperator ( task_id = \"task1\" ) task2 = DummyOperator ( task_id = \"task2\" ) task3 = DummyOperator ( task_id = \"task3\" ) task4 = DummyOperator ( task_id = \"task4\" ) task1 >> task2 >> task3 >> task4 \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Line 8 : DAG ID \u0e15\u0e49\u0e2d\u0e07 \u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19 (Globally unique) Line 10 : start_date \u0e04\u0e37\u0e2d\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49 DAG \u0e40\u0e23\u0e34\u0e48\u0e21\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e43\u0e0a\u0e49 datetime \u0e2b\u0e23\u0e37\u0e2d airflow.utils.dates \u0e01\u0e47\u0e44\u0e14\u0e49 Line 11 : schedule_interval \u0e04\u0e37\u0e2d\u0e23\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 DAG \u0e40\u0e0a\u0e48\u0e19 @daily \u0e04\u0e37\u0e2d \u0e43\u0e2b\u0e49\u0e23\u0e31\u0e19\u0e23\u0e32\u0e22\u0e27\u0e31\u0e19, @monthly \u0e04\u0e37\u0e2d\u0e23\u0e31\u0e19\u0e23\u0e32\u0e22\u0e40\u0e14\u0e37\u0e2d\u0e19","title":"Create DAGs"},{"location":"apache-airflow/use/#objective","text":"\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48\u0e23\u0e31\u0e19\u0e44\u0e14\u0e49 \u0e41\u0e15\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e43\u0e14\u0e46","title":"Objective"},{"location":"apache-airflow/use/#deploy-dags","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e02\u0e2d\u0e07 MinIO \u0e17\u0e35\u0e48 http://172.17.113.251:9000 \u0e41\u0e25\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48 Bucket dags \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e25\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c dpd_training_<name>.py \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19 dags","title":"Deploy DAGs"},{"location":"apache-airflow/use/#manage-dags","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c Airflow UI \u0e17\u0e35\u0e48 http://airflow.mea.or.th \u0e23\u0e2d\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e41\u0e25\u0e49\u0e27\u0e25\u0e2d\u0e07\u0e04\u0e49\u0e19\u0e2b\u0e32 DAG \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d dpd_training \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 DAG \u0e17\u0e35\u0e48\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 \u0e40\u0e1b\u0e34\u0e14\u0e1b\u0e34\u0e14 DAG \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22","title":"Manage DAGs"},{"location":"apache-airflow/use/#results","text":"\u0e01\u0e14 Switch \u0e02\u0e49\u0e32\u0e07\u0e0b\u0e49\u0e32\u0e22\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 DAG \u0e41\u0e25\u0e30 \u0e14\u0e39\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c","title":"Results"},{"location":"apache-airflow/use/#example-2-read-from-minio","text":"\u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e19\u0e33\u0e44\u0e1f\u0e25\u0e4c\u0e1e\u0e27\u0e01 CSV, JSON \u0e2b\u0e23\u0e37\u0e2d \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e43\u0e19 Airflow \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e04\u0e37\u0e2d \u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c\u0e43\u0e19 Bucket \u0e0a\u0e37\u0e48\u0e2d airflow (\u0e40\u0e09\u0e1e\u0e32\u0e30 Data Engineer) \u0e2b\u0e23\u0e37\u0e2d public (\u0e40\u0e2b\u0e47\u0e19\u0e44\u0e14\u0e49\u0e17\u0e38\u0e01\u0e04\u0e19) \u0e40\u0e02\u0e35\u0e22\u0e19 DAG \u0e43\u0e2b\u0e49\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c\u0e08\u0e32\u0e01 MinIO Deploy DAG \u0e1a\u0e19 MinIO Bucket dags \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 DAG \u0e1a\u0e19 Airflow UI","title":"Example 2 - Read from MinIO"},{"location":"apache-airflow/use/#objective_1","text":"\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 MinIO \u0e41\u0e25\u0e30\u0e2a\u0e48\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19 \u0e01\u0e1f\u0e19.","title":"Objective"},{"location":"apache-airflow/use/#upload-files","text":"\u0e40\u0e2d\u0e32\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e42\u0e22\u0e19\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 airflow Bucket","title":"Upload files"},{"location":"apache-airflow/use/#create-dag","text":"Copy code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e43\u0e2a\u0e48\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d dpd_training_minio_<name>.py \u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e28\u0e36\u0e01\u0e29\u0e32\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e14\u0e39\u0e17\u0e35\u0e48 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e14\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e2d\u0e48\u0e32\u0e19\u0e44\u0e1f\u0e25\u0e4c CSV \u0e08\u0e32\u0e01 MinIO MinIO Python SDK dpd_training_minio_chatree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import airflow import urllib3 from minio import Minio from airflow import DAG from airflow.models import Variable from airflow.operators.email import EmailOperator from airflow.operators.python import PythonOperator # Initialize the DAG with DAG ( dag_id = \"dpd_training_minio_chatree\" , description = \"Download file from MinIO to Airflow Cluster\" , start_date = airflow . utils . dates . days_ago ( 1 ), schedule_interval = \"@daily\" ) as dag : # define python function to be used with PythonOperator def _read_file_from_minio ( obj , bucket , out ): client = Minio ( Variable . get ( 'MINIO_HOST' ), access_key = Variable . get ( 'MINIO_SECRET_ACCESS_KEY' ), secret_key = Variable . get ( 'MINIO_SECRET_KEY' ), secure = False , http_client = urllib3 . ProxyManager ( 'http://meaproxy.mea.or.th:80' ) ) client . fget_object ( bucket_name = bucket , object_name = obj , file_path = out ) download_file = PythonOperator ( task_id = \"download_file\" , python_callable = _read_file_from_minio , op_kwargs = { \"obj\" : 'DPD/crash_catalonia.csv' , \"bucket\" : 'airflow' , \"out\" : '/shared/crash_catalonia.csv' } ) send_file = EmailOperator ( task_id = \"send_file\" , to = [ \"chatree.sr@mea.or.th\" ], subject = \"[{{ ds }}] File downloaded from MinIO\" , html_content = \"\"\" <p>Please find attached</p> \"\"\" , files = [ \"/shared/crash_catalonia.csv\" ] ) download_file >> send_file \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Line 5 : \u0e1b\u0e23\u0e30\u0e01\u0e32\u0e28\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e1c\u0e22\u0e04\u0e48\u0e32 \u0e40\u0e0a\u0e48\u0e19 Password, Key \u0e1c\u0e48\u0e32\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 Airflow UI > Admin > Variables Line 6-7 : Operator \u0e04\u0e37\u0e2d Code \u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e19\u0e40\u0e02\u0e35\u0e22\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e49 \u0e43\u0e0a\u0e49\u0e41\u0e01\u0e49\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e08\u0e38\u0e14 \u0e40\u0e0a\u0e48\u0e19 EmailOperator \u0e43\u0e0a\u0e49\u0e2a\u0e48\u0e07 Email, PythonOperator \u0e43\u0e0a\u0e49\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 Python Line 19-25 : \u0e40\u0e02\u0e35\u0e22\u0e19 Function \u0e43\u0e0a\u0e49\u0e2d\u0e49\u0e32\u0e07\u0e16\u0e36\u0e07\u0e15\u0e2d\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 PythonOperator \u0e15\u0e31\u0e27 MinIO \u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 http_client=urllib3.ProxyManager \u0e14\u0e49\u0e27\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Network \u0e01\u0e1f\u0e19. \u0e15\u0e49\u0e2d\u0e07\u0e1c\u0e48\u0e32\u0e19 Proxy Line 38 : Pass arguments \u0e44\u0e1b\u0e17\u0e35\u0e48 python_callable \u0e14\u0e49\u0e27\u0e22 op_kwargs={} Line 41 : Airflow \u0e21\u0e35 Workers 15 \u0e15\u0e31\u0e27 \u0e41\u0e15\u0e48\u0e25\u0e30\u0e15\u0e31\u0e27\u0e21\u0e35 File System \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 Path /shared \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 Shared Path \u0e40\u0e14\u0e35\u0e22\u0e27\u0e17\u0e35\u0e48 Worker \u0e17\u0e38\u0e01\u0e15\u0e31\u0e27\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e44\u0e14\u0e49 Line 45 : \u0e2a\u0e48\u0e07\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e41\u0e19\u0e1a\u0e44\u0e1f\u0e25\u0e4c\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 Config SMTP (\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2b\u0e25\u0e31\u0e07\u0e1a\u0e49\u0e32\u0e19\u0e44\u0e27\u0e49\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27) Line 47 : \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19 Email \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c Line 48 : {{ ds }} \u0e04\u0e37\u0e2d Jinja Template \u0e17\u0e35\u0e48 Airflow \u0e43\u0e0a\u0e49\u0e41\u0e17\u0e19\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e40\u0e0a\u0e48\u0e19 ds \u0e04\u0e37\u0e2d Dag Run Date \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2d\u0e37\u0e48\u0e19\u0e46\u0e14\u0e39\u0e17\u0e35\u0e48 Template Reference","title":"Create DAG"},{"location":"apache-airflow/use/#deploy-dag","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e02\u0e2d\u0e07 MinIO \u0e17\u0e35\u0e48 http://172.17.113.251:9000 \u0e41\u0e25\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48 Bucket dags \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e25\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c dpd_training_minio_<name>.py \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19 dags","title":"Deploy DAG"},{"location":"apache-airflow/use/#manage-dag","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c Airflow UI \u0e17\u0e35\u0e48 http://airflow.mea.or.th \u0e23\u0e2d\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e41\u0e25\u0e49\u0e27\u0e25\u0e2d\u0e07\u0e04\u0e49\u0e19\u0e2b\u0e32 DAG \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d dpd_training \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 DAG \u0e17\u0e35\u0e48\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 \u0e40\u0e1b\u0e34\u0e14\u0e1b\u0e34\u0e14 DAG \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22","title":"Manage DAG"},{"location":"apache-airflow/use/#results_1","text":"\u0e40\u0e0a\u0e47\u0e04\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 UI \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Task \u0e23\u0e31\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e0a\u0e47\u0e04\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e14\u0e39\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e08\u0e32\u0e01 Airflow","title":"Results"},{"location":"apache-airflow/use/#example-3-pandas-rest-api","text":"\u0e15\u0e31\u0e07\u0e41\u0e15\u0e48\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19\u0e44\u0e1b\u0e08\u0e30\u0e44\u0e21\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Deploy \u0e41\u0e25\u0e30 Manage DAG","title":"Example 3 - Pandas &amp; REST API"},{"location":"apache-airflow/use/#objective_2","text":"\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48 \u0e14\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 EGAT API \u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e14\u0e49\u0e27\u0e22 Pandas \u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e44\u0e1f\u0e25\u0e4c\u0e40\u0e1e\u0e37\u0e48\u0e2d Backup \u0e1a\u0e19 MinIO \u0e08\u0e31\u0e14\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 Hive \u0e2a\u0e48\u0e07\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e44\u0e1f\u0e25\u0e4c\u0e41\u0e19\u0e1a\u0e43\u0e2b\u0e49\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07","title":"Objective"},{"location":"apache-airflow/use/#create-dag_1","text":"dpd_training_egat_chatree.pyimport airflow import json import urllib3 import requests import numpy as np import pandas as pd from minio import Minio from airflow import DAG from airflow.models import Variable from airflow.operators.email import EmailOperator from airflow.operators.python import PythonOperator from airflow.providers.jdbc.operators.jdbc import JdbcOperator # Custom MEA hooks from mea.hooks.webhdfs import WebHDFSHook # Initialize the DAG with DAG ( dag_id = \"dpd_training_minio_egat_chatree\" , description = \"Store data from EGAT API to Data Platform \" , start_date = airflow . utils . dates . days_ago ( 1 ), template_searchpath = [ \"/shared\" ], schedule_interval = \"@daily\" ) as dag : ############################################################################### # Utility functions; Should be in a separate file. # ############################################################################### def _get_token (): headers = { 'Content-Type' : 'application/json' } data = { \"username\" : Variable . get ( 'DPD_EGAT_API_ACCESS_KEY' ), \"password\" : Variable . get ( 'DPD_EGAT_API_SECRET_KEY' ) } try : res = requests . post ( Variable . get ( 'DPD_EGAT_API_AUTH_URL' ), headers = headers , json = data ) res . raise_for_status () except requests . exceptions . HTTPError as e : raise SystemExit ( e ) return res . json () . get ( 'access_token' ) def _get_data ( api_url , feeder_name , year , month , outfile ): token = _get_token () headers = { \"Content-Type\" : \"application/json\" , \"Authorization\" : f \"Bearer { token } \" } data = { \"linefeederName\" : feeder_name , \"year\" : year , \"month\" : month } try : res = requests . post ( Variable . get ( api_url ), headers = headers , json = data ) except requests . exceptions . HTTPError as e : raise SystemExit ( e ) with open ( outfile , 'w' ) as f : json . dump ( res . json (), f ) def _get_billing ( feeder_name , year , month , outfile ): _get_data ( 'DPD_EGAT_API_BILLING_URL' , feeder_name , year , month , outfile ) def _get_lp ( feeder_name , year , month , outfile ): _get_data ( 'DPD_EGAT_API_LP_URL' , feeder_name , year , month , outfile ) def _convert_json_to_csv ( infile , outfile ): with open ( infile , 'r' ) as f : records = json . load ( f ) # Convert JSON to DataFrame and save to CSV pd . DataFrame . from_records ( records ) . to_csv ( outfile , index = False ) def _generate_hive_sql ( infile , outfile , db_name , table_name , hdfs_path ): df = pd . read_csv ( infile ) with open ( outfile , 'w' ) as f : f . write ( f 'CREATE EXTERNAL TABLE IF NOT EXISTS { db_name } . { table_name } ( \\n ' ) for col in df . columns : if df [ col ] . dtype == object : f . write ( f ' \\t { col } STRING' ) if df [ col ] . dtype == np . int64 : f . write ( f ' \\t { col } DOUBLE' ) if df [ col ] . dtype == np . float64 : f . write ( f ' \\t { col } DOUBLE' ) if col != df . columns [ - 1 ]: f . write ( ', \\n ' ) f . write ( ') \\n ' ) f . write ( 'ROW FORMAT DELIMITED \\n ' ) f . write ( \"FIELDS TERMINATED BY ',' \\n \" ) f . write ( 'STORED AS TEXTFILE \\n ' ) f . write ( f \"LOCATION ' { hdfs_path } ' \\n \" ) f . write ( \"TBLPROPERTIES ('skip.header.line.count'='1');\" ) def _upload_file_to_hdfs ( infile , hdfs_path ): hdfs = WebHDFSHook ( webhdfs_conn_id = 'sys-hdfs' ) hdfs . load_file ( source = infile , destination = hdfs_path , overwrite = True ) def _upload_file_to_minio ( obj , bucket , file_path ): client = Minio ( Variable . get ( 'MINIO_HOST' ), access_key = Variable . get ( 'MINIO_SECRET_ACCESS_KEY' ), secret_key = Variable . get ( 'MINIO_SECRET_KEY' ), secure = False , http_client = urllib3 . ProxyManager ( 'http://meaproxy.mea.or.th:80' ) ) client . fput_object ( bucket_name = bucket , object_name = obj , file_path = file_path ) ############################################################################### # Tasks # ############################################################################### get_egat_lp = PythonOperator ( task_id = \"get_egat_lp\" , python_callable = _get_lp , op_kwargs = { \"feeder_name\" : \"BK/69 MEA#1 M\" , \"year\" : 2021 , \"month\" : 12 , \"outfile\" : \"/shared/bk69_mea1_m.json\" } ) convert_json_to_csv = PythonOperator ( task_id = \"convert_json_to_csv\" , python_callable = _convert_json_to_csv , op_kwargs = { \"infile\" : \"/shared/bk69_mea1_m.json\" , \"outfile\" : \"/shared/bk69_mea1_m.csv\" } ) upload_file_to_hdfs = PythonOperator ( task_id = \"upload_file_to_hdfs\" , python_callable = _upload_file_to_hdfs , op_kwargs = { \"infile\" : '/shared/bk69_mea1_m.csv' , \"hdfs_path\" : '/user/airflow/dpd-training/egat/bk69_mea1_m.csv' } ) upload_backup_to_minio = PythonOperator ( task_id = \"upload_backup_to_minio\" , python_callable = _upload_file_to_minio , op_kwargs = { 'bucket' : 'airflow' , 'obj' : 'DPD/bk69_mea1_m.csv' , 'file_path' : '/shared/bk69_mea1_m.csv' } ) generate_hive_sql = PythonOperator ( task_id = \"generate_hive_sql\" , python_callable = _generate_hive_sql , op_kwargs = { \"infile\" : '/shared/bk69_mea1_m.csv' , \"outfile\" : '/shared/bk69_mea1_m.sql' , \"db_name\" : 'airflow' , \"table_name\" : 'dpd_training_egat_chatree' , \"hdfs_path\" : '/user/airflow/dpd-training/egat/' } ) create_external_table = JdbcOperator ( task_id = \"create_external_table\" , jdbc_conn_id = 'sys-jdbc-hive' , sql = \"bk69_mea1_m.sql\" ) send_email = EmailOperator ( task_id = \"send_email\" , to = [ \"chatree.sr@mea.or.th\" ], subject = \"[{{ ds }}] EGAT file saved!\" , html_content = \"\"\" <h1 style=\"color: blue;\">Please find attached</h1> <p>Please find attached EGAT data as of {{ ds }}</p> \"\"\" , files = [ \"/shared/bk69_mea1_m.csv\" ] ) get_egat_lp >> convert_json_to_csv >> upload_file_to_hdfs >> generate_hive_sql >> create_external_table >> send_email convert_json_to_csv >> upload_backup_to_minio >> send_email \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e2d\u0e30\u0e44\u0e23\u0e17\u0e35\u0e48\u0e17\u0e33\u0e1a\u0e19 Python \u0e44\u0e14\u0e49 \u0e17\u0e33\u0e1a\u0e19 Airflow \u0e44\u0e14\u0e49\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e08\u0e30\u0e21\u0e35 Operator \u0e40\u0e09\u0e1e\u0e32\u0e30\u0e01\u0e34\u0e08\u0e44\u0e27\u0e49\u0e43\u0e2b\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Airflow Operators & Hooks \u0e1d\u0e27\u0e17. \u0e1e\u0e31\u0e12\u0e19\u0e32 Custom Hooks & Operators \u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Data Platform \u0e44\u0e14\u0e49 \u0e40\u0e0a\u0e48\u0e19 mea.hooks.webhdfs","title":"Create DAG"},{"location":"apache-airflow/use/#results_2","text":"","title":"Results"},{"location":"docker/images/","text":"Images \u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Image \u0e0a\u0e32\u0e27\u0e1a\u0e49\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e15\u0e49\u0e19 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 Customize App \u0e15\u0e32\u0e21\u0e04\u0e27\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 Package App \u0e17\u0e35\u0e48\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e14\u0e49\u0e27\u0e22\u0e15\u0e19\u0e40\u0e2d\u0e07\u0e43\u0e2b\u0e49\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Dockerfile \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e43\u0e0a\u0e49\u0e40\u0e2d\u0e07 \u0e40\u0e02\u0e35\u0e22\u0e19 Dockerfile \u0e15\u0e32\u0e21\u0e04\u0e33\u0e41\u0e19\u0e30\u0e19\u0e33 Dockerfile Reference Build Image Push Image \u0e44\u0e1b\u0e17\u0e35\u0e48 Repository (Docker Hub) Run Image \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Example 1 - Dev Notebook \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Python Dev Environment \u0e17\u0e35\u0e48\u0e21\u0e35 Package \u0e22\u0e2d\u0e14\u0e19\u0e34\u0e22\u0e21\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1c\u0e48\u0e32\u0e19 Jupyter Notebook Python Dockerfile \u0e43\u0e2b\u0e49 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d Dockerfile (\u0e44\u0e21\u0e48\u0e21\u0e35 Extension) \u0e41\u0e25\u0e30 Copy \u0e0a\u0e38\u0e14\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 FROM ubuntu:20.04 RUN mkdir /home/workspace WORKDIR /home/workspace RUN apt-get update && apt-get install -y python3 python3-pip RUN pip3 install pandas matplotlib seaborn numpy notebook jupyterlab viola EXPOSE 8888 CMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip=0.0.0.0\", \"--allow-root\", \"--NotebookApp.token=''\", \"--NotebookApp.password=''\"] Build Jupyter Image \u0e2a\u0e23\u0e49\u0e32\u0e07 Local Image \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker build -t chatreesr/python-dev:test . -t \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 tag \u0e0a\u0e37\u0e48\u0e2d image chatreesr/python-dev:test \u0e04\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d Image \u0e1e\u0e23\u0e49\u0e2d\u0e21 Tag . \u0e04\u0e37\u0e2d \u0e43\u0e2b\u0e49\u0e2d\u0e48\u0e32\u0e19 Dockerfile \u0e08\u0e32\u0e01 Current Directory Run Jupyter Image docker container run \\ -d --name jupyter-dev \\ -p 8888 :8888 \\ -v $( pwd ) /src:/home/workspace \\ chatreesr/python-dev:test \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c http://localhost:8888 \u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e44\u0e14\u0e49\u0e15\u0e32\u0e21\u0e1b\u0e01\u0e15\u0e34 Source Code \u0e08\u0e30\u0e16\u0e39\u0e01 Sync \u0e17\u0e35\u0e48 $(pwd)/src Push Jupyter Image docker image push chatreesr/python-dev:test \u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23 Login \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker login \u0e01\u0e48\u0e2d\u0e19 Example 2 - Airflow \u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07 Custom Image \u0e40\u0e2d\u0e07 \u0e40\u0e0a\u0e48\u0e19 \u0e25\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e25\u0e07\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 Airflow \u0e08\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e25\u0e07 Plugins \u0e02\u0e2d\u0e07 Airflow \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Database \u0e15\u0e48\u0e32\u0e07\u0e46\u0e44\u0e14\u0e49 \u0e43\u0e19\u0e23\u0e30\u0e1a\u0e1a Production \u0e15\u0e31\u0e27 Airflow \u0e08\u0e30\u0e25\u0e07\u0e17\u0e38\u0e01 Connections \u0e41\u0e25\u0e30 \u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e48\u0e2d\u0e22\u0e46 \u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e08\u0e30\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e01\u0e27\u0e48\u0e32\u0e19\u0e35\u0e49\u0e19\u0e34\u0e14\u0e2b\u0e19\u0e48\u0e2d\u0e22 \u0e41\u0e15\u0e48\u0e41\u0e19\u0e27\u0e04\u0e34\u0e14\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 Create an Airflow Dockerfile FROM apache/airflow:2.2.4-python3.8 USER root # Install system packages & clean up RUN apt-get update \\ && apt-get install -y --no-install-recommends \\ build-essential \\ # MySQL dependency default-libmysqlclient-dev \\ # ODBC dependency unixodbc-dev \\ && apt-get autoremove -yqq --purge \\ && apt-get clean \\ && rm -rf /var/lib/apt/lists/* # Install Python packages RUN pip install --no-cache-dir \\ apache-airflow-providers-airbyte==2.1.1 \\ apache-airflow-providers-apache-cassandra==2.1.0 \\ apache-airflow-providers-elasticsearch==2.2.0 \\ apache-airflow-providers-docker==2.4.1 \\ apache-airflow-providers-microsoft-mssql==2.1.0 \\ apache-airflow-providers-http==2.0.3 \\ apache-airflow-providers-imap==2.2.0 \\ apache-airflow-providers-influxdb==1.1.0 \\ apache-airflow-providers-jdbc==2.1.0 \\ apache-airflow-providers-postgres==3.0.0 \\ apache-airflow-providers-mongo==2.3.0 \\ apache-airflow-providers-mysql==2.2.0 \\ apache-airflow-providers-neo4j==2.1.0 \\ apache-airflow-providers-odbc==2.0.1 \\ apache-airflow-providers-redis==2.0.1 USER airflow Build Airflow Image docker build -t chatreesr/airflow-py3.8:test . Push Airflow Image docker push chatreesr/airflow-py3.8:test Example 3 - Python API App \u0e43\u0e0a\u0e49\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32 Python App \u0e1b\u0e01\u0e15\u0e34 \u0e17\u0e33\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 python3 -m venv venv \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 Virtual Environment \u0e0a\u0e37\u0e48\u0e2d venv Activate environment \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 source venv/bin/activate \u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 \u0e41\u0e25\u0e30 \u0e25\u0e07 Module \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 pip install <module_name> \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 \u0e1e\u0e23\u0e49\u0e2d\u0e21 Deploy \u0e43\u0e2b\u0e49 List \u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Module \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 pip freeze > requirements.txt API Dockerfile Source code \u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 API \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Folder docker-python-app FROM python:3.9 RUN mkdir /app WORKDIR /app # Install dependencies COPY requirements.txt . RUN pip install -r requirements.txt # Run the applications COPY main.py . COPY data.json . CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"9999\"] EXPOSE 9999 Build Python Image docker build -t chatreesr/pyapi:test . Push Python Image docker push chatreesr/pyapi:test Run Python API \u0e23\u0e31\u0e19 API \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01 API \u0e17\u0e35\u0e48 http://localhost:9999 \u0e14\u0e39 API Docs \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 http://localhost:9999/docs docker container run \\ --name pyapi -d \\ -p 9999 :9999 \\ chatreesr/pyapi:test","title":"Images"},{"location":"docker/images/#images","text":"\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Image \u0e0a\u0e32\u0e27\u0e1a\u0e49\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e15\u0e49\u0e19 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 Customize App \u0e15\u0e32\u0e21\u0e04\u0e27\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 Package App \u0e17\u0e35\u0e48\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e14\u0e49\u0e27\u0e22\u0e15\u0e19\u0e40\u0e2d\u0e07\u0e43\u0e2b\u0e49\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19","title":"Images"},{"location":"docker/images/#dockerfile","text":"\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e43\u0e0a\u0e49\u0e40\u0e2d\u0e07 \u0e40\u0e02\u0e35\u0e22\u0e19 Dockerfile \u0e15\u0e32\u0e21\u0e04\u0e33\u0e41\u0e19\u0e30\u0e19\u0e33 Dockerfile Reference Build Image Push Image \u0e44\u0e1b\u0e17\u0e35\u0e48 Repository (Docker Hub) Run Image \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19","title":"Dockerfile"},{"location":"docker/images/#example-1-dev-notebook","text":"\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Python Dev Environment \u0e17\u0e35\u0e48\u0e21\u0e35 Package \u0e22\u0e2d\u0e14\u0e19\u0e34\u0e22\u0e21\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1c\u0e48\u0e32\u0e19 Jupyter Notebook","title":"Example 1 - Dev Notebook"},{"location":"docker/images/#python-dockerfile","text":"\u0e43\u0e2b\u0e49 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d Dockerfile (\u0e44\u0e21\u0e48\u0e21\u0e35 Extension) \u0e41\u0e25\u0e30 Copy \u0e0a\u0e38\u0e14\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 FROM ubuntu:20.04 RUN mkdir /home/workspace WORKDIR /home/workspace RUN apt-get update && apt-get install -y python3 python3-pip RUN pip3 install pandas matplotlib seaborn numpy notebook jupyterlab viola EXPOSE 8888 CMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip=0.0.0.0\", \"--allow-root\", \"--NotebookApp.token=''\", \"--NotebookApp.password=''\"]","title":"Python Dockerfile"},{"location":"docker/images/#build-jupyter-image","text":"\u0e2a\u0e23\u0e49\u0e32\u0e07 Local Image \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker build -t chatreesr/python-dev:test . -t \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 tag \u0e0a\u0e37\u0e48\u0e2d image chatreesr/python-dev:test \u0e04\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d Image \u0e1e\u0e23\u0e49\u0e2d\u0e21 Tag . \u0e04\u0e37\u0e2d \u0e43\u0e2b\u0e49\u0e2d\u0e48\u0e32\u0e19 Dockerfile \u0e08\u0e32\u0e01 Current Directory","title":"Build Jupyter Image"},{"location":"docker/images/#run-jupyter-image","text":"docker container run \\ -d --name jupyter-dev \\ -p 8888 :8888 \\ -v $( pwd ) /src:/home/workspace \\ chatreesr/python-dev:test \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c http://localhost:8888 \u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e44\u0e14\u0e49\u0e15\u0e32\u0e21\u0e1b\u0e01\u0e15\u0e34 Source Code \u0e08\u0e30\u0e16\u0e39\u0e01 Sync \u0e17\u0e35\u0e48 $(pwd)/src","title":"Run Jupyter Image"},{"location":"docker/images/#push-jupyter-image","text":"docker image push chatreesr/python-dev:test \u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23 Login \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker login \u0e01\u0e48\u0e2d\u0e19","title":"Push Jupyter Image"},{"location":"docker/images/#example-2-airflow","text":"\u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07 Custom Image \u0e40\u0e2d\u0e07 \u0e40\u0e0a\u0e48\u0e19 \u0e25\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e25\u0e07\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 Airflow \u0e08\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e25\u0e07 Plugins \u0e02\u0e2d\u0e07 Airflow \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Database \u0e15\u0e48\u0e32\u0e07\u0e46\u0e44\u0e14\u0e49 \u0e43\u0e19\u0e23\u0e30\u0e1a\u0e1a Production \u0e15\u0e31\u0e27 Airflow \u0e08\u0e30\u0e25\u0e07\u0e17\u0e38\u0e01 Connections \u0e41\u0e25\u0e30 \u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e48\u0e2d\u0e22\u0e46 \u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e08\u0e30\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e01\u0e27\u0e48\u0e32\u0e19\u0e35\u0e49\u0e19\u0e34\u0e14\u0e2b\u0e19\u0e48\u0e2d\u0e22 \u0e41\u0e15\u0e48\u0e41\u0e19\u0e27\u0e04\u0e34\u0e14\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19","title":"Example 2 - Airflow"},{"location":"docker/images/#create-an-airflow-dockerfile","text":"FROM apache/airflow:2.2.4-python3.8 USER root # Install system packages & clean up RUN apt-get update \\ && apt-get install -y --no-install-recommends \\ build-essential \\ # MySQL dependency default-libmysqlclient-dev \\ # ODBC dependency unixodbc-dev \\ && apt-get autoremove -yqq --purge \\ && apt-get clean \\ && rm -rf /var/lib/apt/lists/* # Install Python packages RUN pip install --no-cache-dir \\ apache-airflow-providers-airbyte==2.1.1 \\ apache-airflow-providers-apache-cassandra==2.1.0 \\ apache-airflow-providers-elasticsearch==2.2.0 \\ apache-airflow-providers-docker==2.4.1 \\ apache-airflow-providers-microsoft-mssql==2.1.0 \\ apache-airflow-providers-http==2.0.3 \\ apache-airflow-providers-imap==2.2.0 \\ apache-airflow-providers-influxdb==1.1.0 \\ apache-airflow-providers-jdbc==2.1.0 \\ apache-airflow-providers-postgres==3.0.0 \\ apache-airflow-providers-mongo==2.3.0 \\ apache-airflow-providers-mysql==2.2.0 \\ apache-airflow-providers-neo4j==2.1.0 \\ apache-airflow-providers-odbc==2.0.1 \\ apache-airflow-providers-redis==2.0.1 USER airflow","title":"Create an Airflow Dockerfile"},{"location":"docker/images/#build-airflow-image","text":"docker build -t chatreesr/airflow-py3.8:test .","title":"Build Airflow Image"},{"location":"docker/images/#push-airflow-image","text":"docker push chatreesr/airflow-py3.8:test","title":"Push Airflow Image"},{"location":"docker/images/#example-3-python-api-app","text":"\u0e43\u0e0a\u0e49\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32 Python App \u0e1b\u0e01\u0e15\u0e34 \u0e17\u0e33\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 python3 -m venv venv \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 Virtual Environment \u0e0a\u0e37\u0e48\u0e2d venv Activate environment \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 source venv/bin/activate \u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 \u0e41\u0e25\u0e30 \u0e25\u0e07 Module \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 pip install <module_name> \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 \u0e1e\u0e23\u0e49\u0e2d\u0e21 Deploy \u0e43\u0e2b\u0e49 List \u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Module \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 pip freeze > requirements.txt","title":"Example 3 - Python API App"},{"location":"docker/images/#api-dockerfile","text":"Source code \u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 API \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Folder docker-python-app FROM python:3.9 RUN mkdir /app WORKDIR /app # Install dependencies COPY requirements.txt . RUN pip install -r requirements.txt # Run the applications COPY main.py . COPY data.json . CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"9999\"] EXPOSE 9999","title":"API Dockerfile"},{"location":"docker/images/#build-python-image","text":"docker build -t chatreesr/pyapi:test .","title":"Build Python Image"},{"location":"docker/images/#push-python-image","text":"docker push chatreesr/pyapi:test","title":"Push Python Image"},{"location":"docker/images/#run-python-api","text":"\u0e23\u0e31\u0e19 API \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01 API \u0e17\u0e35\u0e48 http://localhost:9999 \u0e14\u0e39 API Docs \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 http://localhost:9999/docs docker container run \\ --name pyapi -d \\ -p 9999 :9999 \\ chatreesr/pyapi:test","title":"Run Python API"},{"location":"docker/networks/","text":"Networks Network \u0e04\u0e37\u0e2d \u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e02\u0e2d\u0e07 Container \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e23\u0e30\u0e1a\u0e38 Docker Engine \u0e08\u0e30\u0e43\u0e2b\u0e49 Container \u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48 Default Bridge Network \u0e42\u0e14\u0e22\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e04\u0e37\u0e2d network \u0e40\u0e0a\u0e48\u0e19 docker network <sub-command> [ options ] \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e23\u0e32\u0e21\u0e31\u0e01\u0e08\u0e30\u0e08\u0e31\u0e1a\u0e01\u0e25\u0e38\u0e48\u0e21\u0e43\u0e2b\u0e49 Application \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Network \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 Concept List Networks docker network ls Check Containers in Networks docker network inspect <network_id> \u0e14\u0e39\u0e17\u0e35\u0e48 Section Containers \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Container \u0e44\u0e2b\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Network \u0e43\u0e14 Create a Network docker network create <network_name> Default Network Driver \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 Bridge \u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker Swarm \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e0a\u0e49 Overlay Network Network \u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e2d\u0e07\u0e08\u0e30\u0e21\u0e35 DNS Resolver \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e2b\u0e21\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e27\u0e48\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d Container \u0e41\u0e17\u0e19 IP Address \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 ( Default Network \u0e44\u0e21\u0e48\u0e21\u0e35 DNS Resolver \u0e43\u0e2b\u0e49 ) Example 1 - Database Dev \u0e2a\u0e21\u0e21\u0e15\u0e34\u0e27\u0e48\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Development Environment \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Database \u0e21\u0e35\u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a UI \u0e21\u0e35\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 PostgreSQL Create a Database Network \u0e40\u0e23\u0e34\u0e48\u0e21\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Network docker network create db-dev Run a Web UI within Network \u0e23\u0e31\u0e19 Cloudbeaver UI (\u0e15\u0e31\u0e27\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database \u0e1a\u0e19 Web) \u0e14\u0e49\u0e27\u0e22 --network docker run \\ --name cloudbeaver \\ -d -it -p 8090 :8978 \\ --network db-dev \\ dbeaver/cloudbeaver:latest Run a PostgreSQL within Network \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19 docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ --network db-dev \\ postgres Check \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a http://localhost:8090 \u0e42\u0e14\u0e22\u0e40\u0e27\u0e25\u0e32\u0e23\u0e30\u0e1a\u0e38 hostname \u0e43\u0e2b\u0e49\u0e23\u0e30\u0e1a\u0e38\u0e0a\u0e37\u0e48\u0e2d Container mypostgres \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Docker Engine \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25 mypostgres \u0e40\u0e1b\u0e47\u0e19 IP Address \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 Example 2 - DNS Round Robin \u0e2a\u0e21\u0e21\u0e15\u0e34\u0e27\u0e48\u0e32\u0e21\u0e35 Server Elasticsearch \u0e2d\u0e22\u0e39\u0e48 2 \u0e15\u0e31\u0e27 \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33 Load Balancer \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e07\u0e48\u0e32\u0e22\u0e43\u0e2b\u0e49 Traffic \u0e44\u0e1b\u0e2b\u0e32 Server \u0e17\u0e31\u0e49\u0e07\u0e04\u0e39\u0e48\u0e1e\u0e2d\u0e46\u0e01\u0e31\u0e19 \u0e17\u0e33\u0e41\u0e1a\u0e1a\u0e2b\u0e22\u0e32\u0e1a\u0e46\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 --net-alias \u0e02\u0e2d\u0e07 Docker \u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49 Create a DNS Network docker network create elastic-lb Add Containers \u0e43\u0e2a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 \u0e2a\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e49\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 2 Containers docker container run \\ -d --network elastic-lb \\ --net-alias search-cluster \\ elasticsearch:2 --net-alias \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32\u0e43\u0e2b\u0e49 Map \u0e0a\u0e37\u0e48\u0e2d Container \u0e19\u0e35\u0e49\u0e01\u0e31\u0e1a\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e23\u0e30\u0e1a\u0e38\u0e43\u0e19 --net-alias \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e19\u0e35\u0e49\u0e04\u0e37\u0e2d search-cluster \u0e40\u0e27\u0e25\u0e32\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49 search-cluster Docker \u0e08\u0e30 Forward Traffic \u0e44\u0e1b\u0e2b\u0e32 Server \u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1a\u0e1a\u0e2a\u0e38\u0e48\u0e21 Test DNS \u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 Attach Alpine Linux \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Network elastic-lb \u0e41\u0e25\u0e49\u0e27\u0e01\u0e47\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 nslookup search-cluster \u0e43\u0e19\u0e01\u0e32\u0e23\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e25\u0e02 IP Address \u0e17\u0e35\u0e48\u0e1c\u0e39\u0e01\u0e2d\u0e22\u0e39\u0e48\u0e01\u0e31\u0e1a\u0e0a\u0e37\u0e48\u0e2d search-cluster docker container run \\ --rm --network elastic-lb \\ alpine nslookup search-cluster Call Elastic API \u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 Attach CentOS Linux \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Network elastic-lb \u0e41\u0e25\u0e49\u0e27\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 Elasticsearch \u0e14\u0e49\u0e27\u0e22 curl (\u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49 CentOS \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32\u0e21\u0e35 curl \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49 \u0e41\u0e15\u0e48 Alpine \u0e44\u0e21\u0e48\u0e21\u0e35) \u0e43\u0e2b\u0e49\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2b\u0e25\u0e32\u0e22\u0e46\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e41\u0e19\u0e48\u0e43\u0e08\u0e27\u0e48\u0e32 Response \u0e21\u0e32\u0e08\u0e32\u0e01 Server \u0e04\u0e19\u0e25\u0e30\u0e15\u0e31\u0e27 \u0e42\u0e14\u0e22\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e17\u0e35\u0e48 name docker container run \\ --rm --network elastic-lb \\ centos curl -s search-cluster:9200 Example 3 - Wordpress \u0e2a\u0e48\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e02\u0e2d\u0e07 Wordpress \u0e04\u0e37\u0e2d \u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 Worpress \u0e17\u0e35\u0e48\u0e23\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19 Webserver \u0e41\u0e25\u0e30 PHP \u0e01\u0e31\u0e1a Database MySQL \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23 Deploy \u0e04\u0e37\u0e2d \u0e2a\u0e23\u0e49\u0e32\u0e07 Network \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a App Wordpress Deploy mysql + \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Volume Deploy wordpress + \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Volume \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e01\u0e23\u0e13\u0e35\u0e41\u0e1a\u0e1a\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 Docker Compose (\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c\u0e2b\u0e19\u0e49\u0e32) \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e07\u0e48\u0e32\u0e22\u0e01\u0e27\u0e48\u0e32 \u0e41\u0e15\u0e48\u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e41\u0e1a\u0e1a\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e49 Compose Create a Wordpress Network docker network create wordpress-net Deploy MySQL \u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23 Deploy Database MySQL \u0e01\u0e48\u0e2d\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container run \\ -d --name wordpress-db \\ -e MYSQL_DATABASE = mywebsite-db \\ -e MYSQL_USER = admin \\ -e MYSQL_PASSWORD = wordpresspassword \\ -e MYSQL_ROOT_PASSWORD = rootpassword \\ -v wordpress-db:/var/lib/mysql \\ --network wordpress-net \\ mysql Deploy Wordpress docker container run \\ -d -p 8099 :80 \\ --name wordpress-site \\ -e WORDPRESS_DB_HOST = wordpress-db \\ -e WORDPRESS_DB_USER = admin \\ -e WORDPRESS_DB_PASSWORD = wordpresspassword \\ -e WORDPRESS_DB_NAME = mywebsite-db \\ -v wordpress:/var/www/html \\ --network wordpress-net \\ wordpress Test Wordpress \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48 http://localhost:8099 \u0e17\u0e33\u0e01\u0e32\u0e23 Setup \u0e15\u0e32\u0e21\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 Wizard \u0e08\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e02\u0e35\u0e22\u0e19 Post + \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Theme","title":"Networks"},{"location":"docker/networks/#networks","text":"Network \u0e04\u0e37\u0e2d \u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e02\u0e2d\u0e07 Container \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e23\u0e30\u0e1a\u0e38 Docker Engine \u0e08\u0e30\u0e43\u0e2b\u0e49 Container \u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48 Default Bridge Network \u0e42\u0e14\u0e22\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e04\u0e37\u0e2d network \u0e40\u0e0a\u0e48\u0e19 docker network <sub-command> [ options ] \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e23\u0e32\u0e21\u0e31\u0e01\u0e08\u0e30\u0e08\u0e31\u0e1a\u0e01\u0e25\u0e38\u0e48\u0e21\u0e43\u0e2b\u0e49 Application \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Network \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19","title":"Networks"},{"location":"docker/networks/#concept","text":"","title":"Concept"},{"location":"docker/networks/#list-networks","text":"docker network ls","title":"List Networks"},{"location":"docker/networks/#check-containers-in-networks","text":"docker network inspect <network_id> \u0e14\u0e39\u0e17\u0e35\u0e48 Section Containers \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Container \u0e44\u0e2b\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Network \u0e43\u0e14","title":"Check Containers in Networks"},{"location":"docker/networks/#create-a-network","text":"docker network create <network_name> Default Network Driver \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 Bridge \u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker Swarm \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e0a\u0e49 Overlay Network Network \u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e2d\u0e07\u0e08\u0e30\u0e21\u0e35 DNS Resolver \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e2b\u0e21\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e27\u0e48\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d Container \u0e41\u0e17\u0e19 IP Address \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 ( Default Network \u0e44\u0e21\u0e48\u0e21\u0e35 DNS Resolver \u0e43\u0e2b\u0e49 )","title":"Create a Network"},{"location":"docker/networks/#example-1-database-dev","text":"\u0e2a\u0e21\u0e21\u0e15\u0e34\u0e27\u0e48\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Development Environment \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Database \u0e21\u0e35\u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a UI \u0e21\u0e35\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 PostgreSQL","title":"Example 1 - Database Dev"},{"location":"docker/networks/#create-a-database-network","text":"\u0e40\u0e23\u0e34\u0e48\u0e21\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Network docker network create db-dev","title":"Create a Database Network"},{"location":"docker/networks/#run-a-web-ui-within-network","text":"\u0e23\u0e31\u0e19 Cloudbeaver UI (\u0e15\u0e31\u0e27\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database \u0e1a\u0e19 Web) \u0e14\u0e49\u0e27\u0e22 --network docker run \\ --name cloudbeaver \\ -d -it -p 8090 :8978 \\ --network db-dev \\ dbeaver/cloudbeaver:latest","title":"Run a Web UI within Network"},{"location":"docker/networks/#run-a-postgresql-within-network","text":"\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19 docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ --network db-dev \\ postgres","title":"Run a PostgreSQL within Network"},{"location":"docker/networks/#check","text":"\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a http://localhost:8090 \u0e42\u0e14\u0e22\u0e40\u0e27\u0e25\u0e32\u0e23\u0e30\u0e1a\u0e38 hostname \u0e43\u0e2b\u0e49\u0e23\u0e30\u0e1a\u0e38\u0e0a\u0e37\u0e48\u0e2d Container mypostgres \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Docker Engine \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25 mypostgres \u0e40\u0e1b\u0e47\u0e19 IP Address \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34","title":"Check"},{"location":"docker/networks/#example-2-dns-round-robin","text":"\u0e2a\u0e21\u0e21\u0e15\u0e34\u0e27\u0e48\u0e32\u0e21\u0e35 Server Elasticsearch \u0e2d\u0e22\u0e39\u0e48 2 \u0e15\u0e31\u0e27 \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33 Load Balancer \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e07\u0e48\u0e32\u0e22\u0e43\u0e2b\u0e49 Traffic \u0e44\u0e1b\u0e2b\u0e32 Server \u0e17\u0e31\u0e49\u0e07\u0e04\u0e39\u0e48\u0e1e\u0e2d\u0e46\u0e01\u0e31\u0e19 \u0e17\u0e33\u0e41\u0e1a\u0e1a\u0e2b\u0e22\u0e32\u0e1a\u0e46\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 --net-alias \u0e02\u0e2d\u0e07 Docker \u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49","title":"Example 2 - DNS Round Robin"},{"location":"docker/networks/#create-a-dns-network","text":"docker network create elastic-lb","title":"Create a DNS Network"},{"location":"docker/networks/#add-containers","text":"\u0e43\u0e2a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 \u0e2a\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e49\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 2 Containers docker container run \\ -d --network elastic-lb \\ --net-alias search-cluster \\ elasticsearch:2 --net-alias \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32\u0e43\u0e2b\u0e49 Map \u0e0a\u0e37\u0e48\u0e2d Container \u0e19\u0e35\u0e49\u0e01\u0e31\u0e1a\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e23\u0e30\u0e1a\u0e38\u0e43\u0e19 --net-alias \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e19\u0e35\u0e49\u0e04\u0e37\u0e2d search-cluster \u0e40\u0e27\u0e25\u0e32\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49 search-cluster Docker \u0e08\u0e30 Forward Traffic \u0e44\u0e1b\u0e2b\u0e32 Server \u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1a\u0e1a\u0e2a\u0e38\u0e48\u0e21","title":"Add Containers"},{"location":"docker/networks/#test-dns","text":"\u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 Attach Alpine Linux \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Network elastic-lb \u0e41\u0e25\u0e49\u0e27\u0e01\u0e47\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 nslookup search-cluster \u0e43\u0e19\u0e01\u0e32\u0e23\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e25\u0e02 IP Address \u0e17\u0e35\u0e48\u0e1c\u0e39\u0e01\u0e2d\u0e22\u0e39\u0e48\u0e01\u0e31\u0e1a\u0e0a\u0e37\u0e48\u0e2d search-cluster docker container run \\ --rm --network elastic-lb \\ alpine nslookup search-cluster","title":"Test DNS"},{"location":"docker/networks/#call-elastic-api","text":"\u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 Attach CentOS Linux \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Network elastic-lb \u0e41\u0e25\u0e49\u0e27\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 Elasticsearch \u0e14\u0e49\u0e27\u0e22 curl (\u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49 CentOS \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32\u0e21\u0e35 curl \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49 \u0e41\u0e15\u0e48 Alpine \u0e44\u0e21\u0e48\u0e21\u0e35) \u0e43\u0e2b\u0e49\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2b\u0e25\u0e32\u0e22\u0e46\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e41\u0e19\u0e48\u0e43\u0e08\u0e27\u0e48\u0e32 Response \u0e21\u0e32\u0e08\u0e32\u0e01 Server \u0e04\u0e19\u0e25\u0e30\u0e15\u0e31\u0e27 \u0e42\u0e14\u0e22\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e17\u0e35\u0e48 name docker container run \\ --rm --network elastic-lb \\ centos curl -s search-cluster:9200","title":"Call Elastic API"},{"location":"docker/networks/#example-3-wordpress","text":"\u0e2a\u0e48\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e02\u0e2d\u0e07 Wordpress \u0e04\u0e37\u0e2d \u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 Worpress \u0e17\u0e35\u0e48\u0e23\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19 Webserver \u0e41\u0e25\u0e30 PHP \u0e01\u0e31\u0e1a Database MySQL \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23 Deploy \u0e04\u0e37\u0e2d \u0e2a\u0e23\u0e49\u0e32\u0e07 Network \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a App Wordpress Deploy mysql + \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Volume Deploy wordpress + \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Volume \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e01\u0e23\u0e13\u0e35\u0e41\u0e1a\u0e1a\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 Docker Compose (\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c\u0e2b\u0e19\u0e49\u0e32) \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e07\u0e48\u0e32\u0e22\u0e01\u0e27\u0e48\u0e32 \u0e41\u0e15\u0e48\u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e41\u0e1a\u0e1a\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e49 Compose","title":"Example 3 - Wordpress"},{"location":"docker/networks/#create-a-wordpress-network","text":"docker network create wordpress-net","title":"Create a Wordpress Network"},{"location":"docker/networks/#deploy-mysql","text":"\u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23 Deploy Database MySQL \u0e01\u0e48\u0e2d\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container run \\ -d --name wordpress-db \\ -e MYSQL_DATABASE = mywebsite-db \\ -e MYSQL_USER = admin \\ -e MYSQL_PASSWORD = wordpresspassword \\ -e MYSQL_ROOT_PASSWORD = rootpassword \\ -v wordpress-db:/var/lib/mysql \\ --network wordpress-net \\ mysql","title":"Deploy MySQL"},{"location":"docker/networks/#deploy-wordpress","text":"docker container run \\ -d -p 8099 :80 \\ --name wordpress-site \\ -e WORDPRESS_DB_HOST = wordpress-db \\ -e WORDPRESS_DB_USER = admin \\ -e WORDPRESS_DB_PASSWORD = wordpresspassword \\ -e WORDPRESS_DB_NAME = mywebsite-db \\ -v wordpress:/var/www/html \\ --network wordpress-net \\ wordpress","title":"Deploy Wordpress"},{"location":"docker/networks/#test-wordpress","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48 http://localhost:8099 \u0e17\u0e33\u0e01\u0e32\u0e23 Setup \u0e15\u0e32\u0e21\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 Wizard \u0e08\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e02\u0e35\u0e22\u0e19 Post + \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Theme","title":"Test Wordpress"},{"location":"docker/use/","text":"Basics Prerequisites Basic Networking Basic Command Line Basic Programming & Software Development Process Containers vs Virtualization Virtualization Containerization Running Containers \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker \u0e21\u0e35\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a docker <command> <sub-command> [options] Starting Containers docker container run --name mywebserver --detach --publish 8080:80 nginx \u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e40\u0e01\u0e34\u0e14\u0e02\u0e36\u0e49\u0e19\u0e2b\u0e25\u0e31\u0e07\u0e1b\u0e49\u0e2d\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 Docker \u0e44\u0e1b\u0e04\u0e49\u0e19\u0e2b\u0e32 Image (\u0e19\u0e36\u0e01\u0e16\u0e36\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\u0e23\u0e39\u0e1b\u0e17\u0e35\u0e48\u0e41\u0e1e\u0e01\u0e40\u0e01\u0e08\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22 \u0e21\u0e35\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19 \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19) \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e04\u0e2d\u0e21\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e40\u0e08\u0e2d Image Docker \u0e21\u0e31\u0e19\u0e08\u0e30\u0e44\u0e1b\u0e04\u0e49\u0e19\u0e2b\u0e32\u0e17\u0e35\u0e48 Docker Hub \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 Repository \u0e01\u0e25\u0e32\u0e07\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e01\u0e47\u0e1a Image \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e1e\u0e1a Image \u0e41\u0e25\u0e49\u0e27 Docker \u0e08\u0e30 Download \u0e21\u0e32\u0e40\u0e01\u0e47\u0e1a\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e04\u0e2d\u0e21\u0e40\u0e23\u0e32 Docker Engine \u0e40\u0e2d\u0e32 Image \u0e21\u0e32\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Image \u0e04\u0e37\u0e2d Container --name \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d Container \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e15\u0e31\u0e49\u0e07 Docker \u0e08\u0e30\u0e43\u0e2b\u0e49 ID \u0e21\u0e32\u0e41\u0e17\u0e19 -d \u0e2b\u0e23\u0e37\u0e2d --detach \u0e04\u0e37\u0e2d\u0e43\u0e2b\u0e49\u0e04\u0e37\u0e19 Prompt \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e2a\u0e14\u0e07 Logs \u0e15\u0e2d\u0e19\u0e23\u0e31\u0e19 -p \u0e2b\u0e23\u0e37\u0e2d --publish \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e43\u0e2b\u0e49 Docker Engine \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Host Port 8080 \u0e01\u0e31\u0e1a Container Port 80 \u0e40\u0e02\u0e49\u0e32 Web Browser \u0e17\u0e35\u0e48 http://localhost:8080 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39 Nginx Welcome Page Managing Containers \u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Container \u0e43\u0e0a\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 container \u0e40\u0e0a\u0e48\u0e19 docker container <sub-command> List Containers \u0e14\u0e39\u0e40\u0e09\u0e1e\u0e32\u0e30 Container \u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48 docker container ls \u0e14\u0e39 Container \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 (\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e41\u0e25\u0e30 \u0e2b\u0e22\u0e38\u0e14\u0e17\u0e33\u0e07\u0e32\u0e19) docker container ls -a Stop Containers docker container stop mywebserver Remove Containers docker container rm mywebserver Container Logs docker container logs mywebserver Container Ports docker container port mywebserver Container Processes docker container top mywebserver Resource Consumption docker container stats mywebserver Inspect Containers docker container inspect mywebserver \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a IP Address \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container inspect \\ --format '{{ .NetworkSettings.IPAddress }}' \\ mywebserver '{{ .NetworkSettings.IPAddress }}' \u0e04\u0e37\u0e2d Go Template Access Containers docker container exec -it mywebserver bash exec \u0e04\u0e37\u0e2d\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e43\u0e2b\u0e49\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e43\u0e19 Container -it \u0e04\u0e37\u0e2d interactive tty \u0e19\u0e36\u0e01\u0e16\u0e36\u0e07\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Shell bash \u0e04\u0e37\u0e2d \u0e0a\u0e37\u0e48\u0e2d\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e43\u0e19 Container Clean up \u0e25\u0e1a\u0e17\u0e38\u0e01\u0e2a\u0e34\u0e48\u0e07\u0e2d\u0e22\u0e48\u0e32\u0e07 (\u0e22\u0e01\u0e40\u0e27\u0e49\u0e19 Volume) docker system prune -a Example 1 - PostgreSQL Starting a Database docker container run \\ --name mypostgres \\ -e POSTGRES_PASSWORD = secretpassword \\ -d -p 5432 :5432 \\ postgres -e \u0e2b\u0e23\u0e37\u0e2d --env \u0e04\u0e37\u0e2d Environment Variables \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e43\u0e19 Container Accessing psql docker container exec -it mypostgres psql -U postgres \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 psql \\l \u0e2b\u0e23\u0e37\u0e2d \\l+ \u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Database SELECT datname FROM pg_database; \\dt \u0e2b\u0e23\u0e37\u0e2d \\dt * \u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Relations (Tables) CREATE DATABASE airflow; \u0e2a\u0e23\u0e49\u0e32\u0e07 Database \u0e0a\u0e37\u0e48\u0e2d\u0e27\u0e48\u0e32 Airflow \u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 SQL \u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 (\u0e08\u0e30\u0e43\u0e0a\u0e49 CRUD \u0e01\u0e31\u0e19\u0e08\u0e23\u0e34\u0e07\u0e08\u0e31\u0e07\u0e2d\u0e35\u0e01\u0e17\u0e35 Session \u0e2d\u0e37\u0e48\u0e19) Connecting from Host \u0e43\u0e0a\u0e49\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database (\u0e40\u0e0a\u0e48\u0e19 dbeaver \u0e2b\u0e23\u0e37\u0e2d beekeeper-studio) \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d PostgreSQL \u0e42\u0e14\u0e22\u0e01\u0e33\u0e2b\u0e19\u0e14 Host = localhost , Port = 5432 Username = postgres , Password = secretpassword Stopping the Database docker container stop mypostgres Removing the Database docker container rm mypostgres Example 2 - Web Server Starting a Web Server docker container run --name mywebserver -d -p 8080 :80 nginx Checking Container \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a Browser http://localhost:8080 Changing Default Page docker container exec -it mywebserver bash \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Text Editor vim \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 apt update && apt install vim -y \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c html vim /usr/share/nginx/html/index.html \u0e01\u0e14 Refresh \u0e17\u0e35\u0e48 Browser\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e41\u0e01\u0e49\u0e44\u0e02 Removing the Web Server docker container rm -f mywebserver -f \u0e04\u0e37\u0e2d force \u0e1a\u0e31\u0e07\u0e04\u0e31\u0e1a Remove \u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 Stop \u0e01\u0e48\u0e2d\u0e19","title":"Basics"},{"location":"docker/use/#basics","text":"","title":"Basics"},{"location":"docker/use/#prerequisites","text":"Basic Networking Basic Command Line Basic Programming & Software Development Process","title":"Prerequisites"},{"location":"docker/use/#containers-vs-virtualization","text":"","title":"Containers vs Virtualization"},{"location":"docker/use/#virtualization","text":"","title":"Virtualization"},{"location":"docker/use/#containerization","text":"","title":"Containerization"},{"location":"docker/use/#running-containers","text":"\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker \u0e21\u0e35\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a docker <command> <sub-command> [options]","title":"Running Containers"},{"location":"docker/use/#starting-containers","text":"docker container run --name mywebserver --detach --publish 8080:80 nginx \u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e40\u0e01\u0e34\u0e14\u0e02\u0e36\u0e49\u0e19\u0e2b\u0e25\u0e31\u0e07\u0e1b\u0e49\u0e2d\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 Docker \u0e44\u0e1b\u0e04\u0e49\u0e19\u0e2b\u0e32 Image (\u0e19\u0e36\u0e01\u0e16\u0e36\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\u0e23\u0e39\u0e1b\u0e17\u0e35\u0e48\u0e41\u0e1e\u0e01\u0e40\u0e01\u0e08\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22 \u0e21\u0e35\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19 \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19) \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e04\u0e2d\u0e21\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e40\u0e08\u0e2d Image Docker \u0e21\u0e31\u0e19\u0e08\u0e30\u0e44\u0e1b\u0e04\u0e49\u0e19\u0e2b\u0e32\u0e17\u0e35\u0e48 Docker Hub \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 Repository \u0e01\u0e25\u0e32\u0e07\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e01\u0e47\u0e1a Image \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e1e\u0e1a Image \u0e41\u0e25\u0e49\u0e27 Docker \u0e08\u0e30 Download \u0e21\u0e32\u0e40\u0e01\u0e47\u0e1a\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e04\u0e2d\u0e21\u0e40\u0e23\u0e32 Docker Engine \u0e40\u0e2d\u0e32 Image \u0e21\u0e32\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Image \u0e04\u0e37\u0e2d Container --name \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d Container \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e15\u0e31\u0e49\u0e07 Docker \u0e08\u0e30\u0e43\u0e2b\u0e49 ID \u0e21\u0e32\u0e41\u0e17\u0e19 -d \u0e2b\u0e23\u0e37\u0e2d --detach \u0e04\u0e37\u0e2d\u0e43\u0e2b\u0e49\u0e04\u0e37\u0e19 Prompt \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e2a\u0e14\u0e07 Logs \u0e15\u0e2d\u0e19\u0e23\u0e31\u0e19 -p \u0e2b\u0e23\u0e37\u0e2d --publish \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e43\u0e2b\u0e49 Docker Engine \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Host Port 8080 \u0e01\u0e31\u0e1a Container Port 80 \u0e40\u0e02\u0e49\u0e32 Web Browser \u0e17\u0e35\u0e48 http://localhost:8080 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39 Nginx Welcome Page","title":"Starting Containers"},{"location":"docker/use/#managing-containers","text":"\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Container \u0e43\u0e0a\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 container \u0e40\u0e0a\u0e48\u0e19 docker container <sub-command>","title":"Managing Containers"},{"location":"docker/use/#list-containers","text":"\u0e14\u0e39\u0e40\u0e09\u0e1e\u0e32\u0e30 Container \u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48 docker container ls \u0e14\u0e39 Container \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 (\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e41\u0e25\u0e30 \u0e2b\u0e22\u0e38\u0e14\u0e17\u0e33\u0e07\u0e32\u0e19) docker container ls -a","title":"List Containers"},{"location":"docker/use/#stop-containers","text":"docker container stop mywebserver","title":"Stop Containers"},{"location":"docker/use/#remove-containers","text":"docker container rm mywebserver","title":"Remove Containers"},{"location":"docker/use/#container-logs","text":"docker container logs mywebserver","title":"Container Logs"},{"location":"docker/use/#container-ports","text":"docker container port mywebserver","title":"Container Ports"},{"location":"docker/use/#container-processes","text":"docker container top mywebserver","title":"Container Processes"},{"location":"docker/use/#resource-consumption","text":"docker container stats mywebserver","title":"Resource Consumption"},{"location":"docker/use/#inspect-containers","text":"docker container inspect mywebserver \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a IP Address \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container inspect \\ --format '{{ .NetworkSettings.IPAddress }}' \\ mywebserver '{{ .NetworkSettings.IPAddress }}' \u0e04\u0e37\u0e2d Go Template","title":"Inspect Containers"},{"location":"docker/use/#access-containers","text":"docker container exec -it mywebserver bash exec \u0e04\u0e37\u0e2d\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e43\u0e2b\u0e49\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e43\u0e19 Container -it \u0e04\u0e37\u0e2d interactive tty \u0e19\u0e36\u0e01\u0e16\u0e36\u0e07\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Shell bash \u0e04\u0e37\u0e2d \u0e0a\u0e37\u0e48\u0e2d\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e43\u0e19 Container","title":"Access Containers"},{"location":"docker/use/#clean-up","text":"\u0e25\u0e1a\u0e17\u0e38\u0e01\u0e2a\u0e34\u0e48\u0e07\u0e2d\u0e22\u0e48\u0e32\u0e07 (\u0e22\u0e01\u0e40\u0e27\u0e49\u0e19 Volume) docker system prune -a","title":"Clean up"},{"location":"docker/use/#example-1-postgresql","text":"","title":"Example 1 - PostgreSQL"},{"location":"docker/use/#starting-a-database","text":"docker container run \\ --name mypostgres \\ -e POSTGRES_PASSWORD = secretpassword \\ -d -p 5432 :5432 \\ postgres -e \u0e2b\u0e23\u0e37\u0e2d --env \u0e04\u0e37\u0e2d Environment Variables \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e43\u0e19 Container","title":"Starting a Database"},{"location":"docker/use/#accessing-psql","text":"docker container exec -it mypostgres psql -U postgres \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 psql \\l \u0e2b\u0e23\u0e37\u0e2d \\l+ \u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Database SELECT datname FROM pg_database; \\dt \u0e2b\u0e23\u0e37\u0e2d \\dt * \u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Relations (Tables) CREATE DATABASE airflow; \u0e2a\u0e23\u0e49\u0e32\u0e07 Database \u0e0a\u0e37\u0e48\u0e2d\u0e27\u0e48\u0e32 Airflow \u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 SQL \u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 (\u0e08\u0e30\u0e43\u0e0a\u0e49 CRUD \u0e01\u0e31\u0e19\u0e08\u0e23\u0e34\u0e07\u0e08\u0e31\u0e07\u0e2d\u0e35\u0e01\u0e17\u0e35 Session \u0e2d\u0e37\u0e48\u0e19)","title":"Accessing psql"},{"location":"docker/use/#connecting-from-host","text":"\u0e43\u0e0a\u0e49\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database (\u0e40\u0e0a\u0e48\u0e19 dbeaver \u0e2b\u0e23\u0e37\u0e2d beekeeper-studio) \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d PostgreSQL \u0e42\u0e14\u0e22\u0e01\u0e33\u0e2b\u0e19\u0e14 Host = localhost , Port = 5432 Username = postgres , Password = secretpassword","title":"Connecting from Host"},{"location":"docker/use/#stopping-the-database","text":"docker container stop mypostgres","title":"Stopping the Database"},{"location":"docker/use/#removing-the-database","text":"docker container rm mypostgres","title":"Removing the Database"},{"location":"docker/use/#example-2-web-server","text":"","title":"Example 2 - Web Server"},{"location":"docker/use/#starting-a-web-server","text":"docker container run --name mywebserver -d -p 8080 :80 nginx","title":"Starting a Web Server"},{"location":"docker/use/#checking-container","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a Browser http://localhost:8080","title":"Checking Container"},{"location":"docker/use/#changing-default-page","text":"docker container exec -it mywebserver bash \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Text Editor vim \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 apt update && apt install vim -y \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c html vim /usr/share/nginx/html/index.html \u0e01\u0e14 Refresh \u0e17\u0e35\u0e48 Browser\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e41\u0e01\u0e49\u0e44\u0e02","title":"Changing Default Page"},{"location":"docker/use/#removing-the-web-server","text":"docker container rm -f mywebserver -f \u0e04\u0e37\u0e2d force \u0e1a\u0e31\u0e07\u0e04\u0e31\u0e1a Remove \u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 Stop \u0e01\u0e48\u0e2d\u0e19","title":"Removing the Web Server"},{"location":"docker/volumes/","text":"Volumes Volumes \u0e04\u0e37\u0e2d File System \u0e17\u0e35\u0e48 Docker \u0e43\u0e0a\u0e49\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Container \u0e40\u0e0a\u0e48\u0e19 \u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 Database Adding volumes to database docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d -v \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 Volume \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a Database PostgreSQL postgresdb \u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d Docker Volume \u0e17\u0e35\u0e48\u0e15\u0e31\u0e49\u0e07\u0e40\u0e2d\u0e07\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 /var/lib/postgresql/data \u0e04\u0e37\u0e2d Path \u0e17\u0e35\u0e48 Database \u0e40\u0e02\u0e35\u0e22\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e25\u0e07\u0e44\u0e1b \u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 -v postgresdb:/var/lib/postgresql/data \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48 Database \u0e40\u0e02\u0e35\u0e22\u0e19\u0e25\u0e07 /var/lib/postgresql/data \u0e08\u0e30\u0e16\u0e39\u0e01\u0e40\u0e01\u0e47\u0e1a\u0e44\u0e27\u0e49\u0e1a\u0e19 Host \u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Volume \u0e17\u0e35\u0e48\u0e0a\u0e37\u0e48\u0e2d postgresdb \u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Volumes \u0e43\u0e0a\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 volume \u0e40\u0e0a\u0e48\u0e19 docker volume <sub-command> [ options ] List Volumes docker volume ls Inspect Volumes docker volume inspect postgresdb \u0e2b\u0e23\u0e37\u0e2d \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e08\u0e32\u0e01 Container \u0e01\u0e47\u0e44\u0e14\u0e49 docker container inspect --format '{{ index .HostConfig.Binds 0 }}' mypostgres Example 1 - Persisting Data Create a Database Container docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e01\u0e32\u0e23 Init Database \u0e14\u0e49\u0e27\u0e22 docker container logs mypostgres Create a Database 'airflow` docker container exec -it mypostgres psql -U postgres \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e43\u0e2a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 CREATE DATABASE airflow ; \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Database \u0e21\u0e32\u0e40\u0e1b\u0e47\u0e19 airflow : \\c airflow ; \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e15\u0e32\u0e23\u0e32\u0e07 CREATE TABLE test ( id SERIAL NOT NULL PRIMARY KEY , customer_name VARCHAR ); \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e2a\u0e48\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 INSERT INTO test ( customer_name ) VALUES ( 'Jonathan Montgomery' ); \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 SELECT * FROM test ; Removing PostgreSQL \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e17\u0e33\u0e25\u0e32\u0e22 Container \u0e41\u0e25\u0e49\u0e27 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e22\u0e31\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e2b\u0e21 docker container rm -f mypostgres Recreating PostgreSQL \u0e2a\u0e23\u0e49\u0e32\u0e07 Container \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Volume \u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e14\u0e34\u0e21 \u0e41\u0e25\u0e30 \u0e17\u0e14\u0e2a\u0e2d\u0e1a Query \u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e14\u0e34\u0e21\u0e22\u0e31\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e2b\u0e21 docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e08\u0e30\u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23 Init Database \u0e41\u0e25\u0e49\u0e27 Container \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e48\u0e32\u0e19 Data \u0e08\u0e32\u0e01 Volume \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 docker container logs mypostgres Example 2 - Using Data \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 mypostgres \u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container ls Creating Management UI docker run \\ --name cloudbeaver \\ --rm -it -p 8090 :8978 \\ dbeaver/cloudbeaver:latest --rm \u0e04\u0e37\u0e2d\u0e43\u0e2b\u0e49\u0e25\u0e1a Container \u0e2d\u0e2d\u0e01\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e33\u0e07\u0e32\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 Accessing Data \u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48 http://localhost:8090 \u0e01\u0e23\u0e2d\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Setup \u0e40\u0e0a\u0e48\u0e19 Admin Username & Password \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19 \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 PostgresDB Connection \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e32\u0e21\u0e23\u0e39\u0e1b \u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e23\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 IP \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32 Default Bridge Network \u0e02\u0e2d\u0e07 Docker \u0e44\u0e21\u0e48\u0e21\u0e35 DNS \u0e01\u0e14\u0e1b\u0e38\u0e48\u0e21 Test Connection \u0e41\u0e25\u0e30 Save \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e27\u0e48\u0e32\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e19\u0e35\u0e49\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48 Bind Mounts Bind Mounts \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 Map local files \u0e2b\u0e23\u0e37\u0e2d folders \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e19 Container \u0e21\u0e35\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35 \u0e1e\u0e31\u0e12\u0e19\u0e32\u0e0b\u0e2d\u0e1f\u0e15\u0e4c\u0e41\u0e27\u0e23\u0e4c \u0e42\u0e14\u0e22\u0e43\u0e2b\u0e49 Source Code \u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e41\u0e15\u0e48\u0e43\u0e2b\u0e49\u0e2a\u0e34\u0e17\u0e18\u0e34 Container \u0e2d\u0e48\u0e32\u0e19 \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e2d\u0e07 Container \u0e1c\u0e48\u0e32\u0e19 File Bind Mounts \u0e43\u0e0a\u0e49 Flag -v \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19 Example 3 - Nginx Bind Mounts \u0e17\u0e33\u0e01\u0e32\u0e23 Bind Mount Folder \u0e44\u0e1f\u0e25\u0e4c HTML \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 Container NGINX \u0e19\u0e33\u0e44\u0e1b\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25 Bind Mounting NGINX \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Folder nginx-bind \u0e41\u0e25\u0e30 cd nginx-bind \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container run \\ --name = mywebserver \\ -d -p 8080 :80 \\ -v $( pwd ) :/usr/share/nginx/html \\ nginx $(pwd) \u0e04\u0e37\u0e2d Print Working Directory Modifying HTML \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c HTML \u0e40\u0e0b\u0e1f \u0e41\u0e25\u0e30 \u0e17\u0e14\u0e2a\u0e2d\u0e1a Refresh \u0e17\u0e35\u0e48 Browser","title":"Volumes"},{"location":"docker/volumes/#volumes","text":"Volumes \u0e04\u0e37\u0e2d File System \u0e17\u0e35\u0e48 Docker \u0e43\u0e0a\u0e49\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Container \u0e40\u0e0a\u0e48\u0e19 \u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 Database","title":"Volumes"},{"location":"docker/volumes/#adding-volumes-to-database","text":"docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d -v \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 Volume \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a Database PostgreSQL postgresdb \u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d Docker Volume \u0e17\u0e35\u0e48\u0e15\u0e31\u0e49\u0e07\u0e40\u0e2d\u0e07\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 /var/lib/postgresql/data \u0e04\u0e37\u0e2d Path \u0e17\u0e35\u0e48 Database \u0e40\u0e02\u0e35\u0e22\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e25\u0e07\u0e44\u0e1b \u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 -v postgresdb:/var/lib/postgresql/data \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48 Database \u0e40\u0e02\u0e35\u0e22\u0e19\u0e25\u0e07 /var/lib/postgresql/data \u0e08\u0e30\u0e16\u0e39\u0e01\u0e40\u0e01\u0e47\u0e1a\u0e44\u0e27\u0e49\u0e1a\u0e19 Host \u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Volume \u0e17\u0e35\u0e48\u0e0a\u0e37\u0e48\u0e2d postgresdb \u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Volumes \u0e43\u0e0a\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 volume \u0e40\u0e0a\u0e48\u0e19 docker volume <sub-command> [ options ]","title":"Adding volumes to database"},{"location":"docker/volumes/#list-volumes","text":"docker volume ls","title":"List Volumes"},{"location":"docker/volumes/#inspect-volumes","text":"docker volume inspect postgresdb \u0e2b\u0e23\u0e37\u0e2d \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e08\u0e32\u0e01 Container \u0e01\u0e47\u0e44\u0e14\u0e49 docker container inspect --format '{{ index .HostConfig.Binds 0 }}' mypostgres","title":"Inspect Volumes"},{"location":"docker/volumes/#example-1-persisting-data","text":"","title":"Example 1 - Persisting Data"},{"location":"docker/volumes/#create-a-database-container","text":"docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e01\u0e32\u0e23 Init Database \u0e14\u0e49\u0e27\u0e22 docker container logs mypostgres","title":"Create a Database Container"},{"location":"docker/volumes/#create-a-database-airflow","text":"docker container exec -it mypostgres psql -U postgres \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e43\u0e2a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 CREATE DATABASE airflow ; \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Database \u0e21\u0e32\u0e40\u0e1b\u0e47\u0e19 airflow : \\c airflow ; \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e15\u0e32\u0e23\u0e32\u0e07 CREATE TABLE test ( id SERIAL NOT NULL PRIMARY KEY , customer_name VARCHAR ); \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e2a\u0e48\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 INSERT INTO test ( customer_name ) VALUES ( 'Jonathan Montgomery' ); \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 SELECT * FROM test ;","title":"Create a Database 'airflow`"},{"location":"docker/volumes/#removing-postgresql","text":"\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e17\u0e33\u0e25\u0e32\u0e22 Container \u0e41\u0e25\u0e49\u0e27 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e22\u0e31\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e2b\u0e21 docker container rm -f mypostgres","title":"Removing PostgreSQL"},{"location":"docker/volumes/#recreating-postgresql","text":"\u0e2a\u0e23\u0e49\u0e32\u0e07 Container \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Volume \u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e14\u0e34\u0e21 \u0e41\u0e25\u0e30 \u0e17\u0e14\u0e2a\u0e2d\u0e1a Query \u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e14\u0e34\u0e21\u0e22\u0e31\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e2b\u0e21 docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e08\u0e30\u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23 Init Database \u0e41\u0e25\u0e49\u0e27 Container \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e48\u0e32\u0e19 Data \u0e08\u0e32\u0e01 Volume \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 docker container logs mypostgres","title":"Recreating PostgreSQL"},{"location":"docker/volumes/#example-2-using-data","text":"\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 mypostgres \u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container ls","title":"Example 2 - Using Data"},{"location":"docker/volumes/#creating-management-ui","text":"docker run \\ --name cloudbeaver \\ --rm -it -p 8090 :8978 \\ dbeaver/cloudbeaver:latest --rm \u0e04\u0e37\u0e2d\u0e43\u0e2b\u0e49\u0e25\u0e1a Container \u0e2d\u0e2d\u0e01\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e33\u0e07\u0e32\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27","title":"Creating Management UI"},{"location":"docker/volumes/#accessing-data","text":"\u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48 http://localhost:8090 \u0e01\u0e23\u0e2d\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Setup \u0e40\u0e0a\u0e48\u0e19 Admin Username & Password \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19 \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 PostgresDB Connection \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e32\u0e21\u0e23\u0e39\u0e1b \u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e23\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 IP \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32 Default Bridge Network \u0e02\u0e2d\u0e07 Docker \u0e44\u0e21\u0e48\u0e21\u0e35 DNS \u0e01\u0e14\u0e1b\u0e38\u0e48\u0e21 Test Connection \u0e41\u0e25\u0e30 Save \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e27\u0e48\u0e32\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e19\u0e35\u0e49\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48","title":"Accessing Data"},{"location":"docker/volumes/#bind-mounts","text":"Bind Mounts \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 Map local files \u0e2b\u0e23\u0e37\u0e2d folders \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e19 Container \u0e21\u0e35\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35 \u0e1e\u0e31\u0e12\u0e19\u0e32\u0e0b\u0e2d\u0e1f\u0e15\u0e4c\u0e41\u0e27\u0e23\u0e4c \u0e42\u0e14\u0e22\u0e43\u0e2b\u0e49 Source Code \u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e41\u0e15\u0e48\u0e43\u0e2b\u0e49\u0e2a\u0e34\u0e17\u0e18\u0e34 Container \u0e2d\u0e48\u0e32\u0e19 \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e2d\u0e07 Container \u0e1c\u0e48\u0e32\u0e19 File Bind Mounts \u0e43\u0e0a\u0e49 Flag -v \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19","title":"Bind Mounts"},{"location":"docker/volumes/#example-3-nginx-bind-mounts","text":"\u0e17\u0e33\u0e01\u0e32\u0e23 Bind Mount Folder \u0e44\u0e1f\u0e25\u0e4c HTML \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 Container NGINX \u0e19\u0e33\u0e44\u0e1b\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25","title":"Example 3 - Nginx Bind Mounts"},{"location":"docker/volumes/#bind-mounting-nginx","text":"\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Folder nginx-bind \u0e41\u0e25\u0e30 cd nginx-bind \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container run \\ --name = mywebserver \\ -d -p 8080 :80 \\ -v $( pwd ) :/usr/share/nginx/html \\ nginx $(pwd) \u0e04\u0e37\u0e2d Print Working Directory","title":"Bind Mounting NGINX"},{"location":"docker/volumes/#modifying-html","text":"\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c HTML \u0e40\u0e0b\u0e1f \u0e41\u0e25\u0e30 \u0e17\u0e14\u0e2a\u0e2d\u0e1a Refresh \u0e17\u0e35\u0e48 Browser","title":"Modifying HTML"}]}