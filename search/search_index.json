{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data Engineering Team 1 - Documentation Internal Training Schedule Date Topic Status Source Code 3 Mar 2022 Production Apache Airflow Done Download 9 Mar 2022 Docker #1 - Basics Confirmed Download 7 Apr 2022 Docker #2 - Advanced Confirmed Download Databases in MEA Waiting Kubernetes #1 - Basics Waiting Kubernetes #2 - Application Deployment Waiting Kubernetes #3 - Administration Waiting Planned Projects","title":"Home"},{"location":"#data-engineering-team-1-documentation","text":"","title":"Data Engineering Team 1 - Documentation"},{"location":"#internal-training-schedule","text":"Date Topic Status Source Code 3 Mar 2022 Production Apache Airflow Done Download 9 Mar 2022 Docker #1 - Basics Confirmed Download 7 Apr 2022 Docker #2 - Advanced Confirmed Download Databases in MEA Waiting Kubernetes #1 - Basics Waiting Kubernetes #2 - Application Deployment Waiting Kubernetes #3 - Administration Waiting","title":"Internal Training Schedule"},{"location":"#planned-projects","text":"","title":"Planned Projects"},{"location":"apache-airflow/databases/","text":"Databases \u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Databases \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d \u0e40\u0e02\u0e35\u0e22\u0e19 Python Function \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a PythonOperator \u0e41\u0e19\u0e30\u0e19\u0e33 \u0e43\u0e0a\u0e49 sqlalchemy \u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49\u0e01\u0e31\u0e1a\u0e2b\u0e25\u0e32\u0e22 Database \u0e40\u0e0a\u0e48\u0e19 PostgreSQL, MySQL, Oracle, MSSQL PostgreSQL \u0e43\u0e0a\u0e49 psycopg2 MSSQL \u0e43\u0e0a\u0e49 pymssql MySQL \u0e43\u0e0a\u0e49 mysql-connector-python MongoDB \u0e43\u0e0a\u0e49 pymongo Neo4j \u0e43\u0e0a\u0e49 neo4j Redis \u0e43\u0e0a\u0e49 redis \u0e16\u0e49\u0e32 Database \u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19 ODBC \u0e43\u0e0a\u0e49 pyodbc \u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 TIBCO Data Virtualization \u0e43\u0e0a\u0e49 pyodbc \u0e43\u0e0a\u0e49 Airflow Operators PostgreSQL MongoDB MSSQL MySQL Redis Neo4j \u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Data Platform \u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 Data Platform Apache Airflow \u0e41\u0e15\u0e48\u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34 Operators \u0e02\u0e2d\u0e07 Airflow \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a\u0e23\u0e30\u0e1a\u0e1a\u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49 \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e15\u0e34\u0e14\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 Policies \u0e41\u0e25\u0e30 Security Kerberos \u0e42\u0e14\u0e22\u0e2a\u0e23\u0e38\u0e1b HDFS \u0e43\u0e0a\u0e49 WebHDFS Hook Hive/Impala \u0e43\u0e0a\u0e49 JDBCOperator Spark \u0e43\u0e0a\u0e49 LivyOperator Sqoop \u0e43\u0e0a\u0e49 SSHOperator HBase \u0e43\u0e0a\u0e49 PythonOperator \u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e1a HBase REST API \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1c\u0e48\u0e32\u0e19 Apache Phoenix \u0e14\u0e49\u0e27\u0e22 phoenixdb","title":"Databases"},{"location":"apache-airflow/databases/#databases","text":"","title":"Databases"},{"location":"apache-airflow/databases/#databases_1","text":"\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d \u0e40\u0e02\u0e35\u0e22\u0e19 Python Function \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a PythonOperator \u0e41\u0e19\u0e30\u0e19\u0e33 \u0e43\u0e0a\u0e49 sqlalchemy \u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49\u0e01\u0e31\u0e1a\u0e2b\u0e25\u0e32\u0e22 Database \u0e40\u0e0a\u0e48\u0e19 PostgreSQL, MySQL, Oracle, MSSQL PostgreSQL \u0e43\u0e0a\u0e49 psycopg2 MSSQL \u0e43\u0e0a\u0e49 pymssql MySQL \u0e43\u0e0a\u0e49 mysql-connector-python MongoDB \u0e43\u0e0a\u0e49 pymongo Neo4j \u0e43\u0e0a\u0e49 neo4j Redis \u0e43\u0e0a\u0e49 redis \u0e16\u0e49\u0e32 Database \u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19 ODBC \u0e43\u0e0a\u0e49 pyodbc \u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 TIBCO Data Virtualization \u0e43\u0e0a\u0e49 pyodbc \u0e43\u0e0a\u0e49 Airflow Operators PostgreSQL MongoDB MSSQL MySQL Redis Neo4j","title":"\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Databases"},{"location":"apache-airflow/databases/#data-platform","text":"\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 Data Platform Apache Airflow \u0e41\u0e15\u0e48\u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34 Operators \u0e02\u0e2d\u0e07 Airflow \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a\u0e23\u0e30\u0e1a\u0e1a\u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49 \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e15\u0e34\u0e14\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 Policies \u0e41\u0e25\u0e30 Security Kerberos \u0e42\u0e14\u0e22\u0e2a\u0e23\u0e38\u0e1b HDFS \u0e43\u0e0a\u0e49 WebHDFS Hook Hive/Impala \u0e43\u0e0a\u0e49 JDBCOperator Spark \u0e43\u0e0a\u0e49 LivyOperator Sqoop \u0e43\u0e0a\u0e49 SSHOperator HBase \u0e43\u0e0a\u0e49 PythonOperator \u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e1a HBase REST API \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1c\u0e48\u0e32\u0e19 Apache Phoenix \u0e14\u0e49\u0e27\u0e22 phoenixdb","title":"\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Data Platform"},{"location":"apache-airflow/use/","text":"Basics Prerequisites \u0e17\u0e31\u0e01\u0e29\u0e30\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e04\u0e27\u0e23\u0e21\u0e35 Python 3.6+ Basic Apache Airflow Basic databases Linux Airflow Architecture \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Airflow \u0e2d\u0e48\u0e32\u0e19 DAGs \u0e08\u0e32\u0e01 Bucket \u0e0a\u0e37\u0e48\u0e2d dags \u0e43\u0e19 MinIO \u0e21\u0e35\u0e01\u0e32\u0e23\u0e0b\u0e34\u0e07\u0e04\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e38\u0e01\u0e46 1 \u0e19\u0e32\u0e17\u0e35 Airflow \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Data Platform Services \u0e2b\u0e25\u0e31\u0e07\u0e1a\u0e49\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 Hive, Impala, HBase, Spark Airflow \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 MEA \u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19 \u0e40\u0e0a\u0e48\u0e19 SAP SFTP, AMR Oracle Database, OT MSSQL Database, etc. Airflow \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker \u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1a\u0e1a Celery Executor \u0e21\u0e35 15 Workers Airflow Server \u0e21\u0e35 92 vCPUs \u0e41\u0e25\u0e30 312 GB RAM \u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e07\u0e32\u0e19\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 \u0e40\u0e02\u0e35\u0e22\u0e19 DAGs \u0e14\u0e49\u0e27\u0e22\u0e20\u0e32\u0e29\u0e32 Python Log in \u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 MinIO Server \u0e41\u0e25\u0e30\u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c .py \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Bucket \u0e0a\u0e37\u0e48\u0e2d dags . \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14 Airflow \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e0b\u0e34\u0e07\u0e04\u0e4c DAGs \u0e20\u0e32\u0e22\u0e43\u0e19 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e16\u0e49\u0e32\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 UI \u0e08\u0e30\u0e41\u0e08\u0e49\u0e07 \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 DAGs \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Airflow Web UI . Example 1 - Simple DAG Create DAGs Copy code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e41\u0e25\u0e30\u0e40\u0e0b\u0e1f\u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d dpd_training_<name>.py dpd_training_chatree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import airflow from airflow import DAG from airflow.operators.dummy import DummyOperator # Initialize the DAG with DAG ( dag_id = \"dpd_training_chatree\" , description = \"DAG for learning Apache Airflow\" , start_date = airflow . utils . dates . days_ago ( 1 ), schedule_interval = \"@daily\" ) as dag : task1 = DummyOperator ( task_id = \"task1\" ) task2 = DummyOperator ( task_id = \"task2\" ) task3 = DummyOperator ( task_id = \"task3\" ) task4 = DummyOperator ( task_id = \"task4\" ) task1 >> task2 >> task3 >> task4 \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Line 8 : DAG ID \u0e15\u0e49\u0e2d\u0e07 \u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19 (Globally unique) Line 10 : start_date \u0e04\u0e37\u0e2d\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49 DAG \u0e40\u0e23\u0e34\u0e48\u0e21\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e43\u0e0a\u0e49 datetime \u0e2b\u0e23\u0e37\u0e2d airflow.utils.dates \u0e01\u0e47\u0e44\u0e14\u0e49 Line 11 : schedule_interval \u0e04\u0e37\u0e2d\u0e23\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 DAG \u0e40\u0e0a\u0e48\u0e19 @daily \u0e04\u0e37\u0e2d \u0e43\u0e2b\u0e49\u0e23\u0e31\u0e19\u0e23\u0e32\u0e22\u0e27\u0e31\u0e19, @monthly \u0e04\u0e37\u0e2d\u0e23\u0e31\u0e19\u0e23\u0e32\u0e22\u0e40\u0e14\u0e37\u0e2d\u0e19 Objective \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48\u0e23\u0e31\u0e19\u0e44\u0e14\u0e49 \u0e41\u0e15\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e43\u0e14\u0e46 Deploy DAGs \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e02\u0e2d\u0e07 MinIO \u0e17\u0e35\u0e48 http://172.17.113.251:9000 \u0e41\u0e25\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48 Bucket dags \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e25\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c dpd_training_<name>.py \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19 dags Manage DAGs \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c Airflow UI \u0e17\u0e35\u0e48 http://airflow.mea.or.th \u0e23\u0e2d\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e41\u0e25\u0e49\u0e27\u0e25\u0e2d\u0e07\u0e04\u0e49\u0e19\u0e2b\u0e32 DAG \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d dpd_training \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 DAG \u0e17\u0e35\u0e48\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 \u0e40\u0e1b\u0e34\u0e14\u0e1b\u0e34\u0e14 DAG \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 Results \u0e01\u0e14 Switch \u0e02\u0e49\u0e32\u0e07\u0e0b\u0e49\u0e32\u0e22\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 DAG \u0e41\u0e25\u0e30 \u0e14\u0e39\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c Example 2 - Read from MinIO \u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e19\u0e33\u0e44\u0e1f\u0e25\u0e4c\u0e1e\u0e27\u0e01 CSV, JSON \u0e2b\u0e23\u0e37\u0e2d \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e43\u0e19 Airflow \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e04\u0e37\u0e2d \u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c\u0e43\u0e19 Bucket \u0e0a\u0e37\u0e48\u0e2d airflow (\u0e40\u0e09\u0e1e\u0e32\u0e30 Data Engineer) \u0e2b\u0e23\u0e37\u0e2d public (\u0e40\u0e2b\u0e47\u0e19\u0e44\u0e14\u0e49\u0e17\u0e38\u0e01\u0e04\u0e19) \u0e40\u0e02\u0e35\u0e22\u0e19 DAG \u0e43\u0e2b\u0e49\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c\u0e08\u0e32\u0e01 MinIO Deploy DAG \u0e1a\u0e19 MinIO Bucket dags \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 DAG \u0e1a\u0e19 Airflow UI Objective \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 MinIO \u0e41\u0e25\u0e30\u0e2a\u0e48\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19 \u0e01\u0e1f\u0e19. Upload files \u0e40\u0e2d\u0e32\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e42\u0e22\u0e19\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 airflow Bucket Create DAG Copy code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e43\u0e2a\u0e48\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d dpd_training_minio_<name>.py \u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e28\u0e36\u0e01\u0e29\u0e32\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e14\u0e39\u0e17\u0e35\u0e48 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e14\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e2d\u0e48\u0e32\u0e19\u0e44\u0e1f\u0e25\u0e4c CSV \u0e08\u0e32\u0e01 MinIO MinIO Python SDK dpd_training_minio_chatree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import airflow import urllib3 from minio import Minio from airflow import DAG from airflow.models import Variable from airflow.operators.email import EmailOperator from airflow.operators.python import PythonOperator # Initialize the DAG with DAG ( dag_id = \"dpd_training_minio_chatree\" , description = \"Download file from MinIO to Airflow Cluster\" , start_date = airflow . utils . dates . days_ago ( 1 ), schedule_interval = \"@daily\" ) as dag : # define python function to be used with PythonOperator def _read_file_from_minio ( obj , bucket , out ): client = Minio ( Variable . get ( 'MINIO_HOST' ), access_key = Variable . get ( 'MINIO_SECRET_ACCESS_KEY' ), secret_key = Variable . get ( 'MINIO_SECRET_KEY' ), secure = False , http_client = urllib3 . ProxyManager ( 'http://meaproxy.mea.or.th:80' ) ) client . fget_object ( bucket_name = bucket , object_name = obj , file_path = out ) download_file = PythonOperator ( task_id = \"download_file\" , python_callable = _read_file_from_minio , op_kwargs = { \"obj\" : 'DPD/crash_catalonia.csv' , \"bucket\" : 'airflow' , \"out\" : '/shared/crash_catalonia.csv' } ) send_file = EmailOperator ( task_id = \"send_file\" , to = [ \"chatree.sr@mea.or.th\" ], subject = \"[{{ ds }}] File downloaded from MinIO\" , html_content = \"\"\" <p>Please find attached</p> \"\"\" , files = [ \"/shared/crash_catalonia.csv\" ] ) download_file >> send_file \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Line 5 : \u0e1b\u0e23\u0e30\u0e01\u0e32\u0e28\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e1c\u0e22\u0e04\u0e48\u0e32 \u0e40\u0e0a\u0e48\u0e19 Password, Key \u0e1c\u0e48\u0e32\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 Airflow UI > Admin > Variables Line 6-7 : Operator \u0e04\u0e37\u0e2d Code \u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e19\u0e40\u0e02\u0e35\u0e22\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e49 \u0e43\u0e0a\u0e49\u0e41\u0e01\u0e49\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e08\u0e38\u0e14 \u0e40\u0e0a\u0e48\u0e19 EmailOperator \u0e43\u0e0a\u0e49\u0e2a\u0e48\u0e07 Email, PythonOperator \u0e43\u0e0a\u0e49\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 Python Line 19-25 : \u0e40\u0e02\u0e35\u0e22\u0e19 Function \u0e43\u0e0a\u0e49\u0e2d\u0e49\u0e32\u0e07\u0e16\u0e36\u0e07\u0e15\u0e2d\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 PythonOperator \u0e15\u0e31\u0e27 MinIO \u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 http_client=urllib3.ProxyManager \u0e14\u0e49\u0e27\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Network \u0e01\u0e1f\u0e19. \u0e15\u0e49\u0e2d\u0e07\u0e1c\u0e48\u0e32\u0e19 Proxy Line 38 : Pass arguments \u0e44\u0e1b\u0e17\u0e35\u0e48 python_callable \u0e14\u0e49\u0e27\u0e22 op_kwargs={} Line 41 : Airflow \u0e21\u0e35 Workers 15 \u0e15\u0e31\u0e27 \u0e41\u0e15\u0e48\u0e25\u0e30\u0e15\u0e31\u0e27\u0e21\u0e35 File System \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 Path /shared \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 Shared Path \u0e40\u0e14\u0e35\u0e22\u0e27\u0e17\u0e35\u0e48 Worker \u0e17\u0e38\u0e01\u0e15\u0e31\u0e27\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e44\u0e14\u0e49 Line 45 : \u0e2a\u0e48\u0e07\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e41\u0e19\u0e1a\u0e44\u0e1f\u0e25\u0e4c\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 Config SMTP (\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2b\u0e25\u0e31\u0e07\u0e1a\u0e49\u0e32\u0e19\u0e44\u0e27\u0e49\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27) Line 47 : \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19 Email \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c Line 48 : {{ ds }} \u0e04\u0e37\u0e2d Jinja Template \u0e17\u0e35\u0e48 Airflow \u0e43\u0e0a\u0e49\u0e41\u0e17\u0e19\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e40\u0e0a\u0e48\u0e19 ds \u0e04\u0e37\u0e2d Dag Run Date \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2d\u0e37\u0e48\u0e19\u0e46\u0e14\u0e39\u0e17\u0e35\u0e48 Template Reference Deploy DAG \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e02\u0e2d\u0e07 MinIO \u0e17\u0e35\u0e48 http://172.17.113.251:9000 \u0e41\u0e25\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48 Bucket dags \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e25\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c dpd_training_minio_<name>.py \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19 dags Manage DAG \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c Airflow UI \u0e17\u0e35\u0e48 http://airflow.mea.or.th \u0e23\u0e2d\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e41\u0e25\u0e49\u0e27\u0e25\u0e2d\u0e07\u0e04\u0e49\u0e19\u0e2b\u0e32 DAG \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d dpd_training \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 DAG \u0e17\u0e35\u0e48\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 \u0e40\u0e1b\u0e34\u0e14\u0e1b\u0e34\u0e14 DAG \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 Results \u0e40\u0e0a\u0e47\u0e04\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 UI \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Task \u0e23\u0e31\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e0a\u0e47\u0e04\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e14\u0e39\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e08\u0e32\u0e01 Airflow Example 3 - Pandas & REST API \u0e15\u0e31\u0e07\u0e41\u0e15\u0e48\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19\u0e44\u0e1b\u0e08\u0e30\u0e44\u0e21\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Deploy \u0e41\u0e25\u0e30 Manage DAG Objective \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48 \u0e14\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 EGAT API \u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e14\u0e49\u0e27\u0e22 Pandas \u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e44\u0e1f\u0e25\u0e4c\u0e40\u0e1e\u0e37\u0e48\u0e2d Backup \u0e1a\u0e19 MinIO \u0e08\u0e31\u0e14\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 Hive \u0e2a\u0e48\u0e07\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e44\u0e1f\u0e25\u0e4c\u0e41\u0e19\u0e1a\u0e43\u0e2b\u0e49\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07 Create DAG dpd_training_egat_chatree.pyimport airflow import json import urllib3 import requests import numpy as np import pandas as pd from minio import Minio from airflow import DAG from airflow.models import Variable from airflow.operators.email import EmailOperator from airflow.operators.python import PythonOperator from airflow.providers.jdbc.operators.jdbc import JdbcOperator # Custom MEA hooks from mea.hooks.webhdfs import WebHDFSHook # Initialize the DAG with DAG ( dag_id = \"dpd_training_minio_egat_chatree\" , description = \"Store data from EGAT API to Data Platform \" , start_date = airflow . utils . dates . days_ago ( 1 ), template_searchpath = [ \"/shared\" ], schedule_interval = \"@daily\" ) as dag : ############################################################################### # Utility functions; Should be in a separate file. # ############################################################################### def _get_token (): headers = { 'Content-Type' : 'application/json' } data = { \"username\" : Variable . get ( 'DPD_EGAT_API_ACCESS_KEY' ), \"password\" : Variable . get ( 'DPD_EGAT_API_SECRET_KEY' ) } try : res = requests . post ( Variable . get ( 'DPD_EGAT_API_AUTH_URL' ), headers = headers , json = data ) res . raise_for_status () except requests . exceptions . HTTPError as e : raise SystemExit ( e ) return res . json () . get ( 'access_token' ) def _get_data ( api_url , feeder_name , year , month , outfile ): token = _get_token () headers = { \"Content-Type\" : \"application/json\" , \"Authorization\" : f \"Bearer { token } \" } data = { \"linefeederName\" : feeder_name , \"year\" : year , \"month\" : month } try : res = requests . post ( Variable . get ( api_url ), headers = headers , json = data ) except requests . exceptions . HTTPError as e : raise SystemExit ( e ) with open ( outfile , 'w' ) as f : json . dump ( res . json (), f ) def _get_billing ( feeder_name , year , month , outfile ): _get_data ( 'DPD_EGAT_API_BILLING_URL' , feeder_name , year , month , outfile ) def _get_lp ( feeder_name , year , month , outfile ): _get_data ( 'DPD_EGAT_API_LP_URL' , feeder_name , year , month , outfile ) def _convert_json_to_csv ( infile , outfile ): with open ( infile , 'r' ) as f : records = json . load ( f ) # Convert JSON to DataFrame and save to CSV pd . DataFrame . from_records ( records ) . to_csv ( outfile , index = False ) def _generate_hive_sql ( infile , outfile , db_name , table_name , hdfs_path ): df = pd . read_csv ( infile ) with open ( outfile , 'w' ) as f : f . write ( f 'CREATE EXTERNAL TABLE IF NOT EXISTS { db_name } . { table_name } ( \\n ' ) for col in df . columns : if df [ col ] . dtype == object : f . write ( f ' \\t { col } STRING' ) if df [ col ] . dtype == np . int64 : f . write ( f ' \\t { col } DOUBLE' ) if df [ col ] . dtype == np . float64 : f . write ( f ' \\t { col } DOUBLE' ) if col != df . columns [ - 1 ]: f . write ( ', \\n ' ) f . write ( ') \\n ' ) f . write ( 'ROW FORMAT DELIMITED \\n ' ) f . write ( \"FIELDS TERMINATED BY ',' \\n \" ) f . write ( 'STORED AS TEXTFILE \\n ' ) f . write ( f \"LOCATION ' { hdfs_path } ' \\n \" ) f . write ( \"TBLPROPERTIES ('skip.header.line.count'='1');\" ) def _upload_file_to_hdfs ( infile , hdfs_path ): hdfs = WebHDFSHook ( webhdfs_conn_id = 'sys-hdfs' ) hdfs . load_file ( source = infile , destination = hdfs_path , overwrite = True ) def _upload_file_to_minio ( obj , bucket , file_path ): client = Minio ( Variable . get ( 'MINIO_HOST' ), access_key = Variable . get ( 'MINIO_SECRET_ACCESS_KEY' ), secret_key = Variable . get ( 'MINIO_SECRET_KEY' ), secure = False , http_client = urllib3 . ProxyManager ( 'http://meaproxy.mea.or.th:80' ) ) client . fput_object ( bucket_name = bucket , object_name = obj , file_path = file_path ) ############################################################################### # Tasks # ############################################################################### get_egat_lp = PythonOperator ( task_id = \"get_egat_lp\" , python_callable = _get_lp , op_kwargs = { \"feeder_name\" : \"BK/69 MEA#1 M\" , \"year\" : 2021 , \"month\" : 12 , \"outfile\" : \"/shared/bk69_mea1_m.json\" } ) convert_json_to_csv = PythonOperator ( task_id = \"convert_json_to_csv\" , python_callable = _convert_json_to_csv , op_kwargs = { \"infile\" : \"/shared/bk69_mea1_m.json\" , \"outfile\" : \"/shared/bk69_mea1_m.csv\" } ) upload_file_to_hdfs = PythonOperator ( task_id = \"upload_file_to_hdfs\" , python_callable = _upload_file_to_hdfs , op_kwargs = { \"infile\" : '/shared/bk69_mea1_m.csv' , \"hdfs_path\" : '/user/airflow/dpd-training/egat/bk69_mea1_m.csv' } ) upload_backup_to_minio = PythonOperator ( task_id = \"upload_backup_to_minio\" , python_callable = _upload_file_to_minio , op_kwargs = { 'bucket' : 'airflow' , 'obj' : 'DPD/bk69_mea1_m.csv' , 'file_path' : '/shared/bk69_mea1_m.csv' } ) generate_hive_sql = PythonOperator ( task_id = \"generate_hive_sql\" , python_callable = _generate_hive_sql , op_kwargs = { \"infile\" : '/shared/bk69_mea1_m.csv' , \"outfile\" : '/shared/bk69_mea1_m.sql' , \"db_name\" : 'airflow' , \"table_name\" : 'dpd_training_egat_chatree' , \"hdfs_path\" : '/user/airflow/dpd-training/egat/' } ) create_external_table = JdbcOperator ( task_id = \"create_external_table\" , jdbc_conn_id = 'sys-jdbc-hive' , sql = \"bk69_mea1_m.sql\" ) send_email = EmailOperator ( task_id = \"send_email\" , to = [ \"chatree.sr@mea.or.th\" ], subject = \"[{{ ds }}] EGAT file saved!\" , html_content = \"\"\" <h1 style=\"color: blue;\">Please find attached</h1> <p>Please find attached EGAT data as of {{ ds }}</p> \"\"\" , files = [ \"/shared/bk69_mea1_m.csv\" ] ) get_egat_lp >> convert_json_to_csv >> upload_file_to_hdfs >> generate_hive_sql >> create_external_table >> send_email convert_json_to_csv >> upload_backup_to_minio >> send_email \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e2d\u0e30\u0e44\u0e23\u0e17\u0e35\u0e48\u0e17\u0e33\u0e1a\u0e19 Python \u0e44\u0e14\u0e49 \u0e17\u0e33\u0e1a\u0e19 Airflow \u0e44\u0e14\u0e49\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e08\u0e30\u0e21\u0e35 Operator \u0e40\u0e09\u0e1e\u0e32\u0e30\u0e01\u0e34\u0e08\u0e44\u0e27\u0e49\u0e43\u0e2b\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Airflow Operators & Hooks \u0e1d\u0e27\u0e17. \u0e1e\u0e31\u0e12\u0e19\u0e32 Custom Hooks & Operators \u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Data Platform \u0e44\u0e14\u0e49 \u0e40\u0e0a\u0e48\u0e19 mea.hooks.webhdfs Results","title":"Basics"},{"location":"apache-airflow/use/#basics","text":"","title":"Basics"},{"location":"apache-airflow/use/#prerequisites","text":"\u0e17\u0e31\u0e01\u0e29\u0e30\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e04\u0e27\u0e23\u0e21\u0e35 Python 3.6+ Basic Apache Airflow Basic databases Linux","title":"Prerequisites"},{"location":"apache-airflow/use/#airflow-architecture","text":"","title":"Airflow Architecture"},{"location":"apache-airflow/use/#_1","text":"Airflow \u0e2d\u0e48\u0e32\u0e19 DAGs \u0e08\u0e32\u0e01 Bucket \u0e0a\u0e37\u0e48\u0e2d dags \u0e43\u0e19 MinIO \u0e21\u0e35\u0e01\u0e32\u0e23\u0e0b\u0e34\u0e07\u0e04\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e38\u0e01\u0e46 1 \u0e19\u0e32\u0e17\u0e35 Airflow \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Data Platform Services \u0e2b\u0e25\u0e31\u0e07\u0e1a\u0e49\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 Hive, Impala, HBase, Spark Airflow \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 MEA \u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19 \u0e40\u0e0a\u0e48\u0e19 SAP SFTP, AMR Oracle Database, OT MSSQL Database, etc. Airflow \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker \u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e41\u0e1a\u0e1a Celery Executor \u0e21\u0e35 15 Workers Airflow Server \u0e21\u0e35 92 vCPUs \u0e41\u0e25\u0e30 312 GB RAM","title":"\u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d"},{"location":"apache-airflow/use/#_2","text":"\u0e40\u0e02\u0e35\u0e22\u0e19 DAGs \u0e14\u0e49\u0e27\u0e22\u0e20\u0e32\u0e29\u0e32 Python Log in \u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 MinIO Server \u0e41\u0e25\u0e30\u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c .py \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Bucket \u0e0a\u0e37\u0e48\u0e2d dags . \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14 Airflow \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e0b\u0e34\u0e07\u0e04\u0e4c DAGs \u0e20\u0e32\u0e22\u0e43\u0e19 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e16\u0e49\u0e32\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 UI \u0e08\u0e30\u0e41\u0e08\u0e49\u0e07 \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 DAGs \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Airflow Web UI .","title":"\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e07\u0e32\u0e19\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19"},{"location":"apache-airflow/use/#example-1-simple-dag","text":"","title":"Example 1 - Simple DAG"},{"location":"apache-airflow/use/#create-dags","text":"Copy code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e41\u0e25\u0e30\u0e40\u0e0b\u0e1f\u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d dpd_training_<name>.py dpd_training_chatree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import airflow from airflow import DAG from airflow.operators.dummy import DummyOperator # Initialize the DAG with DAG ( dag_id = \"dpd_training_chatree\" , description = \"DAG for learning Apache Airflow\" , start_date = airflow . utils . dates . days_ago ( 1 ), schedule_interval = \"@daily\" ) as dag : task1 = DummyOperator ( task_id = \"task1\" ) task2 = DummyOperator ( task_id = \"task2\" ) task3 = DummyOperator ( task_id = \"task3\" ) task4 = DummyOperator ( task_id = \"task4\" ) task1 >> task2 >> task3 >> task4 \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Line 8 : DAG ID \u0e15\u0e49\u0e2d\u0e07 \u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19 (Globally unique) Line 10 : start_date \u0e04\u0e37\u0e2d\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49 DAG \u0e40\u0e23\u0e34\u0e48\u0e21\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e43\u0e0a\u0e49 datetime \u0e2b\u0e23\u0e37\u0e2d airflow.utils.dates \u0e01\u0e47\u0e44\u0e14\u0e49 Line 11 : schedule_interval \u0e04\u0e37\u0e2d\u0e23\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 DAG \u0e40\u0e0a\u0e48\u0e19 @daily \u0e04\u0e37\u0e2d \u0e43\u0e2b\u0e49\u0e23\u0e31\u0e19\u0e23\u0e32\u0e22\u0e27\u0e31\u0e19, @monthly \u0e04\u0e37\u0e2d\u0e23\u0e31\u0e19\u0e23\u0e32\u0e22\u0e40\u0e14\u0e37\u0e2d\u0e19","title":"Create DAGs"},{"location":"apache-airflow/use/#objective","text":"\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48\u0e23\u0e31\u0e19\u0e44\u0e14\u0e49 \u0e41\u0e15\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e43\u0e14\u0e46","title":"Objective"},{"location":"apache-airflow/use/#deploy-dags","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e02\u0e2d\u0e07 MinIO \u0e17\u0e35\u0e48 http://172.17.113.251:9000 \u0e41\u0e25\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48 Bucket dags \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e25\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c dpd_training_<name>.py \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19 dags","title":"Deploy DAGs"},{"location":"apache-airflow/use/#manage-dags","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c Airflow UI \u0e17\u0e35\u0e48 http://airflow.mea.or.th \u0e23\u0e2d\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e41\u0e25\u0e49\u0e27\u0e25\u0e2d\u0e07\u0e04\u0e49\u0e19\u0e2b\u0e32 DAG \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d dpd_training \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 DAG \u0e17\u0e35\u0e48\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 \u0e40\u0e1b\u0e34\u0e14\u0e1b\u0e34\u0e14 DAG \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22","title":"Manage DAGs"},{"location":"apache-airflow/use/#results","text":"\u0e01\u0e14 Switch \u0e02\u0e49\u0e32\u0e07\u0e0b\u0e49\u0e32\u0e22\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 DAG \u0e41\u0e25\u0e30 \u0e14\u0e39\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c","title":"Results"},{"location":"apache-airflow/use/#example-2-read-from-minio","text":"\u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e19\u0e33\u0e44\u0e1f\u0e25\u0e4c\u0e1e\u0e27\u0e01 CSV, JSON \u0e2b\u0e23\u0e37\u0e2d \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e43\u0e19 Airflow \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e04\u0e37\u0e2d \u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c\u0e43\u0e19 Bucket \u0e0a\u0e37\u0e48\u0e2d airflow (\u0e40\u0e09\u0e1e\u0e32\u0e30 Data Engineer) \u0e2b\u0e23\u0e37\u0e2d public (\u0e40\u0e2b\u0e47\u0e19\u0e44\u0e14\u0e49\u0e17\u0e38\u0e01\u0e04\u0e19) \u0e40\u0e02\u0e35\u0e22\u0e19 DAG \u0e43\u0e2b\u0e49\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e44\u0e1f\u0e25\u0e4c\u0e08\u0e32\u0e01 MinIO Deploy DAG \u0e1a\u0e19 MinIO Bucket dags \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 DAG \u0e1a\u0e19 Airflow UI","title":"Example 2 - Read from MinIO"},{"location":"apache-airflow/use/#objective_1","text":"\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 MinIO \u0e41\u0e25\u0e30\u0e2a\u0e48\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19 \u0e01\u0e1f\u0e19.","title":"Objective"},{"location":"apache-airflow/use/#upload-files","text":"\u0e40\u0e2d\u0e32\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e42\u0e22\u0e19\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 airflow Bucket","title":"Upload files"},{"location":"apache-airflow/use/#create-dag","text":"Copy code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e43\u0e2a\u0e48\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d dpd_training_minio_<name>.py \u0e16\u0e49\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e28\u0e36\u0e01\u0e29\u0e32\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e14\u0e39\u0e17\u0e35\u0e48 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e14\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e2d\u0e48\u0e32\u0e19\u0e44\u0e1f\u0e25\u0e4c CSV \u0e08\u0e32\u0e01 MinIO MinIO Python SDK dpd_training_minio_chatree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import airflow import urllib3 from minio import Minio from airflow import DAG from airflow.models import Variable from airflow.operators.email import EmailOperator from airflow.operators.python import PythonOperator # Initialize the DAG with DAG ( dag_id = \"dpd_training_minio_chatree\" , description = \"Download file from MinIO to Airflow Cluster\" , start_date = airflow . utils . dates . days_ago ( 1 ), schedule_interval = \"@daily\" ) as dag : # define python function to be used with PythonOperator def _read_file_from_minio ( obj , bucket , out ): client = Minio ( Variable . get ( 'MINIO_HOST' ), access_key = Variable . get ( 'MINIO_SECRET_ACCESS_KEY' ), secret_key = Variable . get ( 'MINIO_SECRET_KEY' ), secure = False , http_client = urllib3 . ProxyManager ( 'http://meaproxy.mea.or.th:80' ) ) client . fget_object ( bucket_name = bucket , object_name = obj , file_path = out ) download_file = PythonOperator ( task_id = \"download_file\" , python_callable = _read_file_from_minio , op_kwargs = { \"obj\" : 'DPD/crash_catalonia.csv' , \"bucket\" : 'airflow' , \"out\" : '/shared/crash_catalonia.csv' } ) send_file = EmailOperator ( task_id = \"send_file\" , to = [ \"chatree.sr@mea.or.th\" ], subject = \"[{{ ds }}] File downloaded from MinIO\" , html_content = \"\"\" <p>Please find attached</p> \"\"\" , files = [ \"/shared/crash_catalonia.csv\" ] ) download_file >> send_file \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d Line 5 : \u0e1b\u0e23\u0e30\u0e01\u0e32\u0e28\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e1c\u0e22\u0e04\u0e48\u0e32 \u0e40\u0e0a\u0e48\u0e19 Password, Key \u0e1c\u0e48\u0e32\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 Airflow UI > Admin > Variables Line 6-7 : Operator \u0e04\u0e37\u0e2d Code \u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e19\u0e40\u0e02\u0e35\u0e22\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e49 \u0e43\u0e0a\u0e49\u0e41\u0e01\u0e49\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e08\u0e38\u0e14 \u0e40\u0e0a\u0e48\u0e19 EmailOperator \u0e43\u0e0a\u0e49\u0e2a\u0e48\u0e07 Email, PythonOperator \u0e43\u0e0a\u0e49\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 Python Line 19-25 : \u0e40\u0e02\u0e35\u0e22\u0e19 Function \u0e43\u0e0a\u0e49\u0e2d\u0e49\u0e32\u0e07\u0e16\u0e36\u0e07\u0e15\u0e2d\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 PythonOperator \u0e15\u0e31\u0e27 MinIO \u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 http_client=urllib3.ProxyManager \u0e14\u0e49\u0e27\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Network \u0e01\u0e1f\u0e19. \u0e15\u0e49\u0e2d\u0e07\u0e1c\u0e48\u0e32\u0e19 Proxy Line 38 : Pass arguments \u0e44\u0e1b\u0e17\u0e35\u0e48 python_callable \u0e14\u0e49\u0e27\u0e22 op_kwargs={} Line 41 : Airflow \u0e21\u0e35 Workers 15 \u0e15\u0e31\u0e27 \u0e41\u0e15\u0e48\u0e25\u0e30\u0e15\u0e31\u0e27\u0e21\u0e35 File System \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49 Path /shared \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 Shared Path \u0e40\u0e14\u0e35\u0e22\u0e27\u0e17\u0e35\u0e48 Worker \u0e17\u0e38\u0e01\u0e15\u0e31\u0e27\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e44\u0e14\u0e49 Line 45 : \u0e2a\u0e48\u0e07\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e41\u0e19\u0e1a\u0e44\u0e1f\u0e25\u0e4c\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 Config SMTP (\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2b\u0e25\u0e31\u0e07\u0e1a\u0e49\u0e32\u0e19\u0e44\u0e27\u0e49\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27) Line 47 : \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19 Email \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c Line 48 : {{ ds }} \u0e04\u0e37\u0e2d Jinja Template \u0e17\u0e35\u0e48 Airflow \u0e43\u0e0a\u0e49\u0e41\u0e17\u0e19\u0e04\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e40\u0e0a\u0e48\u0e19 ds \u0e04\u0e37\u0e2d Dag Run Date \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2d\u0e37\u0e48\u0e19\u0e46\u0e14\u0e39\u0e17\u0e35\u0e48 Template Reference","title":"Create DAG"},{"location":"apache-airflow/use/#deploy-dag","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e02\u0e2d\u0e07 MinIO \u0e17\u0e35\u0e48 http://172.17.113.251:9000 \u0e41\u0e25\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48 Bucket dags \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e25\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c dpd_training_minio_<name>.py \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19 dags","title":"Deploy DAG"},{"location":"apache-airflow/use/#manage-dag","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c Airflow UI \u0e17\u0e35\u0e48 http://airflow.mea.or.th \u0e23\u0e2d\u0e1b\u0e23\u0e30\u0e21\u0e32\u0e13 2 - 3 \u0e19\u0e32\u0e17\u0e35 \u0e41\u0e25\u0e49\u0e27\u0e25\u0e2d\u0e07\u0e04\u0e49\u0e19\u0e2b\u0e32 DAG \u0e14\u0e49\u0e27\u0e22\u0e0a\u0e37\u0e48\u0e2d dpd_training \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 DAG \u0e17\u0e35\u0e48\u0e2d\u0e31\u0e1e\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 \u0e40\u0e1b\u0e34\u0e14\u0e1b\u0e34\u0e14 DAG \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22","title":"Manage DAG"},{"location":"apache-airflow/use/#results_1","text":"\u0e40\u0e0a\u0e47\u0e04\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 UI \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Task \u0e23\u0e31\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e0a\u0e47\u0e04\u0e2d\u0e35\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e14\u0e39\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e08\u0e32\u0e01 Airflow","title":"Results"},{"location":"apache-airflow/use/#example-3-pandas-rest-api","text":"\u0e15\u0e31\u0e07\u0e41\u0e15\u0e48\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19\u0e44\u0e1b\u0e08\u0e30\u0e44\u0e21\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Deploy \u0e41\u0e25\u0e30 Manage DAG","title":"Example 3 - Pandas &amp; REST API"},{"location":"apache-airflow/use/#objective_2","text":"\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 DAG \u0e17\u0e35\u0e48 \u0e14\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 EGAT API \u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e14\u0e49\u0e27\u0e22 Pandas \u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e44\u0e1f\u0e25\u0e4c\u0e40\u0e1e\u0e37\u0e48\u0e2d Backup \u0e1a\u0e19 MinIO \u0e08\u0e31\u0e14\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 Hive \u0e2a\u0e48\u0e07\u0e40\u0e21\u0e25\u0e25\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e44\u0e1f\u0e25\u0e4c\u0e41\u0e19\u0e1a\u0e43\u0e2b\u0e49\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07","title":"Objective"},{"location":"apache-airflow/use/#create-dag_1","text":"dpd_training_egat_chatree.pyimport airflow import json import urllib3 import requests import numpy as np import pandas as pd from minio import Minio from airflow import DAG from airflow.models import Variable from airflow.operators.email import EmailOperator from airflow.operators.python import PythonOperator from airflow.providers.jdbc.operators.jdbc import JdbcOperator # Custom MEA hooks from mea.hooks.webhdfs import WebHDFSHook # Initialize the DAG with DAG ( dag_id = \"dpd_training_minio_egat_chatree\" , description = \"Store data from EGAT API to Data Platform \" , start_date = airflow . utils . dates . days_ago ( 1 ), template_searchpath = [ \"/shared\" ], schedule_interval = \"@daily\" ) as dag : ############################################################################### # Utility functions; Should be in a separate file. # ############################################################################### def _get_token (): headers = { 'Content-Type' : 'application/json' } data = { \"username\" : Variable . get ( 'DPD_EGAT_API_ACCESS_KEY' ), \"password\" : Variable . get ( 'DPD_EGAT_API_SECRET_KEY' ) } try : res = requests . post ( Variable . get ( 'DPD_EGAT_API_AUTH_URL' ), headers = headers , json = data ) res . raise_for_status () except requests . exceptions . HTTPError as e : raise SystemExit ( e ) return res . json () . get ( 'access_token' ) def _get_data ( api_url , feeder_name , year , month , outfile ): token = _get_token () headers = { \"Content-Type\" : \"application/json\" , \"Authorization\" : f \"Bearer { token } \" } data = { \"linefeederName\" : feeder_name , \"year\" : year , \"month\" : month } try : res = requests . post ( Variable . get ( api_url ), headers = headers , json = data ) except requests . exceptions . HTTPError as e : raise SystemExit ( e ) with open ( outfile , 'w' ) as f : json . dump ( res . json (), f ) def _get_billing ( feeder_name , year , month , outfile ): _get_data ( 'DPD_EGAT_API_BILLING_URL' , feeder_name , year , month , outfile ) def _get_lp ( feeder_name , year , month , outfile ): _get_data ( 'DPD_EGAT_API_LP_URL' , feeder_name , year , month , outfile ) def _convert_json_to_csv ( infile , outfile ): with open ( infile , 'r' ) as f : records = json . load ( f ) # Convert JSON to DataFrame and save to CSV pd . DataFrame . from_records ( records ) . to_csv ( outfile , index = False ) def _generate_hive_sql ( infile , outfile , db_name , table_name , hdfs_path ): df = pd . read_csv ( infile ) with open ( outfile , 'w' ) as f : f . write ( f 'CREATE EXTERNAL TABLE IF NOT EXISTS { db_name } . { table_name } ( \\n ' ) for col in df . columns : if df [ col ] . dtype == object : f . write ( f ' \\t { col } STRING' ) if df [ col ] . dtype == np . int64 : f . write ( f ' \\t { col } DOUBLE' ) if df [ col ] . dtype == np . float64 : f . write ( f ' \\t { col } DOUBLE' ) if col != df . columns [ - 1 ]: f . write ( ', \\n ' ) f . write ( ') \\n ' ) f . write ( 'ROW FORMAT DELIMITED \\n ' ) f . write ( \"FIELDS TERMINATED BY ',' \\n \" ) f . write ( 'STORED AS TEXTFILE \\n ' ) f . write ( f \"LOCATION ' { hdfs_path } ' \\n \" ) f . write ( \"TBLPROPERTIES ('skip.header.line.count'='1');\" ) def _upload_file_to_hdfs ( infile , hdfs_path ): hdfs = WebHDFSHook ( webhdfs_conn_id = 'sys-hdfs' ) hdfs . load_file ( source = infile , destination = hdfs_path , overwrite = True ) def _upload_file_to_minio ( obj , bucket , file_path ): client = Minio ( Variable . get ( 'MINIO_HOST' ), access_key = Variable . get ( 'MINIO_SECRET_ACCESS_KEY' ), secret_key = Variable . get ( 'MINIO_SECRET_KEY' ), secure = False , http_client = urllib3 . ProxyManager ( 'http://meaproxy.mea.or.th:80' ) ) client . fput_object ( bucket_name = bucket , object_name = obj , file_path = file_path ) ############################################################################### # Tasks # ############################################################################### get_egat_lp = PythonOperator ( task_id = \"get_egat_lp\" , python_callable = _get_lp , op_kwargs = { \"feeder_name\" : \"BK/69 MEA#1 M\" , \"year\" : 2021 , \"month\" : 12 , \"outfile\" : \"/shared/bk69_mea1_m.json\" } ) convert_json_to_csv = PythonOperator ( task_id = \"convert_json_to_csv\" , python_callable = _convert_json_to_csv , op_kwargs = { \"infile\" : \"/shared/bk69_mea1_m.json\" , \"outfile\" : \"/shared/bk69_mea1_m.csv\" } ) upload_file_to_hdfs = PythonOperator ( task_id = \"upload_file_to_hdfs\" , python_callable = _upload_file_to_hdfs , op_kwargs = { \"infile\" : '/shared/bk69_mea1_m.csv' , \"hdfs_path\" : '/user/airflow/dpd-training/egat/bk69_mea1_m.csv' } ) upload_backup_to_minio = PythonOperator ( task_id = \"upload_backup_to_minio\" , python_callable = _upload_file_to_minio , op_kwargs = { 'bucket' : 'airflow' , 'obj' : 'DPD/bk69_mea1_m.csv' , 'file_path' : '/shared/bk69_mea1_m.csv' } ) generate_hive_sql = PythonOperator ( task_id = \"generate_hive_sql\" , python_callable = _generate_hive_sql , op_kwargs = { \"infile\" : '/shared/bk69_mea1_m.csv' , \"outfile\" : '/shared/bk69_mea1_m.sql' , \"db_name\" : 'airflow' , \"table_name\" : 'dpd_training_egat_chatree' , \"hdfs_path\" : '/user/airflow/dpd-training/egat/' } ) create_external_table = JdbcOperator ( task_id = \"create_external_table\" , jdbc_conn_id = 'sys-jdbc-hive' , sql = \"bk69_mea1_m.sql\" ) send_email = EmailOperator ( task_id = \"send_email\" , to = [ \"chatree.sr@mea.or.th\" ], subject = \"[{{ ds }}] EGAT file saved!\" , html_content = \"\"\" <h1 style=\"color: blue;\">Please find attached</h1> <p>Please find attached EGAT data as of {{ ds }}</p> \"\"\" , files = [ \"/shared/bk69_mea1_m.csv\" ] ) get_egat_lp >> convert_json_to_csv >> upload_file_to_hdfs >> generate_hive_sql >> create_external_table >> send_email convert_json_to_csv >> upload_backup_to_minio >> send_email \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e2d\u0e30\u0e44\u0e23\u0e17\u0e35\u0e48\u0e17\u0e33\u0e1a\u0e19 Python \u0e44\u0e14\u0e49 \u0e17\u0e33\u0e1a\u0e19 Airflow \u0e44\u0e14\u0e49\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e08\u0e30\u0e21\u0e35 Operator \u0e40\u0e09\u0e1e\u0e32\u0e30\u0e01\u0e34\u0e08\u0e44\u0e27\u0e49\u0e43\u0e2b\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Airflow Operators & Hooks \u0e1d\u0e27\u0e17. \u0e1e\u0e31\u0e12\u0e19\u0e32 Custom Hooks & Operators \u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Data Platform \u0e44\u0e14\u0e49 \u0e40\u0e0a\u0e48\u0e19 mea.hooks.webhdfs","title":"Create DAG"},{"location":"apache-airflow/use/#results_2","text":"","title":"Results"},{"location":"docker1/images/","text":"Images \u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Image \u0e0a\u0e32\u0e27\u0e1a\u0e49\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e15\u0e49\u0e19 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 Customize App \u0e15\u0e32\u0e21\u0e04\u0e27\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 Package App \u0e17\u0e35\u0e48\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e14\u0e49\u0e27\u0e22\u0e15\u0e19\u0e40\u0e2d\u0e07\u0e43\u0e2b\u0e49\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Dockerfile \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e43\u0e0a\u0e49\u0e40\u0e2d\u0e07 \u0e40\u0e02\u0e35\u0e22\u0e19 Dockerfile \u0e15\u0e32\u0e21\u0e04\u0e33\u0e41\u0e19\u0e30\u0e19\u0e33 Dockerfile Reference Build Image Push Image \u0e44\u0e1b\u0e17\u0e35\u0e48 Repository (Docker Hub) Run Image \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Example 1 - Dev Notebook \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Python Dev Environment \u0e17\u0e35\u0e48\u0e21\u0e35 Package \u0e22\u0e2d\u0e14\u0e19\u0e34\u0e22\u0e21\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1c\u0e48\u0e32\u0e19 Jupyter Notebook Python Dockerfile \u0e43\u0e2b\u0e49 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d Dockerfile (\u0e44\u0e21\u0e48\u0e21\u0e35 Extension) \u0e41\u0e25\u0e30 Copy \u0e0a\u0e38\u0e14\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 FROM ubuntu:20.04 RUN mkdir /home/workspace WORKDIR /home/workspace RUN apt-get update && apt-get install -y python3 python3-pip RUN pip3 install pandas matplotlib seaborn numpy notebook jupyterlab viola EXPOSE 8888 CMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip=0.0.0.0\", \"--allow-root\", \"--NotebookApp.token=''\", \"--NotebookApp.password=''\"] Build Jupyter Image \u0e2a\u0e23\u0e49\u0e32\u0e07 Local Image \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker build -t chatreesr/python-dev:test . -t \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 tag \u0e0a\u0e37\u0e48\u0e2d image chatreesr/python-dev:test \u0e04\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d Image \u0e1e\u0e23\u0e49\u0e2d\u0e21 Tag . \u0e04\u0e37\u0e2d \u0e43\u0e2b\u0e49\u0e2d\u0e48\u0e32\u0e19 Dockerfile \u0e08\u0e32\u0e01 Current Directory Run Jupyter Image docker container run \\ -d --name jupyter-dev \\ -p 8888 :8888 \\ -v $( pwd ) /src:/home/workspace \\ chatreesr/python-dev:test \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c http://localhost:8888 \u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e44\u0e14\u0e49\u0e15\u0e32\u0e21\u0e1b\u0e01\u0e15\u0e34 Source Code \u0e08\u0e30\u0e16\u0e39\u0e01 Sync \u0e17\u0e35\u0e48 $(pwd)/src Push Jupyter Image docker image push chatreesr/python-dev:test \u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23 Login \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker login \u0e01\u0e48\u0e2d\u0e19 Example 2 - Airflow \u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07 Custom Image \u0e40\u0e2d\u0e07 \u0e40\u0e0a\u0e48\u0e19 \u0e25\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e25\u0e07\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 Airflow \u0e08\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e25\u0e07 Plugins \u0e02\u0e2d\u0e07 Airflow \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Database \u0e15\u0e48\u0e32\u0e07\u0e46\u0e44\u0e14\u0e49 \u0e43\u0e19\u0e23\u0e30\u0e1a\u0e1a Production \u0e15\u0e31\u0e27 Airflow \u0e08\u0e30\u0e25\u0e07\u0e17\u0e38\u0e01 Connections \u0e41\u0e25\u0e30 \u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e48\u0e2d\u0e22\u0e46 \u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e08\u0e30\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e01\u0e27\u0e48\u0e32\u0e19\u0e35\u0e49\u0e19\u0e34\u0e14\u0e2b\u0e19\u0e48\u0e2d\u0e22 \u0e41\u0e15\u0e48\u0e41\u0e19\u0e27\u0e04\u0e34\u0e14\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 Create an Airflow Dockerfile FROM apache/airflow:2.2.4-python3.8 USER root # Install system packages & clean up RUN apt-get update \\ && apt-get install -y --no-install-recommends \\ build-essential \\ # MySQL dependency default-libmysqlclient-dev \\ # ODBC dependency unixodbc-dev \\ && apt-get autoremove -yqq --purge \\ && apt-get clean \\ && rm -rf /var/lib/apt/lists/* # Install Python packages RUN pip install --no-cache-dir \\ apache-airflow-providers-airbyte==2.1.1 \\ apache-airflow-providers-apache-cassandra==2.1.0 \\ apache-airflow-providers-elasticsearch==2.2.0 \\ apache-airflow-providers-docker==2.4.1 \\ apache-airflow-providers-microsoft-mssql==2.1.0 \\ apache-airflow-providers-http==2.0.3 \\ apache-airflow-providers-imap==2.2.0 \\ apache-airflow-providers-influxdb==1.1.0 \\ apache-airflow-providers-jdbc==2.1.0 \\ apache-airflow-providers-postgres==3.0.0 \\ apache-airflow-providers-mongo==2.3.0 \\ apache-airflow-providers-mysql==2.2.0 \\ apache-airflow-providers-neo4j==2.1.0 \\ apache-airflow-providers-odbc==2.0.1 \\ apache-airflow-providers-redis==2.0.1 USER airflow Build Airflow Image docker build -t chatreesr/airflow-py3.8:test . Push Airflow Image docker push chatreesr/airflow-py3.8:test Example 3 - Python API App \u0e43\u0e0a\u0e49\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32 Python App \u0e1b\u0e01\u0e15\u0e34 \u0e17\u0e33\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 python3 -m venv venv \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 Virtual Environment \u0e0a\u0e37\u0e48\u0e2d venv Activate environment \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 source venv/bin/activate \u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 \u0e41\u0e25\u0e30 \u0e25\u0e07 Module \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 pip install <module_name> \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 \u0e1e\u0e23\u0e49\u0e2d\u0e21 Deploy \u0e43\u0e2b\u0e49 List \u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Module \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 pip freeze > requirements.txt API Dockerfile Source code \u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 API \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Folder docker-python-app FROM python:3.9 RUN mkdir /app WORKDIR /app # Install dependencies COPY requirements.txt . RUN pip install -r requirements.txt # Run the applications COPY main.py . COPY data.json . CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"9999\"] EXPOSE 9999 Build Python Image docker build -t chatreesr/pyapi:test . Push Python Image docker push chatreesr/pyapi:test Run Python API \u0e23\u0e31\u0e19 API \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01 API \u0e17\u0e35\u0e48 http://localhost:9999 \u0e14\u0e39 API Docs \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 http://localhost:9999/docs docker container run \\ --name pyapi -d \\ -p 9999 :9999 \\ chatreesr/pyapi:test","title":"Images"},{"location":"docker1/images/#images","text":"\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Image \u0e0a\u0e32\u0e27\u0e1a\u0e49\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e15\u0e49\u0e19 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e40\u0e0a\u0e48\u0e19 Customize App \u0e15\u0e32\u0e21\u0e04\u0e27\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 Package App \u0e17\u0e35\u0e48\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e14\u0e49\u0e27\u0e22\u0e15\u0e19\u0e40\u0e2d\u0e07\u0e43\u0e2b\u0e49\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19","title":"Images"},{"location":"docker1/images/#dockerfile","text":"\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e43\u0e0a\u0e49\u0e40\u0e2d\u0e07 \u0e40\u0e02\u0e35\u0e22\u0e19 Dockerfile \u0e15\u0e32\u0e21\u0e04\u0e33\u0e41\u0e19\u0e30\u0e19\u0e33 Dockerfile Reference Build Image Push Image \u0e44\u0e1b\u0e17\u0e35\u0e48 Repository (Docker Hub) Run Image \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19","title":"Dockerfile"},{"location":"docker1/images/#example-1-dev-notebook","text":"\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Python Dev Environment \u0e17\u0e35\u0e48\u0e21\u0e35 Package \u0e22\u0e2d\u0e14\u0e19\u0e34\u0e22\u0e21\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1c\u0e48\u0e32\u0e19 Jupyter Notebook","title":"Example 1 - Dev Notebook"},{"location":"docker1/images/#python-dockerfile","text":"\u0e43\u0e2b\u0e49 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d Dockerfile (\u0e44\u0e21\u0e48\u0e21\u0e35 Extension) \u0e41\u0e25\u0e30 Copy \u0e0a\u0e38\u0e14\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 FROM ubuntu:20.04 RUN mkdir /home/workspace WORKDIR /home/workspace RUN apt-get update && apt-get install -y python3 python3-pip RUN pip3 install pandas matplotlib seaborn numpy notebook jupyterlab viola EXPOSE 8888 CMD [\"jupyter\", \"notebook\", \"--no-browser\", \"--ip=0.0.0.0\", \"--allow-root\", \"--NotebookApp.token=''\", \"--NotebookApp.password=''\"]","title":"Python Dockerfile"},{"location":"docker1/images/#build-jupyter-image","text":"\u0e2a\u0e23\u0e49\u0e32\u0e07 Local Image \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker build -t chatreesr/python-dev:test . -t \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 tag \u0e0a\u0e37\u0e48\u0e2d image chatreesr/python-dev:test \u0e04\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d Image \u0e1e\u0e23\u0e49\u0e2d\u0e21 Tag . \u0e04\u0e37\u0e2d \u0e43\u0e2b\u0e49\u0e2d\u0e48\u0e32\u0e19 Dockerfile \u0e08\u0e32\u0e01 Current Directory","title":"Build Jupyter Image"},{"location":"docker1/images/#run-jupyter-image","text":"docker container run \\ -d --name jupyter-dev \\ -p 8888 :8888 \\ -v $( pwd ) /src:/home/workspace \\ chatreesr/python-dev:test \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c http://localhost:8888 \u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e44\u0e14\u0e49\u0e15\u0e32\u0e21\u0e1b\u0e01\u0e15\u0e34 Source Code \u0e08\u0e30\u0e16\u0e39\u0e01 Sync \u0e17\u0e35\u0e48 $(pwd)/src","title":"Run Jupyter Image"},{"location":"docker1/images/#push-jupyter-image","text":"docker image push chatreesr/python-dev:test \u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23 Login \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker login \u0e01\u0e48\u0e2d\u0e19","title":"Push Jupyter Image"},{"location":"docker1/images/#example-2-airflow","text":"\u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07 Custom Image \u0e40\u0e2d\u0e07 \u0e40\u0e0a\u0e48\u0e19 \u0e25\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e25\u0e07\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 Airflow \u0e08\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e25\u0e07 Plugins \u0e02\u0e2d\u0e07 Airflow \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Database \u0e15\u0e48\u0e32\u0e07\u0e46\u0e44\u0e14\u0e49 \u0e43\u0e19\u0e23\u0e30\u0e1a\u0e1a Production \u0e15\u0e31\u0e27 Airflow \u0e08\u0e30\u0e25\u0e07\u0e17\u0e38\u0e01 Connections \u0e41\u0e25\u0e30 \u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e48\u0e2d\u0e22\u0e46 \u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Image \u0e08\u0e30\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e01\u0e27\u0e48\u0e32\u0e19\u0e35\u0e49\u0e19\u0e34\u0e14\u0e2b\u0e19\u0e48\u0e2d\u0e22 \u0e41\u0e15\u0e48\u0e41\u0e19\u0e27\u0e04\u0e34\u0e14\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19","title":"Example 2 - Airflow"},{"location":"docker1/images/#create-an-airflow-dockerfile","text":"FROM apache/airflow:2.2.4-python3.8 USER root # Install system packages & clean up RUN apt-get update \\ && apt-get install -y --no-install-recommends \\ build-essential \\ # MySQL dependency default-libmysqlclient-dev \\ # ODBC dependency unixodbc-dev \\ && apt-get autoremove -yqq --purge \\ && apt-get clean \\ && rm -rf /var/lib/apt/lists/* # Install Python packages RUN pip install --no-cache-dir \\ apache-airflow-providers-airbyte==2.1.1 \\ apache-airflow-providers-apache-cassandra==2.1.0 \\ apache-airflow-providers-elasticsearch==2.2.0 \\ apache-airflow-providers-docker==2.4.1 \\ apache-airflow-providers-microsoft-mssql==2.1.0 \\ apache-airflow-providers-http==2.0.3 \\ apache-airflow-providers-imap==2.2.0 \\ apache-airflow-providers-influxdb==1.1.0 \\ apache-airflow-providers-jdbc==2.1.0 \\ apache-airflow-providers-postgres==3.0.0 \\ apache-airflow-providers-mongo==2.3.0 \\ apache-airflow-providers-mysql==2.2.0 \\ apache-airflow-providers-neo4j==2.1.0 \\ apache-airflow-providers-odbc==2.0.1 \\ apache-airflow-providers-redis==2.0.1 USER airflow","title":"Create an Airflow Dockerfile"},{"location":"docker1/images/#build-airflow-image","text":"docker build -t chatreesr/airflow-py3.8:test .","title":"Build Airflow Image"},{"location":"docker1/images/#push-airflow-image","text":"docker push chatreesr/airflow-py3.8:test","title":"Push Airflow Image"},{"location":"docker1/images/#example-3-python-api-app","text":"\u0e43\u0e0a\u0e49\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32 Python App \u0e1b\u0e01\u0e15\u0e34 \u0e17\u0e33\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 python3 -m venv venv \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 Virtual Environment \u0e0a\u0e37\u0e48\u0e2d venv Activate environment \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 source venv/bin/activate \u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 \u0e41\u0e25\u0e30 \u0e25\u0e07 Module \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 pip install <module_name> \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 \u0e1e\u0e23\u0e49\u0e2d\u0e21 Deploy \u0e43\u0e2b\u0e49 List \u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Module \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 pip freeze > requirements.txt","title":"Example 3 - Python API App"},{"location":"docker1/images/#api-dockerfile","text":"Source code \u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 API \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Folder docker-python-app FROM python:3.9 RUN mkdir /app WORKDIR /app # Install dependencies COPY requirements.txt . RUN pip install -r requirements.txt # Run the applications COPY main.py . COPY data.json . CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"9999\"] EXPOSE 9999","title":"API Dockerfile"},{"location":"docker1/images/#build-python-image","text":"docker build -t chatreesr/pyapi:test .","title":"Build Python Image"},{"location":"docker1/images/#push-python-image","text":"docker push chatreesr/pyapi:test","title":"Push Python Image"},{"location":"docker1/images/#run-python-api","text":"\u0e23\u0e31\u0e19 API \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01 API \u0e17\u0e35\u0e48 http://localhost:9999 \u0e14\u0e39 API Docs \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 http://localhost:9999/docs docker container run \\ --name pyapi -d \\ -p 9999 :9999 \\ chatreesr/pyapi:test","title":"Run Python API"},{"location":"docker1/networks/","text":"Networks Network \u0e04\u0e37\u0e2d \u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e02\u0e2d\u0e07 Container \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e23\u0e30\u0e1a\u0e38 Docker Engine \u0e08\u0e30\u0e43\u0e2b\u0e49 Container \u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48 Default Bridge Network \u0e42\u0e14\u0e22\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e04\u0e37\u0e2d network \u0e40\u0e0a\u0e48\u0e19 docker network <sub-command> [ options ] \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e23\u0e32\u0e21\u0e31\u0e01\u0e08\u0e30\u0e08\u0e31\u0e1a\u0e01\u0e25\u0e38\u0e48\u0e21\u0e43\u0e2b\u0e49 Application \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Network \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 Concept List Networks docker network ls Check Containers in Networks docker network inspect <network_id> \u0e14\u0e39\u0e17\u0e35\u0e48 Section Containers \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Container \u0e44\u0e2b\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Network \u0e43\u0e14 Create a Network docker network create <network_name> Default Network Driver \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 Bridge \u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker Swarm \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e0a\u0e49 Overlay Network Network \u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e2d\u0e07\u0e08\u0e30\u0e21\u0e35 DNS Resolver \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e2b\u0e21\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e27\u0e48\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d Container \u0e41\u0e17\u0e19 IP Address \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 ( Default Network \u0e44\u0e21\u0e48\u0e21\u0e35 DNS Resolver \u0e43\u0e2b\u0e49 ) Example 1 - Database Dev \u0e2a\u0e21\u0e21\u0e15\u0e34\u0e27\u0e48\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Development Environment \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Database \u0e21\u0e35\u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a UI \u0e21\u0e35\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 PostgreSQL Create a Database Network \u0e40\u0e23\u0e34\u0e48\u0e21\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Network docker network create db-dev Run a Web UI within Network \u0e23\u0e31\u0e19 Cloudbeaver UI (\u0e15\u0e31\u0e27\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database \u0e1a\u0e19 Web) \u0e14\u0e49\u0e27\u0e22 --network docker run \\ --name cloudbeaver \\ -d -it -p 8090 :8978 \\ --network db-dev \\ dbeaver/cloudbeaver:latest Run a PostgreSQL within Network \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19 docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ --network db-dev \\ postgres Check \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a http://localhost:8090 \u0e42\u0e14\u0e22\u0e40\u0e27\u0e25\u0e32\u0e23\u0e30\u0e1a\u0e38 hostname \u0e43\u0e2b\u0e49\u0e23\u0e30\u0e1a\u0e38\u0e0a\u0e37\u0e48\u0e2d Container mypostgres \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Docker Engine \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25 mypostgres \u0e40\u0e1b\u0e47\u0e19 IP Address \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 Example 2 - DNS Round Robin \u0e2a\u0e21\u0e21\u0e15\u0e34\u0e27\u0e48\u0e32\u0e21\u0e35 Server Elasticsearch \u0e2d\u0e22\u0e39\u0e48 2 \u0e15\u0e31\u0e27 \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33 Load Balancer \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e07\u0e48\u0e32\u0e22\u0e43\u0e2b\u0e49 Traffic \u0e44\u0e1b\u0e2b\u0e32 Server \u0e17\u0e31\u0e49\u0e07\u0e04\u0e39\u0e48\u0e1e\u0e2d\u0e46\u0e01\u0e31\u0e19 \u0e17\u0e33\u0e41\u0e1a\u0e1a\u0e2b\u0e22\u0e32\u0e1a\u0e46\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 --net-alias \u0e02\u0e2d\u0e07 Docker \u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49 Create a DNS Network docker network create elastic-lb Add Containers \u0e43\u0e2a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 \u0e2a\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e49\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 2 Containers docker container run \\ -d --network elastic-lb \\ --net-alias search-cluster \\ elasticsearch:2 --net-alias \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32\u0e43\u0e2b\u0e49 Map \u0e0a\u0e37\u0e48\u0e2d Container \u0e19\u0e35\u0e49\u0e01\u0e31\u0e1a\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e23\u0e30\u0e1a\u0e38\u0e43\u0e19 --net-alias \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e19\u0e35\u0e49\u0e04\u0e37\u0e2d search-cluster \u0e40\u0e27\u0e25\u0e32\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49 search-cluster Docker \u0e08\u0e30 Forward Traffic \u0e44\u0e1b\u0e2b\u0e32 Server \u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1a\u0e1a\u0e2a\u0e38\u0e48\u0e21 Test DNS \u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 Attach Alpine Linux \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Network elastic-lb \u0e41\u0e25\u0e49\u0e27\u0e01\u0e47\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 nslookup search-cluster \u0e43\u0e19\u0e01\u0e32\u0e23\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e25\u0e02 IP Address \u0e17\u0e35\u0e48\u0e1c\u0e39\u0e01\u0e2d\u0e22\u0e39\u0e48\u0e01\u0e31\u0e1a\u0e0a\u0e37\u0e48\u0e2d search-cluster docker container run \\ --rm --network elastic-lb \\ alpine nslookup search-cluster Call Elastic API \u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 Attach CentOS Linux \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Network elastic-lb \u0e41\u0e25\u0e49\u0e27\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 Elasticsearch \u0e14\u0e49\u0e27\u0e22 curl (\u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49 CentOS \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32\u0e21\u0e35 curl \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49 \u0e41\u0e15\u0e48 Alpine \u0e44\u0e21\u0e48\u0e21\u0e35) \u0e43\u0e2b\u0e49\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2b\u0e25\u0e32\u0e22\u0e46\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e41\u0e19\u0e48\u0e43\u0e08\u0e27\u0e48\u0e32 Response \u0e21\u0e32\u0e08\u0e32\u0e01 Server \u0e04\u0e19\u0e25\u0e30\u0e15\u0e31\u0e27 \u0e42\u0e14\u0e22\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e17\u0e35\u0e48 name docker container run \\ --rm --network elastic-lb \\ centos curl -s search-cluster:9200 Example 3 - Wordpress \u0e2a\u0e48\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e02\u0e2d\u0e07 Wordpress \u0e04\u0e37\u0e2d \u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 Worpress \u0e17\u0e35\u0e48\u0e23\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19 Webserver \u0e41\u0e25\u0e30 PHP \u0e01\u0e31\u0e1a Database MySQL \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23 Deploy \u0e04\u0e37\u0e2d \u0e2a\u0e23\u0e49\u0e32\u0e07 Network \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a App Wordpress Deploy mysql + \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Volume Deploy wordpress + \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Volume \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e01\u0e23\u0e13\u0e35\u0e41\u0e1a\u0e1a\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 Docker Compose (\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c\u0e2b\u0e19\u0e49\u0e32) \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e07\u0e48\u0e32\u0e22\u0e01\u0e27\u0e48\u0e32 \u0e41\u0e15\u0e48\u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e41\u0e1a\u0e1a\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e49 Compose Create a Wordpress Network docker network create wordpress-net Deploy MySQL \u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23 Deploy Database MySQL \u0e01\u0e48\u0e2d\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container run \\ -d --name wordpress-db \\ -e MYSQL_DATABASE = mywebsite-db \\ -e MYSQL_USER = admin \\ -e MYSQL_PASSWORD = wordpresspassword \\ -e MYSQL_ROOT_PASSWORD = rootpassword \\ -v wordpress-db:/var/lib/mysql \\ --network wordpress-net \\ mysql Deploy Wordpress docker container run \\ -d -p 8099 :80 \\ --name wordpress-site \\ -e WORDPRESS_DB_HOST = wordpress-db \\ -e WORDPRESS_DB_USER = admin \\ -e WORDPRESS_DB_PASSWORD = wordpresspassword \\ -e WORDPRESS_DB_NAME = mywebsite-db \\ -v wordpress:/var/www/html \\ --network wordpress-net \\ wordpress Test Wordpress \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48 http://localhost:8099 \u0e17\u0e33\u0e01\u0e32\u0e23 Setup \u0e15\u0e32\u0e21\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 Wizard \u0e08\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e02\u0e35\u0e22\u0e19 Post + \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Theme","title":"Networks"},{"location":"docker1/networks/#networks","text":"Network \u0e04\u0e37\u0e2d \u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e02\u0e2d\u0e07 Container \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e23\u0e30\u0e1a\u0e38 Docker Engine \u0e08\u0e30\u0e43\u0e2b\u0e49 Container \u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48 Default Bridge Network \u0e42\u0e14\u0e22\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e04\u0e37\u0e2d network \u0e40\u0e0a\u0e48\u0e19 docker network <sub-command> [ options ] \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e23\u0e32\u0e21\u0e31\u0e01\u0e08\u0e30\u0e08\u0e31\u0e1a\u0e01\u0e25\u0e38\u0e48\u0e21\u0e43\u0e2b\u0e49 Application \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Network \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19","title":"Networks"},{"location":"docker1/networks/#concept","text":"","title":"Concept"},{"location":"docker1/networks/#list-networks","text":"docker network ls","title":"List Networks"},{"location":"docker1/networks/#check-containers-in-networks","text":"docker network inspect <network_id> \u0e14\u0e39\u0e17\u0e35\u0e48 Section Containers \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Container \u0e44\u0e2b\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Network \u0e43\u0e14","title":"Check Containers in Networks"},{"location":"docker1/networks/#create-a-network","text":"docker network create <network_name> Default Network Driver \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 Bridge \u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker Swarm \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e0a\u0e49 Overlay Network Network \u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e2d\u0e07\u0e08\u0e30\u0e21\u0e35 DNS Resolver \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e2b\u0e21\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e27\u0e48\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d Container \u0e41\u0e17\u0e19 IP Address \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 ( Default Network \u0e44\u0e21\u0e48\u0e21\u0e35 DNS Resolver \u0e43\u0e2b\u0e49 )","title":"Create a Network"},{"location":"docker1/networks/#example-1-database-dev","text":"\u0e2a\u0e21\u0e21\u0e15\u0e34\u0e27\u0e48\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Development Environment \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Database \u0e21\u0e35\u0e2b\u0e19\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a UI \u0e21\u0e35\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 PostgreSQL","title":"Example 1 - Database Dev"},{"location":"docker1/networks/#create-a-database-network","text":"\u0e40\u0e23\u0e34\u0e48\u0e21\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Network docker network create db-dev","title":"Create a Database Network"},{"location":"docker1/networks/#run-a-web-ui-within-network","text":"\u0e23\u0e31\u0e19 Cloudbeaver UI (\u0e15\u0e31\u0e27\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database \u0e1a\u0e19 Web) \u0e14\u0e49\u0e27\u0e22 --network docker run \\ --name cloudbeaver \\ -d -it -p 8090 :8978 \\ --network db-dev \\ dbeaver/cloudbeaver:latest","title":"Run a Web UI within Network"},{"location":"docker1/networks/#run-a-postgresql-within-network","text":"\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19 docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ --network db-dev \\ postgres","title":"Run a PostgreSQL within Network"},{"location":"docker1/networks/#check","text":"\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a http://localhost:8090 \u0e42\u0e14\u0e22\u0e40\u0e27\u0e25\u0e32\u0e23\u0e30\u0e1a\u0e38 hostname \u0e43\u0e2b\u0e49\u0e23\u0e30\u0e1a\u0e38\u0e0a\u0e37\u0e48\u0e2d Container mypostgres \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Docker Engine \u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25 mypostgres \u0e40\u0e1b\u0e47\u0e19 IP Address \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34","title":"Check"},{"location":"docker1/networks/#example-2-dns-round-robin","text":"\u0e2a\u0e21\u0e21\u0e15\u0e34\u0e27\u0e48\u0e32\u0e21\u0e35 Server Elasticsearch \u0e2d\u0e22\u0e39\u0e48 2 \u0e15\u0e31\u0e27 \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33 Load Balancer \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e07\u0e48\u0e32\u0e22\u0e43\u0e2b\u0e49 Traffic \u0e44\u0e1b\u0e2b\u0e32 Server \u0e17\u0e31\u0e49\u0e07\u0e04\u0e39\u0e48\u0e1e\u0e2d\u0e46\u0e01\u0e31\u0e19 \u0e17\u0e33\u0e41\u0e1a\u0e1a\u0e2b\u0e22\u0e32\u0e1a\u0e46\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 --net-alias \u0e02\u0e2d\u0e07 Docker \u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49","title":"Example 2 - DNS Round Robin"},{"location":"docker1/networks/#create-a-dns-network","text":"docker network create elastic-lb","title":"Create a DNS Network"},{"location":"docker1/networks/#add-containers","text":"\u0e43\u0e2a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 \u0e2a\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e49\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 2 Containers docker container run \\ -d --network elastic-lb \\ --net-alias search-cluster \\ elasticsearch:2 --net-alias \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32\u0e43\u0e2b\u0e49 Map \u0e0a\u0e37\u0e48\u0e2d Container \u0e19\u0e35\u0e49\u0e01\u0e31\u0e1a\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e23\u0e30\u0e1a\u0e38\u0e43\u0e19 --net-alias \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e19\u0e35\u0e49\u0e04\u0e37\u0e2d search-cluster \u0e40\u0e27\u0e25\u0e32\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49 search-cluster Docker \u0e08\u0e30 Forward Traffic \u0e44\u0e1b\u0e2b\u0e32 Server \u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1a\u0e1a\u0e2a\u0e38\u0e48\u0e21","title":"Add Containers"},{"location":"docker1/networks/#test-dns","text":"\u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 Attach Alpine Linux \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Network elastic-lb \u0e41\u0e25\u0e49\u0e27\u0e01\u0e47\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 nslookup search-cluster \u0e43\u0e19\u0e01\u0e32\u0e23\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e25\u0e02 IP Address \u0e17\u0e35\u0e48\u0e1c\u0e39\u0e01\u0e2d\u0e22\u0e39\u0e48\u0e01\u0e31\u0e1a\u0e0a\u0e37\u0e48\u0e2d search-cluster docker container run \\ --rm --network elastic-lb \\ alpine nslookup search-cluster","title":"Test DNS"},{"location":"docker1/networks/#call-elastic-api","text":"\u0e43\u0e0a\u0e49\u0e27\u0e34\u0e18\u0e35 Attach CentOS Linux \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Network elastic-lb \u0e41\u0e25\u0e49\u0e27\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 Elasticsearch \u0e14\u0e49\u0e27\u0e22 curl (\u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49 CentOS \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32\u0e21\u0e35 curl \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49 \u0e41\u0e15\u0e48 Alpine \u0e44\u0e21\u0e48\u0e21\u0e35) \u0e43\u0e2b\u0e49\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2b\u0e25\u0e32\u0e22\u0e46\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e41\u0e19\u0e48\u0e43\u0e08\u0e27\u0e48\u0e32 Response \u0e21\u0e32\u0e08\u0e32\u0e01 Server \u0e04\u0e19\u0e25\u0e30\u0e15\u0e31\u0e27 \u0e42\u0e14\u0e22\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e17\u0e35\u0e48 name docker container run \\ --rm --network elastic-lb \\ centos curl -s search-cluster:9200","title":"Call Elastic API"},{"location":"docker1/networks/#example-3-wordpress","text":"\u0e2a\u0e48\u0e27\u0e19\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e02\u0e2d\u0e07 Wordpress \u0e04\u0e37\u0e2d \u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 Worpress \u0e17\u0e35\u0e48\u0e23\u0e31\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19 Webserver \u0e41\u0e25\u0e30 PHP \u0e01\u0e31\u0e1a Database MySQL \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23 Deploy \u0e04\u0e37\u0e2d \u0e2a\u0e23\u0e49\u0e32\u0e07 Network \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a App Wordpress Deploy mysql + \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Volume Deploy wordpress + \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 Volume \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e01\u0e23\u0e13\u0e35\u0e41\u0e1a\u0e1a\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 Docker Compose (\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c\u0e2b\u0e19\u0e49\u0e32) \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e07\u0e48\u0e32\u0e22\u0e01\u0e27\u0e48\u0e32 \u0e41\u0e15\u0e48\u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e41\u0e1a\u0e1a\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e49 Compose","title":"Example 3 - Wordpress"},{"location":"docker1/networks/#create-a-wordpress-network","text":"docker network create wordpress-net","title":"Create a Wordpress Network"},{"location":"docker1/networks/#deploy-mysql","text":"\u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23 Deploy Database MySQL \u0e01\u0e48\u0e2d\u0e19\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container run \\ -d --name wordpress-db \\ -e MYSQL_DATABASE = mywebsite-db \\ -e MYSQL_USER = admin \\ -e MYSQL_PASSWORD = wordpresspassword \\ -e MYSQL_ROOT_PASSWORD = rootpassword \\ -v wordpress-db:/var/lib/mysql \\ --network wordpress-net \\ mysql","title":"Deploy MySQL"},{"location":"docker1/networks/#deploy-wordpress","text":"docker container run \\ -d -p 8099 :80 \\ --name wordpress-site \\ -e WORDPRESS_DB_HOST = wordpress-db \\ -e WORDPRESS_DB_USER = admin \\ -e WORDPRESS_DB_PASSWORD = wordpresspassword \\ -e WORDPRESS_DB_NAME = mywebsite-db \\ -v wordpress:/var/www/html \\ --network wordpress-net \\ wordpress","title":"Deploy Wordpress"},{"location":"docker1/networks/#test-wordpress","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48 http://localhost:8099 \u0e17\u0e33\u0e01\u0e32\u0e23 Setup \u0e15\u0e32\u0e21\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e48\u0e32\u0e07 Wizard \u0e08\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e02\u0e35\u0e22\u0e19 Post + \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Theme","title":"Test Wordpress"},{"location":"docker1/use/","text":"Basics Prerequisites Basic Networking Basic Command Line Basic Programming & Software Development Process Containers vs Virtualization Virtualization Containerization Running Containers \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker \u0e21\u0e35\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a docker <command> <sub-command> [options] Starting Containers docker container run --name mywebserver --detach --publish 8080:80 nginx \u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e40\u0e01\u0e34\u0e14\u0e02\u0e36\u0e49\u0e19\u0e2b\u0e25\u0e31\u0e07\u0e1b\u0e49\u0e2d\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 Docker \u0e44\u0e1b\u0e04\u0e49\u0e19\u0e2b\u0e32 Image (\u0e19\u0e36\u0e01\u0e16\u0e36\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\u0e23\u0e39\u0e1b\u0e17\u0e35\u0e48\u0e41\u0e1e\u0e01\u0e40\u0e01\u0e08\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22 \u0e21\u0e35\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19 \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19) \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e04\u0e2d\u0e21\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e40\u0e08\u0e2d Image Docker \u0e21\u0e31\u0e19\u0e08\u0e30\u0e44\u0e1b\u0e04\u0e49\u0e19\u0e2b\u0e32\u0e17\u0e35\u0e48 Docker Hub \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 Repository \u0e01\u0e25\u0e32\u0e07\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e01\u0e47\u0e1a Image \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e1e\u0e1a Image \u0e41\u0e25\u0e49\u0e27 Docker \u0e08\u0e30 Download \u0e21\u0e32\u0e40\u0e01\u0e47\u0e1a\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e04\u0e2d\u0e21\u0e40\u0e23\u0e32 Docker Engine \u0e40\u0e2d\u0e32 Image \u0e21\u0e32\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Image \u0e04\u0e37\u0e2d Container --name \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d Container \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e15\u0e31\u0e49\u0e07 Docker \u0e08\u0e30\u0e43\u0e2b\u0e49 ID \u0e21\u0e32\u0e41\u0e17\u0e19 -d \u0e2b\u0e23\u0e37\u0e2d --detach \u0e04\u0e37\u0e2d\u0e43\u0e2b\u0e49\u0e04\u0e37\u0e19 Prompt \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e2a\u0e14\u0e07 Logs \u0e15\u0e2d\u0e19\u0e23\u0e31\u0e19 -p \u0e2b\u0e23\u0e37\u0e2d --publish \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e43\u0e2b\u0e49 Docker Engine \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Host Port 8080 \u0e01\u0e31\u0e1a Container Port 80 \u0e40\u0e02\u0e49\u0e32 Web Browser \u0e17\u0e35\u0e48 http://localhost:8080 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39 Nginx Welcome Page Managing Containers \u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Container \u0e43\u0e0a\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 container \u0e40\u0e0a\u0e48\u0e19 docker container <sub-command> List Containers \u0e14\u0e39\u0e40\u0e09\u0e1e\u0e32\u0e30 Container \u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48 docker container ls \u0e14\u0e39 Container \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 (\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e41\u0e25\u0e30 \u0e2b\u0e22\u0e38\u0e14\u0e17\u0e33\u0e07\u0e32\u0e19) docker container ls -a Stop Containers docker container stop mywebserver Remove Containers docker container rm mywebserver Container Logs docker container logs mywebserver Container Ports docker container port mywebserver Container Processes docker container top mywebserver Resource Consumption docker container stats mywebserver Inspect Containers docker container inspect mywebserver \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a IP Address \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container inspect \\ --format '{{ .NetworkSettings.IPAddress }}' \\ mywebserver '{{ .NetworkSettings.IPAddress }}' \u0e04\u0e37\u0e2d Go Template Access Containers docker container exec -it mywebserver bash exec \u0e04\u0e37\u0e2d\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e43\u0e2b\u0e49\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e43\u0e19 Container -it \u0e04\u0e37\u0e2d interactive tty \u0e19\u0e36\u0e01\u0e16\u0e36\u0e07\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Shell bash \u0e04\u0e37\u0e2d \u0e0a\u0e37\u0e48\u0e2d\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e43\u0e19 Container Clean up \u0e25\u0e1a\u0e17\u0e38\u0e01\u0e2a\u0e34\u0e48\u0e07\u0e2d\u0e22\u0e48\u0e32\u0e07 (\u0e22\u0e01\u0e40\u0e27\u0e49\u0e19 Volume) docker system prune -a Example 1 - PostgreSQL Starting a Database docker container run \\ --name mypostgres \\ -e POSTGRES_PASSWORD = secretpassword \\ -d -p 5432 :5432 \\ postgres -e \u0e2b\u0e23\u0e37\u0e2d --env \u0e04\u0e37\u0e2d Environment Variables \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e43\u0e19 Container Accessing psql docker container exec -it mypostgres psql -U postgres \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 psql \\l \u0e2b\u0e23\u0e37\u0e2d \\l+ \u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Database SELECT datname FROM pg_database; \\dt \u0e2b\u0e23\u0e37\u0e2d \\dt * \u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Relations (Tables) CREATE DATABASE airflow; \u0e2a\u0e23\u0e49\u0e32\u0e07 Database \u0e0a\u0e37\u0e48\u0e2d\u0e27\u0e48\u0e32 Airflow \u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 SQL \u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 (\u0e08\u0e30\u0e43\u0e0a\u0e49 CRUD \u0e01\u0e31\u0e19\u0e08\u0e23\u0e34\u0e07\u0e08\u0e31\u0e07\u0e2d\u0e35\u0e01\u0e17\u0e35 Session \u0e2d\u0e37\u0e48\u0e19) Connecting from Host \u0e43\u0e0a\u0e49\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database (\u0e40\u0e0a\u0e48\u0e19 dbeaver \u0e2b\u0e23\u0e37\u0e2d beekeeper-studio) \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d PostgreSQL \u0e42\u0e14\u0e22\u0e01\u0e33\u0e2b\u0e19\u0e14 Host = localhost , Port = 5432 Username = postgres , Password = secretpassword Stopping the Database docker container stop mypostgres Removing the Database docker container rm mypostgres Example 2 - Web Server Starting a Web Server docker container run --name mywebserver -d -p 8080 :80 nginx Checking Container \u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a Browser http://localhost:8080 Changing Default Page docker container exec -it mywebserver bash \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Text Editor vim \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 apt update && apt install vim -y \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c html vim /usr/share/nginx/html/index.html \u0e01\u0e14 Refresh \u0e17\u0e35\u0e48 Browser\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e41\u0e01\u0e49\u0e44\u0e02 Removing the Web Server docker container rm -f mywebserver -f \u0e04\u0e37\u0e2d force \u0e1a\u0e31\u0e07\u0e04\u0e31\u0e1a Remove \u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 Stop \u0e01\u0e48\u0e2d\u0e19","title":"Basics"},{"location":"docker1/use/#basics","text":"","title":"Basics"},{"location":"docker1/use/#prerequisites","text":"Basic Networking Basic Command Line Basic Programming & Software Development Process","title":"Prerequisites"},{"location":"docker1/use/#containers-vs-virtualization","text":"","title":"Containers vs Virtualization"},{"location":"docker1/use/#virtualization","text":"","title":"Virtualization"},{"location":"docker1/use/#containerization","text":"","title":"Containerization"},{"location":"docker1/use/#running-containers","text":"\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker \u0e21\u0e35\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a docker <command> <sub-command> [options]","title":"Running Containers"},{"location":"docker1/use/#starting-containers","text":"docker container run --name mywebserver --detach --publish 8080:80 nginx \u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e40\u0e01\u0e34\u0e14\u0e02\u0e36\u0e49\u0e19\u0e2b\u0e25\u0e31\u0e07\u0e1b\u0e49\u0e2d\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 Docker \u0e44\u0e1b\u0e04\u0e49\u0e19\u0e2b\u0e32 Image (\u0e19\u0e36\u0e01\u0e16\u0e36\u0e07\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\u0e23\u0e39\u0e1b\u0e17\u0e35\u0e48\u0e41\u0e1e\u0e01\u0e40\u0e01\u0e08\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22 \u0e21\u0e35\u0e44\u0e25\u0e1a\u0e23\u0e32\u0e23\u0e35\u0e48\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19 \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19) \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e04\u0e2d\u0e21\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e40\u0e08\u0e2d Image Docker \u0e21\u0e31\u0e19\u0e08\u0e30\u0e44\u0e1b\u0e04\u0e49\u0e19\u0e2b\u0e32\u0e17\u0e35\u0e48 Docker Hub \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 Repository \u0e01\u0e25\u0e32\u0e07\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e01\u0e47\u0e1a Image \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e1e\u0e1a Image \u0e41\u0e25\u0e49\u0e27 Docker \u0e08\u0e30 Download \u0e21\u0e32\u0e40\u0e01\u0e47\u0e1a\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e04\u0e2d\u0e21\u0e40\u0e23\u0e32 Docker Engine \u0e40\u0e2d\u0e32 Image \u0e21\u0e32\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Image \u0e04\u0e37\u0e2d Container --name \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d Container \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e15\u0e31\u0e49\u0e07 Docker \u0e08\u0e30\u0e43\u0e2b\u0e49 ID \u0e21\u0e32\u0e41\u0e17\u0e19 -d \u0e2b\u0e23\u0e37\u0e2d --detach \u0e04\u0e37\u0e2d\u0e43\u0e2b\u0e49\u0e04\u0e37\u0e19 Prompt \u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e2a\u0e14\u0e07 Logs \u0e15\u0e2d\u0e19\u0e23\u0e31\u0e19 -p \u0e2b\u0e23\u0e37\u0e2d --publish \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e1a\u0e2d\u0e01\u0e43\u0e2b\u0e49 Docker Engine \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d Host Port 8080 \u0e01\u0e31\u0e1a Container Port 80 \u0e40\u0e02\u0e49\u0e32 Web Browser \u0e17\u0e35\u0e48 http://localhost:8080 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39 Nginx Welcome Page","title":"Starting Containers"},{"location":"docker1/use/#managing-containers","text":"\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Container \u0e43\u0e0a\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 container \u0e40\u0e0a\u0e48\u0e19 docker container <sub-command>","title":"Managing Containers"},{"location":"docker1/use/#list-containers","text":"\u0e14\u0e39\u0e40\u0e09\u0e1e\u0e32\u0e30 Container \u0e17\u0e35\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48 docker container ls \u0e14\u0e39 Container \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 (\u0e17\u0e33\u0e07\u0e32\u0e19 \u0e41\u0e25\u0e30 \u0e2b\u0e22\u0e38\u0e14\u0e17\u0e33\u0e07\u0e32\u0e19) docker container ls -a","title":"List Containers"},{"location":"docker1/use/#stop-containers","text":"docker container stop mywebserver","title":"Stop Containers"},{"location":"docker1/use/#remove-containers","text":"docker container rm mywebserver","title":"Remove Containers"},{"location":"docker1/use/#container-logs","text":"docker container logs mywebserver","title":"Container Logs"},{"location":"docker1/use/#container-ports","text":"docker container port mywebserver","title":"Container Ports"},{"location":"docker1/use/#container-processes","text":"docker container top mywebserver","title":"Container Processes"},{"location":"docker1/use/#resource-consumption","text":"docker container stats mywebserver","title":"Resource Consumption"},{"location":"docker1/use/#inspect-containers","text":"docker container inspect mywebserver \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a IP Address \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container inspect \\ --format '{{ .NetworkSettings.IPAddress }}' \\ mywebserver '{{ .NetworkSettings.IPAddress }}' \u0e04\u0e37\u0e2d Go Template","title":"Inspect Containers"},{"location":"docker1/use/#access-containers","text":"docker container exec -it mywebserver bash exec \u0e04\u0e37\u0e2d\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e43\u0e2b\u0e49\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e43\u0e19 Container -it \u0e04\u0e37\u0e2d interactive tty \u0e19\u0e36\u0e01\u0e16\u0e36\u0e07\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Shell bash \u0e04\u0e37\u0e2d \u0e0a\u0e37\u0e48\u0e2d\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e43\u0e19 Container","title":"Access Containers"},{"location":"docker1/use/#clean-up","text":"\u0e25\u0e1a\u0e17\u0e38\u0e01\u0e2a\u0e34\u0e48\u0e07\u0e2d\u0e22\u0e48\u0e32\u0e07 (\u0e22\u0e01\u0e40\u0e27\u0e49\u0e19 Volume) docker system prune -a","title":"Clean up"},{"location":"docker1/use/#example-1-postgresql","text":"","title":"Example 1 - PostgreSQL"},{"location":"docker1/use/#starting-a-database","text":"docker container run \\ --name mypostgres \\ -e POSTGRES_PASSWORD = secretpassword \\ -d -p 5432 :5432 \\ postgres -e \u0e2b\u0e23\u0e37\u0e2d --env \u0e04\u0e37\u0e2d Environment Variables \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e43\u0e19 Container","title":"Starting a Database"},{"location":"docker1/use/#accessing-psql","text":"docker container exec -it mypostgres psql -U postgres \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 psql \\l \u0e2b\u0e23\u0e37\u0e2d \\l+ \u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Database SELECT datname FROM pg_database; \\dt \u0e2b\u0e23\u0e37\u0e2d \\dt * \u0e41\u0e2a\u0e14\u0e07\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Relations (Tables) CREATE DATABASE airflow; \u0e2a\u0e23\u0e49\u0e32\u0e07 Database \u0e0a\u0e37\u0e48\u0e2d\u0e27\u0e48\u0e32 Airflow \u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 SQL \u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 (\u0e08\u0e30\u0e43\u0e0a\u0e49 CRUD \u0e01\u0e31\u0e19\u0e08\u0e23\u0e34\u0e07\u0e08\u0e31\u0e07\u0e2d\u0e35\u0e01\u0e17\u0e35 Session \u0e2d\u0e37\u0e48\u0e19)","title":"Accessing psql"},{"location":"docker1/use/#connecting-from-host","text":"\u0e43\u0e0a\u0e49\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database (\u0e40\u0e0a\u0e48\u0e19 dbeaver \u0e2b\u0e23\u0e37\u0e2d beekeeper-studio) \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d PostgreSQL \u0e42\u0e14\u0e22\u0e01\u0e33\u0e2b\u0e19\u0e14 Host = localhost , Port = 5432 Username = postgres , Password = secretpassword","title":"Connecting from Host"},{"location":"docker1/use/#stopping-the-database","text":"docker container stop mypostgres","title":"Stopping the Database"},{"location":"docker1/use/#removing-the-database","text":"docker container rm mypostgres","title":"Removing the Database"},{"location":"docker1/use/#example-2-web-server","text":"","title":"Example 2 - Web Server"},{"location":"docker1/use/#starting-a-web-server","text":"docker container run --name mywebserver -d -p 8080 :80 nginx","title":"Starting a Web Server"},{"location":"docker1/use/#checking-container","text":"\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a Browser http://localhost:8080","title":"Checking Container"},{"location":"docker1/use/#changing-default-page","text":"docker container exec -it mywebserver bash \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Text Editor vim \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 apt update && apt install vim -y \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c html vim /usr/share/nginx/html/index.html \u0e01\u0e14 Refresh \u0e17\u0e35\u0e48 Browser\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e41\u0e01\u0e49\u0e44\u0e02","title":"Changing Default Page"},{"location":"docker1/use/#removing-the-web-server","text":"docker container rm -f mywebserver -f \u0e04\u0e37\u0e2d force \u0e1a\u0e31\u0e07\u0e04\u0e31\u0e1a Remove \u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 Stop \u0e01\u0e48\u0e2d\u0e19","title":"Removing the Web Server"},{"location":"docker1/volumes/","text":"Volumes Volumes \u0e04\u0e37\u0e2d File System \u0e17\u0e35\u0e48 Docker \u0e43\u0e0a\u0e49\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Container \u0e40\u0e0a\u0e48\u0e19 \u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 Database Adding volumes to database docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d -v \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 Volume \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a Database PostgreSQL postgresdb \u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d Docker Volume \u0e17\u0e35\u0e48\u0e15\u0e31\u0e49\u0e07\u0e40\u0e2d\u0e07\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 /var/lib/postgresql/data \u0e04\u0e37\u0e2d Path \u0e17\u0e35\u0e48 Database \u0e40\u0e02\u0e35\u0e22\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e25\u0e07\u0e44\u0e1b \u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 -v postgresdb:/var/lib/postgresql/data \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48 Database \u0e40\u0e02\u0e35\u0e22\u0e19\u0e25\u0e07 /var/lib/postgresql/data \u0e08\u0e30\u0e16\u0e39\u0e01\u0e40\u0e01\u0e47\u0e1a\u0e44\u0e27\u0e49\u0e1a\u0e19 Host \u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Volume \u0e17\u0e35\u0e48\u0e0a\u0e37\u0e48\u0e2d postgresdb \u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Volumes \u0e43\u0e0a\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 volume \u0e40\u0e0a\u0e48\u0e19 docker volume <sub-command> [ options ] List Volumes docker volume ls Inspect Volumes docker volume inspect postgresdb \u0e2b\u0e23\u0e37\u0e2d \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e08\u0e32\u0e01 Container \u0e01\u0e47\u0e44\u0e14\u0e49 docker container inspect --format '{{ index .HostConfig.Binds 0 }}' mypostgres Example 1 - Persisting Data Create a Database Container docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e01\u0e32\u0e23 Init Database \u0e14\u0e49\u0e27\u0e22 docker container logs mypostgres Create a Database 'airflow` docker container exec -it mypostgres psql -U postgres \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e43\u0e2a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 CREATE DATABASE airflow ; \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Database \u0e21\u0e32\u0e40\u0e1b\u0e47\u0e19 airflow : \\c airflow ; \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e15\u0e32\u0e23\u0e32\u0e07 CREATE TABLE test ( id SERIAL NOT NULL PRIMARY KEY , customer_name VARCHAR ); \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e2a\u0e48\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 INSERT INTO test ( customer_name ) VALUES ( 'Jonathan Montgomery' ); \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 SELECT * FROM test ; Removing PostgreSQL \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e17\u0e33\u0e25\u0e32\u0e22 Container \u0e41\u0e25\u0e49\u0e27 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e22\u0e31\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e2b\u0e21 docker container rm -f mypostgres Recreating PostgreSQL \u0e2a\u0e23\u0e49\u0e32\u0e07 Container \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Volume \u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e14\u0e34\u0e21 \u0e41\u0e25\u0e30 \u0e17\u0e14\u0e2a\u0e2d\u0e1a Query \u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e14\u0e34\u0e21\u0e22\u0e31\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e2b\u0e21 docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e08\u0e30\u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23 Init Database \u0e41\u0e25\u0e49\u0e27 Container \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e48\u0e32\u0e19 Data \u0e08\u0e32\u0e01 Volume \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 docker container logs mypostgres Example 2 - Using Data \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 mypostgres \u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container ls Creating Management UI docker run \\ --name cloudbeaver \\ --rm -it -p 8090 :8978 \\ dbeaver/cloudbeaver:latest --rm \u0e04\u0e37\u0e2d\u0e43\u0e2b\u0e49\u0e25\u0e1a Container \u0e2d\u0e2d\u0e01\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e33\u0e07\u0e32\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 Accessing Data \u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48 http://localhost:8090 \u0e01\u0e23\u0e2d\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Setup \u0e40\u0e0a\u0e48\u0e19 Admin Username & Password \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19 \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 PostgresDB Connection \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e32\u0e21\u0e23\u0e39\u0e1b \u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e23\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 IP \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32 Default Bridge Network \u0e02\u0e2d\u0e07 Docker \u0e44\u0e21\u0e48\u0e21\u0e35 DNS \u0e01\u0e14\u0e1b\u0e38\u0e48\u0e21 Test Connection \u0e41\u0e25\u0e30 Save \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e27\u0e48\u0e32\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e19\u0e35\u0e49\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48 Bind Mounts Bind Mounts \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 Map local files \u0e2b\u0e23\u0e37\u0e2d folders \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e19 Container \u0e21\u0e35\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35 \u0e1e\u0e31\u0e12\u0e19\u0e32\u0e0b\u0e2d\u0e1f\u0e15\u0e4c\u0e41\u0e27\u0e23\u0e4c \u0e42\u0e14\u0e22\u0e43\u0e2b\u0e49 Source Code \u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e41\u0e15\u0e48\u0e43\u0e2b\u0e49\u0e2a\u0e34\u0e17\u0e18\u0e34 Container \u0e2d\u0e48\u0e32\u0e19 \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e2d\u0e07 Container \u0e1c\u0e48\u0e32\u0e19 File Bind Mounts \u0e43\u0e0a\u0e49 Flag -v \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19 Example 3 - Nginx Bind Mounts \u0e17\u0e33\u0e01\u0e32\u0e23 Bind Mount Folder \u0e44\u0e1f\u0e25\u0e4c HTML \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 Container NGINX \u0e19\u0e33\u0e44\u0e1b\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25 Bind Mounting NGINX \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Folder nginx-bind \u0e41\u0e25\u0e30 cd nginx-bind \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container run \\ --name = mywebserver \\ -d -p 8080 :80 \\ -v $( pwd ) :/usr/share/nginx/html \\ nginx $(pwd) \u0e04\u0e37\u0e2d Print Working Directory Modifying HTML \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c HTML \u0e40\u0e0b\u0e1f \u0e41\u0e25\u0e30 \u0e17\u0e14\u0e2a\u0e2d\u0e1a Refresh \u0e17\u0e35\u0e48 Browser","title":"Volumes"},{"location":"docker1/volumes/#volumes","text":"Volumes \u0e04\u0e37\u0e2d File System \u0e17\u0e35\u0e48 Docker \u0e43\u0e0a\u0e49\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Container \u0e40\u0e0a\u0e48\u0e19 \u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 Database","title":"Volumes"},{"location":"docker1/volumes/#adding-volumes-to-database","text":"docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d -v \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 Volume \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a Database PostgreSQL postgresdb \u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d Docker Volume \u0e17\u0e35\u0e48\u0e15\u0e31\u0e49\u0e07\u0e40\u0e2d\u0e07\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 /var/lib/postgresql/data \u0e04\u0e37\u0e2d Path \u0e17\u0e35\u0e48 Database \u0e40\u0e02\u0e35\u0e22\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e25\u0e07\u0e44\u0e1b \u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 -v postgresdb:/var/lib/postgresql/data \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48 Database \u0e40\u0e02\u0e35\u0e22\u0e19\u0e25\u0e07 /var/lib/postgresql/data \u0e08\u0e30\u0e16\u0e39\u0e01\u0e40\u0e01\u0e47\u0e1a\u0e44\u0e27\u0e49\u0e1a\u0e19 Host \u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Volume \u0e17\u0e35\u0e48\u0e0a\u0e37\u0e48\u0e2d postgresdb \u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Volumes \u0e43\u0e0a\u0e49\u0e01\u0e25\u0e38\u0e48\u0e21\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 volume \u0e40\u0e0a\u0e48\u0e19 docker volume <sub-command> [ options ]","title":"Adding volumes to database"},{"location":"docker1/volumes/#list-volumes","text":"docker volume ls","title":"List Volumes"},{"location":"docker1/volumes/#inspect-volumes","text":"docker volume inspect postgresdb \u0e2b\u0e23\u0e37\u0e2d \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e08\u0e32\u0e01 Container \u0e01\u0e47\u0e44\u0e14\u0e49 docker container inspect --format '{{ index .HostConfig.Binds 0 }}' mypostgres","title":"Inspect Volumes"},{"location":"docker1/volumes/#example-1-persisting-data","text":"","title":"Example 1 - Persisting Data"},{"location":"docker1/volumes/#create-a-database-container","text":"docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e01\u0e32\u0e23 Init Database \u0e14\u0e49\u0e27\u0e22 docker container logs mypostgres","title":"Create a Database Container"},{"location":"docker1/volumes/#create-a-database-airflow","text":"docker container exec -it mypostgres psql -U postgres \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e43\u0e2a\u0e48\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 CREATE DATABASE airflow ; \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Database \u0e21\u0e32\u0e40\u0e1b\u0e47\u0e19 airflow : \\c airflow ; \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e15\u0e32\u0e23\u0e32\u0e07 CREATE TABLE test ( id SERIAL NOT NULL PRIMARY KEY , customer_name VARCHAR ); \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e2a\u0e48\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 INSERT INTO test ( customer_name ) VALUES ( 'Jonathan Montgomery' ); \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 SELECT * FROM test ;","title":"Create a Database 'airflow`"},{"location":"docker1/volumes/#removing-postgresql","text":"\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e17\u0e33\u0e25\u0e32\u0e22 Container \u0e41\u0e25\u0e49\u0e27 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39\u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e22\u0e31\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e2b\u0e21 docker container rm -f mypostgres","title":"Removing PostgreSQL"},{"location":"docker1/volumes/#recreating-postgresql","text":"\u0e2a\u0e23\u0e49\u0e32\u0e07 Container \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Volume \u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e14\u0e34\u0e21 \u0e41\u0e25\u0e30 \u0e17\u0e14\u0e2a\u0e2d\u0e1a Query \u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e14\u0e34\u0e21\u0e22\u0e31\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e2b\u0e21 docker container run \\ --name mypostgres \\ -d -p 5432 :5432 \\ -e POSTGRES_PASSWORD = secretpassword \\ -v postgresdb:/var/lib/postgresql/data \\ postgres \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e08\u0e30\u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23 Init Database \u0e41\u0e25\u0e49\u0e27 Container \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e48\u0e32\u0e19 Data \u0e08\u0e32\u0e01 Volume \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 docker container logs mypostgres","title":"Recreating PostgreSQL"},{"location":"docker1/volumes/#example-2-using-data","text":"\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 mypostgres \u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container ls","title":"Example 2 - Using Data"},{"location":"docker1/volumes/#creating-management-ui","text":"docker run \\ --name cloudbeaver \\ --rm -it -p 8090 :8978 \\ dbeaver/cloudbeaver:latest --rm \u0e04\u0e37\u0e2d\u0e43\u0e2b\u0e49\u0e25\u0e1a Container \u0e2d\u0e2d\u0e01\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e33\u0e07\u0e32\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27","title":"Creating Management UI"},{"location":"docker1/volumes/#accessing-data","text":"\u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48 http://localhost:8090 \u0e01\u0e23\u0e2d\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Setup \u0e40\u0e0a\u0e48\u0e19 Admin Username & Password \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19 \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 PostgresDB Connection \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e32\u0e21\u0e23\u0e39\u0e1b \u0e2a\u0e32\u0e40\u0e2b\u0e15\u0e38\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e23\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 IP \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32 Default Bridge Network \u0e02\u0e2d\u0e07 Docker \u0e44\u0e21\u0e48\u0e21\u0e35 DNS \u0e01\u0e14\u0e1b\u0e38\u0e48\u0e21 Test Connection \u0e41\u0e25\u0e30 Save \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e27\u0e48\u0e32\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e19\u0e35\u0e49\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48","title":"Accessing Data"},{"location":"docker1/volumes/#bind-mounts","text":"Bind Mounts \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 Map local files \u0e2b\u0e23\u0e37\u0e2d folders \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e19 Container \u0e21\u0e35\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35 \u0e1e\u0e31\u0e12\u0e19\u0e32\u0e0b\u0e2d\u0e1f\u0e15\u0e4c\u0e41\u0e27\u0e23\u0e4c \u0e42\u0e14\u0e22\u0e43\u0e2b\u0e49 Source Code \u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e41\u0e15\u0e48\u0e43\u0e2b\u0e49\u0e2a\u0e34\u0e17\u0e18\u0e34 Container \u0e2d\u0e48\u0e32\u0e19 \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e2d\u0e07 Container \u0e1c\u0e48\u0e32\u0e19 File Bind Mounts \u0e43\u0e0a\u0e49 Flag -v \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19","title":"Bind Mounts"},{"location":"docker1/volumes/#example-3-nginx-bind-mounts","text":"\u0e17\u0e33\u0e01\u0e32\u0e23 Bind Mount Folder \u0e44\u0e1f\u0e25\u0e4c HTML \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 Container NGINX \u0e19\u0e33\u0e44\u0e1b\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25","title":"Example 3 - Nginx Bind Mounts"},{"location":"docker1/volumes/#bind-mounting-nginx","text":"\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Folder nginx-bind \u0e41\u0e25\u0e30 cd nginx-bind \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker container run \\ --name = mywebserver \\ -d -p 8080 :80 \\ -v $( pwd ) :/usr/share/nginx/html \\ nginx $(pwd) \u0e04\u0e37\u0e2d Print Working Directory","title":"Bind Mounting NGINX"},{"location":"docker1/volumes/#modifying-html","text":"\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c HTML \u0e40\u0e0b\u0e1f \u0e41\u0e25\u0e30 \u0e17\u0e14\u0e2a\u0e2d\u0e1a Refresh \u0e17\u0e35\u0e48 Browser","title":"Modifying HTML"},{"location":"docker2/compose/","text":"Docker Compose Docker Compose \u0e04\u0e37\u0e2d Tool \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Define \u0e41\u0e25\u0e30 Run Applications \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e2b\u0e25\u0e32\u0e22 Containers \u0e40\u0e0a\u0e48\u0e19 Wordpress App Suite \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35 Wordpress \u0e41\u0e25\u0e30 Database Compose File \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Define Multi-container Applications \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c YAML \u0e0a\u0e37\u0e48\u0e2d docker-compose.yml (\u0e2b\u0e23\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e41\u0e15\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e23\u0e30\u0e1a\u0e38\u0e0a\u0e37\u0e48\u0e2d\u0e15\u0e2d\u0e19\u0e23\u0e31\u0e19) \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48\u0e19\u0e34\u0e22\u0e32\u0e21 Containers \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e23\u0e31\u0e19\u0e25\u0e07\u0e44\u0e1b\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c Compose File \u0e21\u0e35\u0e2b\u0e25\u0e32\u0e22\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19 \u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a Docker Engine \u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19 \u0e41\u0e19\u0e30\u0e19\u0e33\u0e43\u0e2b\u0e49\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e15\u0e31\u0e49\u0e07\u0e41\u0e15\u0e48 \u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19 2 \u0e02\u0e36\u0e49\u0e19\u0e44\u0e1b \u0e14\u0e39\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48 Structure Compose file \u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e0a\u0e34\u0e49\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19: version: <compose_file_version> services: <service_name>: <container_spec> <service_name>: <container_spec> ... \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Volumes \u0e2b\u0e23\u0e37\u0e2d User Defined Networks \u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35 Section volumes \u0e41\u0e25\u0e30 networks \u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e43\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 Example 1 - Wordpress App Wordpress Architecture Compose Definition \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 docker-tutorial-2/wordpress/docker-compose.yml version: \"3\" services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: wordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest volumes: - wordpress_data:/var/www/html ports: - \"8088:80\" restart: always environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress volumes: db_data: {} wordpress_data: {} Start Compose docker compose up -d \u0e42\u0e14\u0e22 Default \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e23\u0e30\u0e1a\u0e38\u0e0a\u0e37\u0e48\u0e2d Network \u0e15\u0e31\u0e27 Compose \u0e08\u0e30\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e40\u0e1b\u0e47\u0e19 foldername_default \u0e40\u0e0a\u0e48\u0e19 \u0e16\u0e49\u0e32\u0e44\u0e1f\u0e25\u0e4c docker-compose.yml \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Folder wordpress \u0e0a\u0e37\u0e48\u0e2d Network \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 wordpress_default \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49 Subnet Default \u0e2b\u0e23\u0e37\u0e2d\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e44\u0e27\u0e49\u0e43\u0e19 Daemon \u0e41\u0e15\u0e48\u0e41\u0e23\u0e01 \u0e2b\u0e25\u0e31\u0e07\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e41\u0e25\u0e49\u0e27 \u0e23\u0e2d\u0e43\u0e2b\u0e49 Service Up \u0e2a\u0e31\u0e01\u0e1e\u0e31\u0e01\u0e41\u0e25\u0e49\u0e27\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a http://localhost:8088 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Wordpress \u0e15\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e08\u0e1a\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23 Stop Compose docker compose down \u0e2b\u0e32\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33\u0e25\u0e32\u0e22 Volumes \u0e14\u0e49\u0e27\u0e22 docker compose down -v Read Logs docker compose logs <service_name> \u0e40\u0e0a\u0e48\u0e19 docker compose logs db Execute Command docker compose exec <service_name> <command> \u0e40\u0e0a\u0e48\u0e19 docker compose exec wordpress bash Example 2 - Database Dev Environment DB Dev Architecture DB Dev Compose File version: '3' services: # PostgreSQL: SQL postgres: image: postgres restart: always environment: POSTGRES_DB: dev POSTGRES_USER: dev POSTGRES_PASSWORD: devpassword volumes: - postgres_data:/var/lib/postgresql/data cloudbeaver: image: dbeaver/cloudbeaver restart: always ports: - '9999:8978' volumes: - cloudbeaver_data:/opt/cloudbeaver/workspace # MongoDB: NoSQL mongo: image: mongo restart: always environment: MONGO_INITDB_ROOT_USERNAME: dev MONGO_INITDB_ROOT_PASSWORD: devpassword volumes: - mongo_data:/data/db adminmongo: image: mrvautin/adminmongo restart: always ports: - '1234:1234' environment: HOST: 0.0.0.0 # Redis: Key-value store redis: image: redis restart: always volumes: - redis_data:/data insight: image: redislabs/redisinsight restart: always ports: - '8001:8001' volumes: - insight_data:/db # Neo4j: Graph neo4j: image: neo4j restart: always ports: - '7474:7474' - '7687:7687' volumes: - neo4j_data:/data volumes: cloudbeaver_data: postgres_data: mongo_data: redis_data: insight_data: neo4j_data: Start DB Dev docker compose up -d Using DV Dev \u0e43\u0e19 Compose \u0e21\u0e35 Web UI \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database \u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e43\u0e2b\u0e49 \u0e0b\u0e36\u0e48\u0e07\u0e17\u0e35\u0e21\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b Support Database \u0e43\u0e19\u0e2d\u0e07\u0e04\u0e4c\u0e01\u0e23\u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e40\u0e1b\u0e47\u0e19 SQL 90%, NoSQL 9% \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e37\u0e2d Key-Value \u0e01\u0e31\u0e1a Graph \u0e04\u0e48\u0e2d\u0e19\u0e02\u0e49\u0e32\u0e07\u0e19\u0e49\u0e2d\u0e22 \u0e43\u0e19 Session \u0e16\u0e31\u0e14\u0e44\u0e1b\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e32\u0e25\u0e07\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e27\u0e34\u0e18\u0e35 CRUD DB \u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e0b\u0e31\u0e1e\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e07\u0e32\u0e19\u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15 \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Web UI Name Location Username Password Cloudbeaver http://localhost:9999 Set in App Set in App AdminMongo http://localhost:1234 None None Redis Insight http://localhost:8001 None None Neo4J UI http://localhost:7474 None None Default Database Credentials Name Connection Username Password PostgreSQL postgres:5432 dev devpassword MongoDB mongo:27017 dev devpassword Redis redis:6379 None None Neo4J neo4j:7687 neo4j neo4j \u0e40\u0e01\u0e47\u0e1a Compose \u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19 \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e28\u0e36\u0e01\u0e29\u0e32 Database \u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07 Example 3 - Apache Airflow Airflow \u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Deploy \u0e2b\u0e25\u0e32\u0e22\u0e41\u0e1a\u0e1a \u0e43\u0e19\u0e2d\u0e07\u0e04\u0e4c\u0e01\u0e23\u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49 Celery Executor \u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e08\u0e30\u0e22\u0e49\u0e32\u0e22\u0e44\u0e1b Kubernetes Executor Airflow Architecture Airflow Compose version: '3.7' # ====================================== AIRFLOW ENVIRONMENT VARIABLES ======================================= x-environment: &airflow_environment - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1 - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow - AIRFLOW__CORE__EXECUTOR=CeleryExecutor - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False - AIRFLOW__CORE__LOAD_EXAMPLES=False - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow - AIRFLOW__METRICS__STATSD_HOST=statsd_exporter - AIRFLOW__METRICS__STATSD_ON=True - AIRFLOW__METRICS__STATSD_PORT=9125 - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True x-airflow-image: &airflow_image apache/airflow:2.0.0-python3.8 # ====================================== /AIRFLOW ENVIRONMENT VARIABLES ====================================== services: postgres: image: postgres:12-alpine environment: - POSTGRES_USER=airflow - POSTGRES_PASSWORD=airflow - POSTGRES_DB=airflow ports: - \"5432:5432\" volumes: - postgres_airflow:/var/lib/postgresql/data init: image: *airflow_image depends_on: - postgres environment: *airflow_environment entrypoint: /bin/bash command: -c 'airflow db init && airflow users create --username admin --password admin --firstname Anonymous --lastname Admin --role Admin --email admin@example.org' webserver: image: *airflow_image restart: always depends_on: - postgres ports: - \"8080:8080\" volumes: - logs:/opt/airflow/logs environment: *airflow_environment command: webserver scheduler: image: *airflow_image restart: always depends_on: - postgres volumes: - logs:/opt/airflow/logs - ./dags:/opt/airflow/dags environment: *airflow_environment command: scheduler worker: image: *airflow_image restart: always depends_on: - scheduler volumes: - logs:/opt/airflow/logs - ./dags:/opt/airflow/dags environment: *airflow_environment command: celery worker flower: image: *airflow_image restart: always depends_on: - worker ports: - \"5555:5555\" environment: *airflow_environment command: celery flower statsd_exporter: image: prom/statsd-exporter:v0.18.0 restart: always volumes: - ./files/statsd_mapping.yml:/tmp/statsd_mapping.yml ports: - \"9102:9102\" - \"9125:9125/udp\" command: --statsd.mapping-config=/tmp/statsd_mapping.yml prometheus: image: prom/prometheus:v2.22.0 restart: always volumes: - ./files/prometheus.yml:/etc/prometheus/prometheus.yml ports: - \"9090:9090\" command: - --web.enable-admin-api - --web.enable-lifecycle - --config.file=/etc/prometheus/prometheus.yml - --storage.tsdb.path=/prometheus - --web.console.libraries=/usr/share/prometheus/console_libraries - --web.console.templates=/usr/share/prometheus/consoles grafana: image: grafana/grafana:7.2.1 restart: always ports: - \"3000:3000\" redis: image: redis:5-alpine redis_exporter: image: oliver006/redis_exporter:v1.5.2-alpine ports: - \"9121:9121\" command: --redis.addr=redis://redis:6379 volumes: postgres_airflow: logs: Start Apache Airflow docker compose up -d Scale Apache Airflow \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c docker-compose.yml \u0e43\u0e19 Service \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 Scale \u0e40\u0e0a\u0e48\u0e19 Scale worker \u0e14\u0e49\u0e27\u0e22 worker: image: *airflow_image restart: always deploy: replicas: 1 depends_on: - scheduler volumes: - logs:/opt/airflow/logs - ./dags:/opt/airflow/dags environment: *airflow_environment command: celery worker \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e43\u0e2b\u0e49 Issue \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker compose up -d \u0e2d\u0e35\u0e01\u0e04\u0e23\u0e31\u0e49\u0e07 Check Scheduler Logs \u0e43\u0e0a\u0e49\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e17\u0e35\u0e48 Airflow \u0e08\u0e31\u0e14\u0e04\u0e34\u0e27\u0e43\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25 Task \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs 100 \u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e25\u0e48\u0e32\u0e2a\u0e38\u0e14 docker compose logs --tail = 100 scheduler Check Webserver Logs \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e02\u0e2d\u0e07 Web UI docker compose logs --tail = 100 webserver Check Worker Logs \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Task docker compose logs --tail = 100 worker Check Monitoring System Queuing System Celery Flower Prometheus Metrics Prometheus UI Dashboard Grafana Test Python/Shell Code \u0e43\u0e19\u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35 \u0e2d\u0e32\u0e08\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e14\u0e2a\u0e2d\u0e1a Python/Shell Code \u0e43\u0e19 Worker \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e07\u0e48\u0e32\u0e22\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 SSH \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Worker \u0e41\u0e25\u0e30 Import Airflow \u0e21\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35 \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 Worker \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e48\u0e2d Database \u0e44\u0e14\u0e49\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48 \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e21\u0e35 Module \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2b\u0e23\u0e37\u0e2d\u0e22\u0e31\u0e07 \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 Worker \u0e21\u0e35 System Library \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2b\u0e23\u0e37\u0e2d\u0e22\u0e31\u0e07 \u0e40\u0e0a\u0e48\u0e19 Oracle Database Libary \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 Worker \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e48\u0e32\u0e19 Config Bind Mounts \u0e44\u0e14\u0e49\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07 python docker compose exec worker python bash docker compose exec worker bash Production Differences \u0e04\u0e27\u0e32\u0e21\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e01\u0e31\u0e1a Production Airflow \u0e04\u0e37\u0e2d \u0e43\u0e19 Production ... \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Common Python Modules \u0e41\u0e25\u0e30 Airflow Connection Plugins \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e17\u0e35\u0e48\u0e21\u0e35 \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Service \u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30 Refresh Kerberos Ticket \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e01\u0e31\u0e1a Cloudera Cluster \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Common Drivers \u0e40\u0e0a\u0e48\u0e19 Oracle, Hive JDBC, Impala JDBC, ODBC \u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19 Integrate \u0e01\u0e31\u0e1a Active Directory (\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e1c\u0e48\u0e32\u0e19 AD Group) \u0e41\u0e25\u0e30 Internal Email Server Integrate DAGs \u0e01\u0e31\u0e1a MinIO \u0e41\u0e25\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23 Backup & Cleanup \u0e23\u0e32\u0e22\u0e27\u0e31\u0e19 \u0e21\u0e35 Development Storage \u0e43\u0e2b\u0e49\u0e17\u0e14\u0e25\u0e2d\u0e07 PostgreSQL, MongoDB, MariaDB \u0e41\u0e25\u0e30 SFTP \u0e21\u0e35\u0e01\u0e32\u0e23 Optimize Scheduler & Core Configuration \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e41\u0e1a\u0e1a\u0e02\u0e19\u0e32\u0e19 \u0e43\u0e0a\u0e49 Scheduler 3 \u0e15\u0e31\u0e27 \u0e41\u0e25\u0e30 Workers 15 \u0e15\u0e31\u0e27 \u0e1a\u0e19 vCPU 92 Cores \u0e41\u0e25\u0e30 RAM 312 GB \u0e02\u0e49\u0e2d\u0e40\u0e2a\u0e35\u0e22\u0e02\u0e2d\u0e07 Production \u0e1b\u0e31\u0e08\u0e08\u0e38\u0e1a\u0e31\u0e19 \u0e44\u0e21\u0e48\u0e21\u0e35 Workload Isolation \u0e01\u0e32\u0e23 Scale \u0e22\u0e31\u0e07\u0e40\u0e1b\u0e47\u0e19 Manual \u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16 Auto Scale \u0e15\u0e32\u0e21 Workload \u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e0b\u0e47\u0e15 App-Level Logging System (Airflow \u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19 ELK, FluentD \u0e41\u0e15\u0e48\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e40\u0e0b\u0e47\u0e15) \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49 Integrate \u0e01\u0e31\u0e1a Git \u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32 DAG \u0e25\u0e33\u0e1a\u0e32\u0e01\u0e41\u0e25\u0e30\u0e44\u0e21\u0e48 Smooth \u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23 Backup Database \u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e21\u0e35\u0e41\u0e15\u0e48 App-Level \u0e44\u0e21\u0e48\u0e21\u0e35 VM-Level HA (High Availability)","title":"Compose"},{"location":"docker2/compose/#docker-compose","text":"Docker Compose \u0e04\u0e37\u0e2d Tool \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Define \u0e41\u0e25\u0e30 Run Applications \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e2b\u0e25\u0e32\u0e22 Containers \u0e40\u0e0a\u0e48\u0e19 Wordpress App Suite \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35 Wordpress \u0e41\u0e25\u0e30 Database","title":"Docker Compose"},{"location":"docker2/compose/#compose-file","text":"\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Define Multi-container Applications \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c YAML \u0e0a\u0e37\u0e48\u0e2d docker-compose.yml (\u0e2b\u0e23\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e41\u0e15\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e23\u0e30\u0e1a\u0e38\u0e0a\u0e37\u0e48\u0e2d\u0e15\u0e2d\u0e19\u0e23\u0e31\u0e19) \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48\u0e19\u0e34\u0e22\u0e32\u0e21 Containers \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e23\u0e31\u0e19\u0e25\u0e07\u0e44\u0e1b\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c Compose File \u0e21\u0e35\u0e2b\u0e25\u0e32\u0e22\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19 \u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a Docker Engine \u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19 \u0e41\u0e19\u0e30\u0e19\u0e33\u0e43\u0e2b\u0e49\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e15\u0e31\u0e49\u0e07\u0e41\u0e15\u0e48 \u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19 2 \u0e02\u0e36\u0e49\u0e19\u0e44\u0e1b \u0e14\u0e39\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48","title":"Compose File"},{"location":"docker2/compose/#structure","text":"Compose file \u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e0a\u0e34\u0e49\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19: version: <compose_file_version> services: <service_name>: <container_spec> <service_name>: <container_spec> ... \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Volumes \u0e2b\u0e23\u0e37\u0e2d User Defined Networks \u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35 Section volumes \u0e41\u0e25\u0e30 networks \u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e43\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07","title":"Structure"},{"location":"docker2/compose/#example-1-wordpress-app","text":"","title":"Example 1 - Wordpress App"},{"location":"docker2/compose/#wordpress-architecture","text":"","title":"Wordpress Architecture"},{"location":"docker2/compose/#compose-definition","text":"\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 docker-tutorial-2/wordpress/docker-compose.yml version: \"3\" services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: wordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest volumes: - wordpress_data:/var/www/html ports: - \"8088:80\" restart: always environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress volumes: db_data: {} wordpress_data: {}","title":"Compose Definition"},{"location":"docker2/compose/#start-compose","text":"docker compose up -d \u0e42\u0e14\u0e22 Default \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e23\u0e30\u0e1a\u0e38\u0e0a\u0e37\u0e48\u0e2d Network \u0e15\u0e31\u0e27 Compose \u0e08\u0e30\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e40\u0e1b\u0e47\u0e19 foldername_default \u0e40\u0e0a\u0e48\u0e19 \u0e16\u0e49\u0e32\u0e44\u0e1f\u0e25\u0e4c docker-compose.yml \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Folder wordpress \u0e0a\u0e37\u0e48\u0e2d Network \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 wordpress_default \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49 Subnet Default \u0e2b\u0e23\u0e37\u0e2d\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e44\u0e27\u0e49\u0e43\u0e19 Daemon \u0e41\u0e15\u0e48\u0e41\u0e23\u0e01 \u0e2b\u0e25\u0e31\u0e07\u0e23\u0e31\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e41\u0e25\u0e49\u0e27 \u0e23\u0e2d\u0e43\u0e2b\u0e49 Service Up \u0e2a\u0e31\u0e01\u0e1e\u0e31\u0e01\u0e41\u0e25\u0e49\u0e27\u0e40\u0e1b\u0e34\u0e14\u0e40\u0e27\u0e47\u0e1a http://localhost:8088 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Wordpress \u0e15\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e08\u0e1a\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23","title":"Start Compose"},{"location":"docker2/compose/#stop-compose","text":"docker compose down \u0e2b\u0e32\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33\u0e25\u0e32\u0e22 Volumes \u0e14\u0e49\u0e27\u0e22 docker compose down -v","title":"Stop Compose"},{"location":"docker2/compose/#read-logs","text":"docker compose logs <service_name> \u0e40\u0e0a\u0e48\u0e19 docker compose logs db","title":"Read Logs"},{"location":"docker2/compose/#execute-command","text":"docker compose exec <service_name> <command> \u0e40\u0e0a\u0e48\u0e19 docker compose exec wordpress bash","title":"Execute Command"},{"location":"docker2/compose/#example-2-database-dev-environment","text":"","title":"Example 2 - Database Dev Environment"},{"location":"docker2/compose/#db-dev-architecture","text":"","title":"DB Dev Architecture"},{"location":"docker2/compose/#db-dev-compose-file","text":"version: '3' services: # PostgreSQL: SQL postgres: image: postgres restart: always environment: POSTGRES_DB: dev POSTGRES_USER: dev POSTGRES_PASSWORD: devpassword volumes: - postgres_data:/var/lib/postgresql/data cloudbeaver: image: dbeaver/cloudbeaver restart: always ports: - '9999:8978' volumes: - cloudbeaver_data:/opt/cloudbeaver/workspace # MongoDB: NoSQL mongo: image: mongo restart: always environment: MONGO_INITDB_ROOT_USERNAME: dev MONGO_INITDB_ROOT_PASSWORD: devpassword volumes: - mongo_data:/data/db adminmongo: image: mrvautin/adminmongo restart: always ports: - '1234:1234' environment: HOST: 0.0.0.0 # Redis: Key-value store redis: image: redis restart: always volumes: - redis_data:/data insight: image: redislabs/redisinsight restart: always ports: - '8001:8001' volumes: - insight_data:/db # Neo4j: Graph neo4j: image: neo4j restart: always ports: - '7474:7474' - '7687:7687' volumes: - neo4j_data:/data volumes: cloudbeaver_data: postgres_data: mongo_data: redis_data: insight_data: neo4j_data:","title":"DB Dev Compose File"},{"location":"docker2/compose/#start-db-dev","text":"docker compose up -d","title":"Start DB Dev"},{"location":"docker2/compose/#using-dv-dev","text":"\u0e43\u0e19 Compose \u0e21\u0e35 Web UI \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Database \u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e43\u0e2b\u0e49 \u0e0b\u0e36\u0e48\u0e07\u0e17\u0e35\u0e21\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b Support Database \u0e43\u0e19\u0e2d\u0e07\u0e04\u0e4c\u0e01\u0e23\u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e40\u0e1b\u0e47\u0e19 SQL 90%, NoSQL 9% \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e37\u0e2d Key-Value \u0e01\u0e31\u0e1a Graph \u0e04\u0e48\u0e2d\u0e19\u0e02\u0e49\u0e32\u0e07\u0e19\u0e49\u0e2d\u0e22 \u0e43\u0e19 Session \u0e16\u0e31\u0e14\u0e44\u0e1b\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e32\u0e25\u0e07\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e27\u0e34\u0e18\u0e35 CRUD DB \u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e0b\u0e31\u0e1e\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e07\u0e32\u0e19\u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15 \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Web UI Name Location Username Password Cloudbeaver http://localhost:9999 Set in App Set in App AdminMongo http://localhost:1234 None None Redis Insight http://localhost:8001 None None Neo4J UI http://localhost:7474 None None Default Database Credentials Name Connection Username Password PostgreSQL postgres:5432 dev devpassword MongoDB mongo:27017 dev devpassword Redis redis:6379 None None Neo4J neo4j:7687 neo4j neo4j \u0e40\u0e01\u0e47\u0e1a Compose \u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19 \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e28\u0e36\u0e01\u0e29\u0e32 Database \u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07","title":"Using DV Dev"},{"location":"docker2/compose/#example-3-apache-airflow","text":"Airflow \u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Deploy \u0e2b\u0e25\u0e32\u0e22\u0e41\u0e1a\u0e1a \u0e43\u0e19\u0e2d\u0e07\u0e04\u0e4c\u0e01\u0e23\u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49 Celery Executor \u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e08\u0e30\u0e22\u0e49\u0e32\u0e22\u0e44\u0e1b Kubernetes Executor","title":"Example 3 - Apache Airflow"},{"location":"docker2/compose/#airflow-architecture","text":"","title":"Airflow Architecture"},{"location":"docker2/compose/#airflow-compose","text":"version: '3.7' # ====================================== AIRFLOW ENVIRONMENT VARIABLES ======================================= x-environment: &airflow_environment - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1 - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow - AIRFLOW__CORE__EXECUTOR=CeleryExecutor - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False - AIRFLOW__CORE__LOAD_EXAMPLES=False - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow - AIRFLOW__METRICS__STATSD_HOST=statsd_exporter - AIRFLOW__METRICS__STATSD_ON=True - AIRFLOW__METRICS__STATSD_PORT=9125 - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True x-airflow-image: &airflow_image apache/airflow:2.0.0-python3.8 # ====================================== /AIRFLOW ENVIRONMENT VARIABLES ====================================== services: postgres: image: postgres:12-alpine environment: - POSTGRES_USER=airflow - POSTGRES_PASSWORD=airflow - POSTGRES_DB=airflow ports: - \"5432:5432\" volumes: - postgres_airflow:/var/lib/postgresql/data init: image: *airflow_image depends_on: - postgres environment: *airflow_environment entrypoint: /bin/bash command: -c 'airflow db init && airflow users create --username admin --password admin --firstname Anonymous --lastname Admin --role Admin --email admin@example.org' webserver: image: *airflow_image restart: always depends_on: - postgres ports: - \"8080:8080\" volumes: - logs:/opt/airflow/logs environment: *airflow_environment command: webserver scheduler: image: *airflow_image restart: always depends_on: - postgres volumes: - logs:/opt/airflow/logs - ./dags:/opt/airflow/dags environment: *airflow_environment command: scheduler worker: image: *airflow_image restart: always depends_on: - scheduler volumes: - logs:/opt/airflow/logs - ./dags:/opt/airflow/dags environment: *airflow_environment command: celery worker flower: image: *airflow_image restart: always depends_on: - worker ports: - \"5555:5555\" environment: *airflow_environment command: celery flower statsd_exporter: image: prom/statsd-exporter:v0.18.0 restart: always volumes: - ./files/statsd_mapping.yml:/tmp/statsd_mapping.yml ports: - \"9102:9102\" - \"9125:9125/udp\" command: --statsd.mapping-config=/tmp/statsd_mapping.yml prometheus: image: prom/prometheus:v2.22.0 restart: always volumes: - ./files/prometheus.yml:/etc/prometheus/prometheus.yml ports: - \"9090:9090\" command: - --web.enable-admin-api - --web.enable-lifecycle - --config.file=/etc/prometheus/prometheus.yml - --storage.tsdb.path=/prometheus - --web.console.libraries=/usr/share/prometheus/console_libraries - --web.console.templates=/usr/share/prometheus/consoles grafana: image: grafana/grafana:7.2.1 restart: always ports: - \"3000:3000\" redis: image: redis:5-alpine redis_exporter: image: oliver006/redis_exporter:v1.5.2-alpine ports: - \"9121:9121\" command: --redis.addr=redis://redis:6379 volumes: postgres_airflow: logs:","title":"Airflow Compose"},{"location":"docker2/compose/#start-apache-airflow","text":"docker compose up -d","title":"Start Apache Airflow"},{"location":"docker2/compose/#scale-apache-airflow","text":"\u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c docker-compose.yml \u0e43\u0e19 Service \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 Scale \u0e40\u0e0a\u0e48\u0e19 Scale worker \u0e14\u0e49\u0e27\u0e22 worker: image: *airflow_image restart: always deploy: replicas: 1 depends_on: - scheduler volumes: - logs:/opt/airflow/logs - ./dags:/opt/airflow/dags environment: *airflow_environment command: celery worker \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e43\u0e2b\u0e49 Issue \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker compose up -d \u0e2d\u0e35\u0e01\u0e04\u0e23\u0e31\u0e49\u0e07","title":"Scale Apache Airflow"},{"location":"docker2/compose/#check-scheduler-logs","text":"\u0e43\u0e0a\u0e49\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e17\u0e35\u0e48 Airflow \u0e08\u0e31\u0e14\u0e04\u0e34\u0e27\u0e43\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25 Task \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs 100 \u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e25\u0e48\u0e32\u0e2a\u0e38\u0e14 docker compose logs --tail = 100 scheduler","title":"Check Scheduler Logs"},{"location":"docker2/compose/#check-webserver-logs","text":"\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Logs \u0e02\u0e2d\u0e07 Web UI docker compose logs --tail = 100 webserver","title":"Check Webserver Logs"},{"location":"docker2/compose/#check-worker-logs","text":"\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Task docker compose logs --tail = 100 worker","title":"Check Worker Logs"},{"location":"docker2/compose/#check-monitoring-system","text":"Queuing System Celery Flower Prometheus Metrics Prometheus UI Dashboard Grafana","title":"Check Monitoring System"},{"location":"docker2/compose/#test-pythonshell-code","text":"\u0e43\u0e19\u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35 \u0e2d\u0e32\u0e08\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e14\u0e2a\u0e2d\u0e1a Python/Shell Code \u0e43\u0e19 Worker \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e07\u0e48\u0e32\u0e22\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 SSH \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 Worker \u0e41\u0e25\u0e30 Import Airflow \u0e21\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35 \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 Worker \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e48\u0e2d Database \u0e44\u0e14\u0e49\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48 \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32\u0e21\u0e35 Module \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2b\u0e23\u0e37\u0e2d\u0e22\u0e31\u0e07 \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 Worker \u0e21\u0e35 System Library \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2b\u0e23\u0e37\u0e2d\u0e22\u0e31\u0e07 \u0e40\u0e0a\u0e48\u0e19 Oracle Database Libary \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e27\u0e48\u0e32 Worker \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e48\u0e32\u0e19 Config Bind Mounts \u0e44\u0e14\u0e49\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07 python docker compose exec worker python bash docker compose exec worker bash","title":"Test Python/Shell Code"},{"location":"docker2/compose/#production-differences","text":"\u0e04\u0e27\u0e32\u0e21\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e01\u0e31\u0e1a Production Airflow \u0e04\u0e37\u0e2d \u0e43\u0e19 Production ... \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Common Python Modules \u0e41\u0e25\u0e30 Airflow Connection Plugins \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e17\u0e35\u0e48\u0e21\u0e35 \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Service \u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30 Refresh Kerberos Ticket \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e01\u0e31\u0e1a Cloudera Cluster \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Common Drivers \u0e40\u0e0a\u0e48\u0e19 Oracle, Hive JDBC, Impala JDBC, ODBC \u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19 Integrate \u0e01\u0e31\u0e1a Active Directory (\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e1c\u0e48\u0e32\u0e19 AD Group) \u0e41\u0e25\u0e30 Internal Email Server Integrate DAGs \u0e01\u0e31\u0e1a MinIO \u0e41\u0e25\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23 Backup & Cleanup \u0e23\u0e32\u0e22\u0e27\u0e31\u0e19 \u0e21\u0e35 Development Storage \u0e43\u0e2b\u0e49\u0e17\u0e14\u0e25\u0e2d\u0e07 PostgreSQL, MongoDB, MariaDB \u0e41\u0e25\u0e30 SFTP \u0e21\u0e35\u0e01\u0e32\u0e23 Optimize Scheduler & Core Configuration \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e41\u0e1a\u0e1a\u0e02\u0e19\u0e32\u0e19 \u0e43\u0e0a\u0e49 Scheduler 3 \u0e15\u0e31\u0e27 \u0e41\u0e25\u0e30 Workers 15 \u0e15\u0e31\u0e27 \u0e1a\u0e19 vCPU 92 Cores \u0e41\u0e25\u0e30 RAM 312 GB \u0e02\u0e49\u0e2d\u0e40\u0e2a\u0e35\u0e22\u0e02\u0e2d\u0e07 Production \u0e1b\u0e31\u0e08\u0e08\u0e38\u0e1a\u0e31\u0e19 \u0e44\u0e21\u0e48\u0e21\u0e35 Workload Isolation \u0e01\u0e32\u0e23 Scale \u0e22\u0e31\u0e07\u0e40\u0e1b\u0e47\u0e19 Manual \u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16 Auto Scale \u0e15\u0e32\u0e21 Workload \u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e0b\u0e47\u0e15 App-Level Logging System (Airflow \u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19 ELK, FluentD \u0e41\u0e15\u0e48\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e40\u0e0b\u0e47\u0e15) \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49 Integrate \u0e01\u0e31\u0e1a Git \u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32 DAG \u0e25\u0e33\u0e1a\u0e32\u0e01\u0e41\u0e25\u0e30\u0e44\u0e21\u0e48 Smooth \u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23 Backup Database \u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 \u0e21\u0e35\u0e41\u0e15\u0e48 App-Level \u0e44\u0e21\u0e48\u0e21\u0e35 VM-Level HA (High Availability)","title":"Production Differences"},{"location":"docker2/meacloud/","text":"MEA Cloud Environment \u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker \u0e1a\u0e19 MEA Virtual Machines \u0e17\u0e48\u0e32\u0e08\u0e30\u0e40\u0e22\u0e2d\u0e30\u0e01\u0e27\u0e48\u0e32\u0e25\u0e07\u0e40\u0e2d\u0e07\u0e1a\u0e19 Linux \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e15\u0e31\u0e27\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e08\u0e33\u0e01\u0e31\u0e14\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 \u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14 User \u0e15\u0e2d\u0e19 Provision VM, Proxy \u0e41\u0e25\u0e30 Partition \u0e19\u0e34\u0e14\u0e2b\u0e19\u0e48\u0e2d\u0e22 \u0e2d\u0e22\u0e48\u0e32\u0e40\u0e25\u0e37\u0e2d\u0e01 Windows \u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker Desktop \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e04\u0e34\u0e14 License \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Enterprise \u0e17\u0e35\u0e48\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 250 \u0e04\u0e19 \u0e07\u0e32\u0e19\u0e2d\u0e32\u0e08\u0e08\u0e30\u0e40\u0e02\u0e49\u0e32\u0e44\u0e14\u0e49 Request a VM \u0e02\u0e2d Virtual Machine \u0e08\u0e32\u0e01\u0e23\u0e30\u0e1a\u0e1a vRealize Automation \u0e43\u0e0a\u0e49 Username & Password \u0e08\u0e32\u0e01\u0e23\u0e30\u0e1a\u0e1a AD \u0e42\u0e14\u0e22 Spec \u0e02\u0e31\u0e49\u0e19\u0e15\u0e48\u0e33\u0e04\u0e27\u0e23\u0e08\u0e30 Development Machine OS: Ubuntu 18.04 LTS (Ubuntu 20.04 \u0e44\u0e21\u0e48\u0e21\u0e35\u0e43\u0e2b\u0e49\u0e40\u0e25\u0e37\u0e2d\u0e01 \u0e41\u0e25\u0e30 \u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e01\u0e31\u0e1a Docker Engine) vCPU: 2 RAM: 4 GB HDD1: 100 GB (Fixed) HDD2: 500 GB Network: \u0e16\u0e49\u0e32\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07 Service \u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e27\u0e07 Customer Service \u0e16\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e2d\u0e07\u0e40\u0e25\u0e37\u0e2d\u0e01 Back Office \u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22 DPD \u0e40\u0e0a\u0e48\u0e19 DPD-Docker-1 \u0e43\u0e2a\u0e48\u0e40\u0e2b\u0e15\u0e38\u0e1c\u0e25\u0e01\u0e32\u0e23\u0e02\u0e2d\u0e44\u0e1b\u0e14\u0e49\u0e27\u0e22\u0e27\u0e48\u0e32 \u0e40\u0e2d\u0e32\u0e21\u0e32\u0e17\u0e33\u0e2d\u0e30\u0e44\u0e23 Update OS & Create User \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01 Cloud Admin \u0e2d\u0e19\u0e38\u0e21\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 VM \u0e41\u0e25\u0e49\u0e27 \u0e40\u0e0a\u0e47\u0e04 Email \u0e08\u0e30\u0e44\u0e14\u0e49 IP \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 \u0e41\u0e25\u0e30 Username + Password \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Secure Shell \u0e17\u0e33\u0e01\u0e32\u0e23 Secure Shell \u0e40\u0e02\u0e49\u0e32\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 PowerShell: ssh root@ip_address \u0e17\u0e33\u0e01\u0e32\u0e23\u0e2d\u0e31\u0e1e\u0e40\u0e14\u0e17 Repository \u0e41\u0e25\u0e30 \u0e2d\u0e31\u0e1e\u0e40\u0e01\u0e23\u0e14\u0e23\u0e30\u0e1a\u0e1a apt update && apt upgrade -y \u0e2a\u0e23\u0e49\u0e32\u0e07 Non-root user \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 adduser <username> Add User \u0e40\u0e02\u0e49\u0e32\u0e01\u0e25\u0e38\u0e48\u0e21 sudo \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e21\u0e35\u0e2a\u0e34\u0e17\u0e18\u0e34 Administrator \u0e1c\u0e48\u0e32\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 sudo usermod -aG sudo <username> Setup SSH Key (Optional) \u0e17\u0e33\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Laptop/PC \u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48\u0e1a\u0e19 VM \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49 SSH Log in \u0e41\u0e1a\u0e1a\u0e43\u0e0a\u0e49 Password \u0e04\u0e48\u0e2d\u0e19\u0e02\u0e49\u0e32\u0e07\u0e08\u0e30\u0e44\u0e21\u0e48 Secure \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32 Password \u0e0a\u0e2d\u0e1a\u0e2b\u0e25\u0e38\u0e14 \u0e27\u0e34\u0e18\u0e35\u0e19\u0e36\u0e07\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e41\u0e01\u0e49\u0e04\u0e37\u0e2d\u0e43\u0e0a\u0e49 SSH Passwordless Authentication \u0e1c\u0e48\u0e32\u0e19 Keys \u0e41\u0e17\u0e19 \u0e43\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e08\u0e30\u0e44\u0e21\u0e48\u0e44\u0e1b Disable password \u0e2d\u0e2d\u0e01 \u0e40\u0e1c\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07\u0e41\u0e15\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Production \u0e08\u0e23\u0e34\u0e07\u0e46 \u0e04\u0e27\u0e23\u0e08\u0e30\u0e1e\u0e34\u0e08\u0e32\u0e23\u0e13\u0e32\u0e40\u0e2d\u0e32 Password \u0e2d\u0e2d\u0e01 \u0e41\u0e25\u0e30 \u0e43\u0e0a\u0e49 Keys \u0e17\u0e14\u0e41\u0e17\u0e19 \u0e2a\u0e23\u0e49\u0e32\u0e07 SSH Key \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Email \u0e40\u0e1b\u0e47\u0e19 Label \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 (\u0e43\u0e0a\u0e49 Default \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e40\u0e25\u0e22\u0e01\u0e47\u0e44\u0e14\u0e49) ssh-keygen -t ed25519 -C \"your_email@example.com\" ( Windows ) Copy SSH Key \u0e44\u0e1b\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 VM \u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35 \u0e2d\u0e32\u0e08\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07 Login \u0e14\u0e49\u0e27\u0e22 root \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c .ssh/authorized_keys \u0e23\u0e2d\u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19 type $env:USERPROFILE \\. ssh \\ id_ed25519 . pub | ssh < username >@< ip_address > \"cat >> .ssh/authorized_keys\" ( Mac & Linux ) Copy SSH Key Mac \u0e25\u0e07 Tool \u0e01\u0e48\u0e2d\u0e19 \u0e16\u0e49\u0e32\u0e43\u0e0a\u0e49 HomeBrew brew install ssh-copy-id ssh-copy-id <username>@<ip_address> \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 ssh <username>@<ip_address> \u0e40\u0e02\u0e49\u0e32 SSH \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e2a\u0e48 Password \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e16\u0e31\u0e14\u0e44\u0e1b\u0e04\u0e37\u0e2d Disable Password \u0e17\u0e34\u0e49\u0e07 \u0e16\u0e49\u0e32\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e17\u0e35\u0e48\u0e08\u0e30 Deploy Production 100% \u0e41\u0e25\u0e49\u0e27 \u0e17\u0e33\u0e15\u0e32\u0e21\u0e19\u0e35\u0e49 \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e0b\u0e47\u0e15\u0e04\u0e48\u0e32\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27\u0e43\u0e2b\u0e49 Restart \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 sudo reboot \u0e41\u0e25\u0e30 Log In \u0e14\u0e49\u0e27\u0e22 username \u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e15\u0e48\u0e2d\u0e44\u0e1b (\u0e44\u0e21\u0e48\u0e41\u0e19\u0e30\u0e19\u0e33\u0e43\u0e2b\u0e49\u0e43\u0e0a\u0e49 root) Install Docker \u0e01\u0e48\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker \u0e15\u0e49\u0e2d\u0e07\u0e40\u0e0b\u0e47\u0e15 Proxy \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a curl \u0e01\u0e48\u0e2d\u0e19 \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c ~/.bashrc \u0e42\u0e14\u0e22\u0e40\u0e1e\u0e34\u0e48\u0e21 export http_proxy = \"http://proxy.mea.or.th:9090\" export https_proxy = \"http://proxy.mea.or.th:9090\" export no_proxy = \"localhost,172.16.0.0/16,172.17.0.0/16,192.169.254.0/24\" \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Package \u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19 \u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e44\u0e21\u0e48\u0e04\u0e27\u0e23\u0e25\u0e07 Docker \u0e1c\u0e48\u0e32\u0e19 snap \u0e15\u0e32\u0e21\u0e04\u0e33\u0e41\u0e19\u0e30\u0e19\u0e33\u0e02\u0e2d\u0e07 Ubuntu \u0e40\u0e1e\u0e23\u0e32\u0e30 Bug \u0e40\u0e22\u0e2d\u0e30 \u0e41\u0e25\u0e30 Docker \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e0b\u0e31\u0e1e\u0e1e\u0e2d\u0e23\u0e4c\u0e15 \u0e04\u0e27\u0e23\u0e2b\u0e25\u0e35\u0e01\u0e40\u0e25\u0e35\u0e48\u0e22\u0e07\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e22\u0e2d\u0e30 sudo apt update sudo apt install -y ca-certificates curl gnupg lsb-release \u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14 Docker's GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \u0e40\u0e1e\u0e34\u0e48\u0e21 Apt Repository \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Docker: echo \\ \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null \u0e25\u0e07 Docker sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io \u0e25\u0e07 Docker Compose v2 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a User \u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07: DOCKER_CONFIG = ${ DOCKER_CONFIG :- $HOME /.docker } mkdir -p $DOCKER_CONFIG /cli-plugins curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG /cli-plugins/docker-compose \u0e40\u0e1e\u0e34\u0e48\u0e21 Executable Permission: chmod +x $DOCKER_CONFIG /cli-plugins/docker-compose Add User to Group Docker \u0e40\u0e1e\u0e34\u0e48\u0e21 User \u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07\u0e40\u0e02\u0e49\u0e32 Group docker \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e15\u0e2d\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 sudo \u0e17\u0e38\u0e01\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 sudo usermod -aG docker <username> Start Docker & Enable Startup Service on Boot Start Docker daemon: sudo systemctl start docker \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e43\u0e2b\u0e49 Docker \u0e23\u0e31\u0e19\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e15\u0e2d\u0e19 Reboot: sudo systemctl enable docker \u0e43\u0e2b\u0e49 Reboot 1 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e41\u0e25\u0e30 \u0e25\u0e2d\u0e07\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker version docker compose version \u0e16\u0e36\u0e07\u0e08\u0e38\u0e14\u0e19\u0e35\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e08\u0e30\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16 Pull \u0e2b\u0e23\u0e37\u0e2d Run Image \u0e44\u0e14\u0e49 \u0e15\u0e49\u0e2d\u0e07\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 MEA Proxy \u0e01\u0e48\u0e2d\u0e19 Configure docker0 Network \u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e25\u0e07\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e43\u0e2b\u0e21\u0e48\u0e46 Docker \u0e08\u0e30 Detect Network \u0e20\u0e32\u0e22\u0e43\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32 \u0e42\u0e14\u0e22 Network docker0 \u0e08\u0e30\u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01 172.17.0.0/16 \u0e16\u0e49\u0e32 Network \u0e0a\u0e19\u0e01\u0e31\u0e1a Subnet \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 VM Docker \u0e08\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21 Subnet \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e40\u0e1b\u0e47\u0e19 172.18.0.0/16 \u0e15\u0e2d\u0e19\u0e2a\u0e23\u0e49\u0e32\u0e07 VM \u0e08\u0e32\u0e01 vRealize \u0e16\u0e49\u0e32\u0e40\u0e23\u0e32\u0e40\u0e25\u0e37\u0e2d\u0e01 VM \u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e27\u0e07 172.16.0.0/16 Docker \u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07 docker0 network \u0e43\u0e2b\u0e49\u0e17\u0e35\u0e48 172.17.0.0/16 \u0e0b\u0e36\u0e48\u0e07 \u0e0a\u0e19\u0e01\u0e31\u0e1a IP Address \u0e02\u0e2d\u0e07 Cloud \u0e01\u0e1f\u0e19. \u0e17\u0e31\u0e49\u0e07\u0e27\u0e07 \u0e17\u0e33\u0e43\u0e2b\u0e49 \u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07 Service \u0e2b\u0e23\u0e37\u0e2d VM \u0e2d\u0e37\u0e48\u0e19\u0e46\u0e43\u0e19\u0e27\u0e07 172.17.0.0/16 \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a IP Address Space \u0e02\u0e2d\u0e07 Docker 0 \u0e16\u0e49\u0e32 docker0 \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e27\u0e07 172.17.0.0/16 \u0e43\u0e2b\u0e49\u0e04\u0e2d\u0e19\u0e1f\u0e34\u0e01\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e22\u0e49\u0e32\u0e22 docker0 \u0e44\u0e1b\u0e17\u0e35\u0e48\u0e2d\u0e37\u0e48\u0e19 ip addr \u0e22\u0e49\u0e32\u0e22 Subnet \u0e02\u0e2d\u0e07 docker0 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48 /etc/docker/daemon.json \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48 { \"default-address-pools\" : [{ \"base\" : \"172.26.0.0/16\" , \"size\" : 24 }] } 172.26.0.0/16 \u0e43\u0e2a\u0e48\u0e2d\u0e30\u0e44\u0e23\u0e01\u0e47\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0a\u0e19\u0e01\u0e31\u0e1a Private IP \u0e20\u0e32\u0e22\u0e43\u0e19 \u0e41\u0e01\u0e49\u0e44\u0e02\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 \u0e43\u0e2b\u0e49 Restart Docker Daemon: sudo systemctl restart docker Configure Proxy for Docker Daemon \u0e41\u0e01\u0e49\u0e44\u0e02\u0e43\u0e2b\u0e49 Docker Daemon \u0e43\u0e0a\u0e49 MEA Proxy \u0e42\u0e14\u0e22\u0e44\u0e1b\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48 /etc/systemd/system/docker.service.d/proxy.conf [ Service ] Environment = \"HTTP_PROXY=http://proxy.mea.or.th:9090\" Environment = \"HTTPS_PROXY=http://proxy.mea.or.th:9090\" Environment = \"NO_PROXY=localhost,172.17.0.0/16,172.16.0.0/16,192.169.254.0/24\" \u0e40\u0e0b\u0e1f\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e30 Restart Docker Daemon \u0e43\u0e2b\u0e21\u0e48 sudo systemctl restart docker \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e2a\u0e16\u0e32\u0e19\u0e30 Docker daemon \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 Active \u0e01\u0e48\u0e2d\u0e19\u0e17\u0e33\u0e15\u0e48\u0e2d \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07: systemctl status docker \u0e17\u0e14\u0e2a\u0e2d\u0e1a Pull Image: \u0e16\u0e36\u0e07\u0e08\u0e38\u0e14\u0e19\u0e35\u0e49 \u0e04\u0e27\u0e23\u0e08\u0e30 Pull Image \u0e44\u0e14\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e41\u0e15\u0e48 Process \u0e43\u0e19 Container \u0e22\u0e31\u0e07\u0e08\u0e30\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e2d\u0e01 Internet \u0e44\u0e14\u0e49 docker container run hello-world Configure Proxies for Container \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 Container \u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e1c\u0e48\u0e32\u0e19 Proxy \u0e41\u0e25\u0e30 \u0e2d\u0e2d\u0e01 Internet \u0e44\u0e14\u0e49\u0e15\u0e49\u0e2d\u0e07\u0e04\u0e2d\u0e19\u0e1f\u0e34\u0e01\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21 \u0e42\u0e14\u0e22\u0e44\u0e1b\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48 ~/.docker/config.json \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48 { \"proxies\" : { \"default\" : { \"httpProxy\" : \"http://proxy.mea.or.th:9090\" , \"httpsProxy\" : \"http://proxy.mea.or.th:9090\" , \"noProxy\" : \"localhost,172.17.0.0/16,172.16.0.0/16,192.169.254.0/24\" } } } \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23 Run Container \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e2d\u0e2d\u0e01 Internet: docker container run --rm ubuntu apt-get update \u0e16\u0e49\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e2d\u0e01 Internet \u0e44\u0e14\u0e49\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e01\u0e32\u0e23 Update Apt Repo \u0e1c\u0e48\u0e32\u0e19\u0e17\u0e38\u0e01\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 Configure Docker Data Directory \u0e2a\u0e33\u0e04\u0e31\u0e0d HDD1 \u0e02\u0e2d\u0e07 VM \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e21\u0e32\u0e08\u0e32\u0e01\u0e23\u0e30\u0e1a\u0e1a vRealize \u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e17\u0e35\u0e48 100GB \u0e0b\u0e36\u0e48\u0e07\u0e04\u0e48\u0e2d\u0e19\u0e02\u0e49\u0e32\u0e07\u0e19\u0e49\u0e2d\u0e22\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e40\u0e01\u0e47\u0e1a Docker Images \u0e04\u0e27\u0e23\u0e08\u0e30\u0e22\u0e49\u0e32\u0e22 Data Directory \u0e43\u0e2b\u0e49\u0e44\u0e1b\u0e2d\u0e22\u0e39\u0e48 HDD2 \u0e0b\u0e36\u0e48\u0e07 VMWare \u0e08\u0e30 Mount \u0e44\u0e27\u0e49\u0e17\u0e35\u0e48 /vol1 \u0e2b\u0e22\u0e38\u0e14\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 Docker: sudo systemctl stop docker \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c /etc/docker/daemon.json \u0e42\u0e14\u0e22\u0e40\u0e1e\u0e34\u0e48\u0e21 Key-Value \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \"data-root\" : \"/vol1/docker\" Copy Docker Data \u0e40\u0e14\u0e34\u0e21\u0e44\u0e1b\u0e17\u0e35\u0e48\u0e43\u0e2b\u0e21\u0e48 sudo rsync -aP /var/lib/docker /vol1/docker Rename \u0e0a\u0e37\u0e48\u0e2d Directory \u0e40\u0e14\u0e34\u0e21 sudo mv /var/lib/docker /var/lib/docker.bak Start Docker Daemon sudo systemctl start docker \u0e16\u0e49\u0e32\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e15\u0e32\u0e21\u0e1b\u0e01\u0e15\u0e34\u0e41\u0e25\u0e49\u0e27 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e25\u0e1a /var/lib/docker.bak \u0e44\u0e14\u0e49 Test & Play \u0e16\u0e36\u0e07\u0e08\u0e38\u0e14\u0e19\u0e35\u0e49 Docker \u0e04\u0e27\u0e23\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19\u0e41\u0e25\u0e49\u0e27 \u0e42\u0e14\u0e22\u0e21\u0e35\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a \u0e41\u0e25\u0e30 Troubleshoot \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e15\u0e32\u0e21\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23 Pull Image docker image pull nginx \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e43\u0e2b\u0e49 Container \u0e2d\u0e2d\u0e01 Internet docker container run --rm ubuntu apt-get update \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e40\u0e0a\u0e47\u0e04 IP \u0e02\u0e2d\u0e07 Container (\u0e44\u0e21\u0e48\u0e04\u0e27\u0e23\u0e08\u0e30\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e1a IP \u0e27\u0e07 Cloud) docker container run --rm centos ip addr \u0e16\u0e49\u0e32\u0e40\u0e0b\u0e47\u0e15\u0e22\u0e49\u0e32\u0e22 Subnet \u0e15\u0e32\u0e21\u0e02\u0e49\u0e32\u0e07\u0e1a\u0e19 \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 IP Address \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Subnet 172.26.0.0/16 \u0e01\u0e32\u0e23\u0e02\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e1e\u0e2d\u0e23\u0e4c\u0e15 \u0e42\u0e14\u0e22 Default \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 VM \u0e08\u0e30\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e2d\u0e30\u0e44\u0e23\u0e01\u0e31\u0e1a VM/Service \u0e20\u0e32\u0e22\u0e43\u0e19 Cloud \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 \u0e15\u0e49\u0e2d\u0e07\u0e02\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e17\u0e35\u0e48 \u0e04\u0e38\u0e13\u0e1a\u0e35\u0e21 \u0e18\u0e35\u0e23\u0e27\u0e34\u0e17\u0e22\u0e4c \u0e01\u0e17\u0e02. \u0e1d\u0e27\u0e17. \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14 Source Destination Port + Protocol (TCP/UDP) Direction (In, Out, In-Out)","title":"MEA Cloud"},{"location":"docker2/meacloud/#mea-cloud-environment","text":"","title":"MEA Cloud Environment"},{"location":"docker2/meacloud/#docker-mea-virtual-machines","text":"\u0e17\u0e48\u0e32\u0e08\u0e30\u0e40\u0e22\u0e2d\u0e30\u0e01\u0e27\u0e48\u0e32\u0e25\u0e07\u0e40\u0e2d\u0e07\u0e1a\u0e19 Linux \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e15\u0e31\u0e27\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e08\u0e33\u0e01\u0e31\u0e14\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 \u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14 User \u0e15\u0e2d\u0e19 Provision VM, Proxy \u0e41\u0e25\u0e30 Partition \u0e19\u0e34\u0e14\u0e2b\u0e19\u0e48\u0e2d\u0e22 \u0e2d\u0e22\u0e48\u0e32\u0e40\u0e25\u0e37\u0e2d\u0e01 Windows \u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker Desktop \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e04\u0e34\u0e14 License \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Enterprise \u0e17\u0e35\u0e48\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 250 \u0e04\u0e19 \u0e07\u0e32\u0e19\u0e2d\u0e32\u0e08\u0e08\u0e30\u0e40\u0e02\u0e49\u0e32\u0e44\u0e14\u0e49","title":"\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker \u0e1a\u0e19 MEA Virtual Machines"},{"location":"docker2/meacloud/#request-a-vm","text":"\u0e02\u0e2d Virtual Machine \u0e08\u0e32\u0e01\u0e23\u0e30\u0e1a\u0e1a vRealize Automation \u0e43\u0e0a\u0e49 Username & Password \u0e08\u0e32\u0e01\u0e23\u0e30\u0e1a\u0e1a AD \u0e42\u0e14\u0e22 Spec \u0e02\u0e31\u0e49\u0e19\u0e15\u0e48\u0e33\u0e04\u0e27\u0e23\u0e08\u0e30 Development Machine OS: Ubuntu 18.04 LTS (Ubuntu 20.04 \u0e44\u0e21\u0e48\u0e21\u0e35\u0e43\u0e2b\u0e49\u0e40\u0e25\u0e37\u0e2d\u0e01 \u0e41\u0e25\u0e30 \u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e01\u0e31\u0e1a Docker Engine) vCPU: 2 RAM: 4 GB HDD1: 100 GB (Fixed) HDD2: 500 GB Network: \u0e16\u0e49\u0e32\u0e23\u0e31\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07 Service \u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e27\u0e07 Customer Service \u0e16\u0e49\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e2d\u0e07\u0e40\u0e25\u0e37\u0e2d\u0e01 Back Office \u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22 DPD \u0e40\u0e0a\u0e48\u0e19 DPD-Docker-1 \u0e43\u0e2a\u0e48\u0e40\u0e2b\u0e15\u0e38\u0e1c\u0e25\u0e01\u0e32\u0e23\u0e02\u0e2d\u0e44\u0e1b\u0e14\u0e49\u0e27\u0e22\u0e27\u0e48\u0e32 \u0e40\u0e2d\u0e32\u0e21\u0e32\u0e17\u0e33\u0e2d\u0e30\u0e44\u0e23","title":"Request a VM"},{"location":"docker2/meacloud/#update-os-create-user","text":"\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01 Cloud Admin \u0e2d\u0e19\u0e38\u0e21\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 VM \u0e41\u0e25\u0e49\u0e27 \u0e40\u0e0a\u0e47\u0e04 Email \u0e08\u0e30\u0e44\u0e14\u0e49 IP \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 \u0e41\u0e25\u0e30 Username + Password \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Secure Shell \u0e17\u0e33\u0e01\u0e32\u0e23 Secure Shell \u0e40\u0e02\u0e49\u0e32\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 PowerShell: ssh root@ip_address \u0e17\u0e33\u0e01\u0e32\u0e23\u0e2d\u0e31\u0e1e\u0e40\u0e14\u0e17 Repository \u0e41\u0e25\u0e30 \u0e2d\u0e31\u0e1e\u0e40\u0e01\u0e23\u0e14\u0e23\u0e30\u0e1a\u0e1a apt update && apt upgrade -y \u0e2a\u0e23\u0e49\u0e32\u0e07 Non-root user \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 adduser <username> Add User \u0e40\u0e02\u0e49\u0e32\u0e01\u0e25\u0e38\u0e48\u0e21 sudo \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e21\u0e35\u0e2a\u0e34\u0e17\u0e18\u0e34 Administrator \u0e1c\u0e48\u0e32\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 sudo usermod -aG sudo <username>","title":"Update OS &amp; Create User"},{"location":"docker2/meacloud/#setup-ssh-key-optional","text":"\u0e17\u0e33\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Laptop/PC \u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48\u0e1a\u0e19 VM \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49 SSH Log in \u0e41\u0e1a\u0e1a\u0e43\u0e0a\u0e49 Password \u0e04\u0e48\u0e2d\u0e19\u0e02\u0e49\u0e32\u0e07\u0e08\u0e30\u0e44\u0e21\u0e48 Secure \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e27\u0e48\u0e32 Password \u0e0a\u0e2d\u0e1a\u0e2b\u0e25\u0e38\u0e14 \u0e27\u0e34\u0e18\u0e35\u0e19\u0e36\u0e07\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e41\u0e01\u0e49\u0e04\u0e37\u0e2d\u0e43\u0e0a\u0e49 SSH Passwordless Authentication \u0e1c\u0e48\u0e32\u0e19 Keys \u0e41\u0e17\u0e19 \u0e43\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e08\u0e30\u0e44\u0e21\u0e48\u0e44\u0e1b Disable password \u0e2d\u0e2d\u0e01 \u0e40\u0e1c\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07\u0e41\u0e15\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Production \u0e08\u0e23\u0e34\u0e07\u0e46 \u0e04\u0e27\u0e23\u0e08\u0e30\u0e1e\u0e34\u0e08\u0e32\u0e23\u0e13\u0e32\u0e40\u0e2d\u0e32 Password \u0e2d\u0e2d\u0e01 \u0e41\u0e25\u0e30 \u0e43\u0e0a\u0e49 Keys \u0e17\u0e14\u0e41\u0e17\u0e19 \u0e2a\u0e23\u0e49\u0e32\u0e07 SSH Key \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Email \u0e40\u0e1b\u0e47\u0e19 Label \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 (\u0e43\u0e0a\u0e49 Default \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e40\u0e25\u0e22\u0e01\u0e47\u0e44\u0e14\u0e49) ssh-keygen -t ed25519 -C \"your_email@example.com\" ( Windows ) Copy SSH Key \u0e44\u0e1b\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 VM \u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35 \u0e2d\u0e32\u0e08\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07 Login \u0e14\u0e49\u0e27\u0e22 root \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c .ssh/authorized_keys \u0e23\u0e2d\u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19 type $env:USERPROFILE \\. ssh \\ id_ed25519 . pub | ssh < username >@< ip_address > \"cat >> .ssh/authorized_keys\" ( Mac & Linux ) Copy SSH Key Mac \u0e25\u0e07 Tool \u0e01\u0e48\u0e2d\u0e19 \u0e16\u0e49\u0e32\u0e43\u0e0a\u0e49 HomeBrew brew install ssh-copy-id ssh-copy-id <username>@<ip_address> \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 ssh <username>@<ip_address> \u0e40\u0e02\u0e49\u0e32 SSH \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e2a\u0e48 Password \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e16\u0e31\u0e14\u0e44\u0e1b\u0e04\u0e37\u0e2d Disable Password \u0e17\u0e34\u0e49\u0e07 \u0e16\u0e49\u0e32\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e17\u0e35\u0e48\u0e08\u0e30 Deploy Production 100% \u0e41\u0e25\u0e49\u0e27 \u0e17\u0e33\u0e15\u0e32\u0e21\u0e19\u0e35\u0e49 \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e0b\u0e47\u0e15\u0e04\u0e48\u0e32\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e49\u0e27\u0e43\u0e2b\u0e49 Restart \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 sudo reboot \u0e41\u0e25\u0e30 Log In \u0e14\u0e49\u0e27\u0e22 username \u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e15\u0e48\u0e2d\u0e44\u0e1b (\u0e44\u0e21\u0e48\u0e41\u0e19\u0e30\u0e19\u0e33\u0e43\u0e2b\u0e49\u0e43\u0e0a\u0e49 root)","title":"Setup SSH Key (Optional)"},{"location":"docker2/meacloud/#install-docker","text":"\u0e01\u0e48\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker \u0e15\u0e49\u0e2d\u0e07\u0e40\u0e0b\u0e47\u0e15 Proxy \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a curl \u0e01\u0e48\u0e2d\u0e19 \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c ~/.bashrc \u0e42\u0e14\u0e22\u0e40\u0e1e\u0e34\u0e48\u0e21 export http_proxy = \"http://proxy.mea.or.th:9090\" export https_proxy = \"http://proxy.mea.or.th:9090\" export no_proxy = \"localhost,172.16.0.0/16,172.17.0.0/16,192.169.254.0/24\" \u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Package \u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19 \u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e44\u0e21\u0e48\u0e04\u0e27\u0e23\u0e25\u0e07 Docker \u0e1c\u0e48\u0e32\u0e19 snap \u0e15\u0e32\u0e21\u0e04\u0e33\u0e41\u0e19\u0e30\u0e19\u0e33\u0e02\u0e2d\u0e07 Ubuntu \u0e40\u0e1e\u0e23\u0e32\u0e30 Bug \u0e40\u0e22\u0e2d\u0e30 \u0e41\u0e25\u0e30 Docker \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e0b\u0e31\u0e1e\u0e1e\u0e2d\u0e23\u0e4c\u0e15 \u0e04\u0e27\u0e23\u0e2b\u0e25\u0e35\u0e01\u0e40\u0e25\u0e35\u0e48\u0e22\u0e07\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e40\u0e22\u0e2d\u0e30 sudo apt update sudo apt install -y ca-certificates curl gnupg lsb-release \u0e14\u0e32\u0e27\u0e42\u0e2b\u0e25\u0e14 Docker's GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \u0e40\u0e1e\u0e34\u0e48\u0e21 Apt Repository \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Docker: echo \\ \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null \u0e25\u0e07 Docker sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io \u0e25\u0e07 Docker Compose v2 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a User \u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07: DOCKER_CONFIG = ${ DOCKER_CONFIG :- $HOME /.docker } mkdir -p $DOCKER_CONFIG /cli-plugins curl -SL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG /cli-plugins/docker-compose \u0e40\u0e1e\u0e34\u0e48\u0e21 Executable Permission: chmod +x $DOCKER_CONFIG /cli-plugins/docker-compose","title":"Install Docker"},{"location":"docker2/meacloud/#add-user-to-group-docker","text":"\u0e40\u0e1e\u0e34\u0e48\u0e21 User \u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07\u0e40\u0e02\u0e49\u0e32 Group docker \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e15\u0e2d\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 sudo \u0e17\u0e38\u0e01\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 sudo usermod -aG docker <username>","title":"Add User to Group Docker"},{"location":"docker2/meacloud/#start-docker-enable-startup-service-on-boot","text":"Start Docker daemon: sudo systemctl start docker \u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e43\u0e2b\u0e49 Docker \u0e23\u0e31\u0e19\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e15\u0e2d\u0e19 Reboot: sudo systemctl enable docker \u0e43\u0e2b\u0e49 Reboot 1 \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e41\u0e25\u0e30 \u0e25\u0e2d\u0e07\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker version docker compose version \u0e16\u0e36\u0e07\u0e08\u0e38\u0e14\u0e19\u0e35\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e08\u0e30\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16 Pull \u0e2b\u0e23\u0e37\u0e2d Run Image \u0e44\u0e14\u0e49 \u0e15\u0e49\u0e2d\u0e07\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 MEA Proxy \u0e01\u0e48\u0e2d\u0e19","title":"Start Docker &amp; Enable Startup Service on Boot"},{"location":"docker2/meacloud/#configure-docker0-network","text":"\u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e25\u0e07\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e43\u0e2b\u0e21\u0e48\u0e46 Docker \u0e08\u0e30 Detect Network \u0e20\u0e32\u0e22\u0e43\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32 \u0e42\u0e14\u0e22 Network docker0 \u0e08\u0e30\u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01 172.17.0.0/16 \u0e16\u0e49\u0e32 Network \u0e0a\u0e19\u0e01\u0e31\u0e1a Subnet \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 VM Docker \u0e08\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21 Subnet \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e40\u0e1b\u0e47\u0e19 172.18.0.0/16 \u0e15\u0e2d\u0e19\u0e2a\u0e23\u0e49\u0e32\u0e07 VM \u0e08\u0e32\u0e01 vRealize \u0e16\u0e49\u0e32\u0e40\u0e23\u0e32\u0e40\u0e25\u0e37\u0e2d\u0e01 VM \u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e27\u0e07 172.16.0.0/16 Docker \u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07 docker0 network \u0e43\u0e2b\u0e49\u0e17\u0e35\u0e48 172.17.0.0/16 \u0e0b\u0e36\u0e48\u0e07 \u0e0a\u0e19\u0e01\u0e31\u0e1a IP Address \u0e02\u0e2d\u0e07 Cloud \u0e01\u0e1f\u0e19. \u0e17\u0e31\u0e49\u0e07\u0e27\u0e07 \u0e17\u0e33\u0e43\u0e2b\u0e49 \u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07 Service \u0e2b\u0e23\u0e37\u0e2d VM \u0e2d\u0e37\u0e48\u0e19\u0e46\u0e43\u0e19\u0e27\u0e07 172.17.0.0/16 \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a IP Address Space \u0e02\u0e2d\u0e07 Docker 0 \u0e16\u0e49\u0e32 docker0 \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e27\u0e07 172.17.0.0/16 \u0e43\u0e2b\u0e49\u0e04\u0e2d\u0e19\u0e1f\u0e34\u0e01\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e22\u0e49\u0e32\u0e22 docker0 \u0e44\u0e1b\u0e17\u0e35\u0e48\u0e2d\u0e37\u0e48\u0e19 ip addr \u0e22\u0e49\u0e32\u0e22 Subnet \u0e02\u0e2d\u0e07 docker0 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48 /etc/docker/daemon.json \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48 { \"default-address-pools\" : [{ \"base\" : \"172.26.0.0/16\" , \"size\" : 24 }] } 172.26.0.0/16 \u0e43\u0e2a\u0e48\u0e2d\u0e30\u0e44\u0e23\u0e01\u0e47\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0a\u0e19\u0e01\u0e31\u0e1a Private IP \u0e20\u0e32\u0e22\u0e43\u0e19 \u0e41\u0e01\u0e49\u0e44\u0e02\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27 \u0e43\u0e2b\u0e49 Restart Docker Daemon: sudo systemctl restart docker","title":"Configure docker0 Network"},{"location":"docker2/meacloud/#configure-proxy-for-docker-daemon","text":"\u0e41\u0e01\u0e49\u0e44\u0e02\u0e43\u0e2b\u0e49 Docker Daemon \u0e43\u0e0a\u0e49 MEA Proxy \u0e42\u0e14\u0e22\u0e44\u0e1b\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48 /etc/systemd/system/docker.service.d/proxy.conf [ Service ] Environment = \"HTTP_PROXY=http://proxy.mea.or.th:9090\" Environment = \"HTTPS_PROXY=http://proxy.mea.or.th:9090\" Environment = \"NO_PROXY=localhost,172.17.0.0/16,172.16.0.0/16,192.169.254.0/24\" \u0e40\u0e0b\u0e1f\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e30 Restart Docker Daemon \u0e43\u0e2b\u0e21\u0e48 sudo systemctl restart docker \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e2a\u0e16\u0e32\u0e19\u0e30 Docker daemon \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 Active \u0e01\u0e48\u0e2d\u0e19\u0e17\u0e33\u0e15\u0e48\u0e2d \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07: systemctl status docker \u0e17\u0e14\u0e2a\u0e2d\u0e1a Pull Image: \u0e16\u0e36\u0e07\u0e08\u0e38\u0e14\u0e19\u0e35\u0e49 \u0e04\u0e27\u0e23\u0e08\u0e30 Pull Image \u0e44\u0e14\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e41\u0e15\u0e48 Process \u0e43\u0e19 Container \u0e22\u0e31\u0e07\u0e08\u0e30\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e2d\u0e01 Internet \u0e44\u0e14\u0e49 docker container run hello-world","title":"Configure Proxy for Docker Daemon"},{"location":"docker2/meacloud/#configure-proxies-for-container","text":"\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 Container \u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e1c\u0e48\u0e32\u0e19 Proxy \u0e41\u0e25\u0e30 \u0e2d\u0e2d\u0e01 Internet \u0e44\u0e14\u0e49\u0e15\u0e49\u0e2d\u0e07\u0e04\u0e2d\u0e19\u0e1f\u0e34\u0e01\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21 \u0e42\u0e14\u0e22\u0e44\u0e1b\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48 ~/.docker/config.json \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48 { \"proxies\" : { \"default\" : { \"httpProxy\" : \"http://proxy.mea.or.th:9090\" , \"httpsProxy\" : \"http://proxy.mea.or.th:9090\" , \"noProxy\" : \"localhost,172.17.0.0/16,172.16.0.0/16,192.169.254.0/24\" } } } \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23 Run Container \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e2d\u0e2d\u0e01 Internet: docker container run --rm ubuntu apt-get update \u0e16\u0e49\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2d\u0e2d\u0e01 Internet \u0e44\u0e14\u0e49\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e01\u0e32\u0e23 Update Apt Repo \u0e1c\u0e48\u0e32\u0e19\u0e17\u0e38\u0e01\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23","title":"Configure Proxies for Container"},{"location":"docker2/meacloud/#configure-docker-data-directory","text":"\u0e2a\u0e33\u0e04\u0e31\u0e0d HDD1 \u0e02\u0e2d\u0e07 VM \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e21\u0e32\u0e08\u0e32\u0e01\u0e23\u0e30\u0e1a\u0e1a vRealize \u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e17\u0e35\u0e48 100GB \u0e0b\u0e36\u0e48\u0e07\u0e04\u0e48\u0e2d\u0e19\u0e02\u0e49\u0e32\u0e07\u0e19\u0e49\u0e2d\u0e22\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e40\u0e01\u0e47\u0e1a Docker Images \u0e04\u0e27\u0e23\u0e08\u0e30\u0e22\u0e49\u0e32\u0e22 Data Directory \u0e43\u0e2b\u0e49\u0e44\u0e1b\u0e2d\u0e22\u0e39\u0e48 HDD2 \u0e0b\u0e36\u0e48\u0e07 VMWare \u0e08\u0e30 Mount \u0e44\u0e27\u0e49\u0e17\u0e35\u0e48 /vol1 \u0e2b\u0e22\u0e38\u0e14\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 Docker: sudo systemctl stop docker \u0e41\u0e01\u0e49\u0e44\u0e02\u0e44\u0e1f\u0e25\u0e4c /etc/docker/daemon.json \u0e42\u0e14\u0e22\u0e40\u0e1e\u0e34\u0e48\u0e21 Key-Value \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b \"data-root\" : \"/vol1/docker\" Copy Docker Data \u0e40\u0e14\u0e34\u0e21\u0e44\u0e1b\u0e17\u0e35\u0e48\u0e43\u0e2b\u0e21\u0e48 sudo rsync -aP /var/lib/docker /vol1/docker Rename \u0e0a\u0e37\u0e48\u0e2d Directory \u0e40\u0e14\u0e34\u0e21 sudo mv /var/lib/docker /var/lib/docker.bak Start Docker Daemon sudo systemctl start docker \u0e16\u0e49\u0e32\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e15\u0e32\u0e21\u0e1b\u0e01\u0e15\u0e34\u0e41\u0e25\u0e49\u0e27 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e25\u0e1a /var/lib/docker.bak \u0e44\u0e14\u0e49","title":"Configure Docker Data Directory"},{"location":"docker2/meacloud/#test-play","text":"\u0e16\u0e36\u0e07\u0e08\u0e38\u0e14\u0e19\u0e35\u0e49 Docker \u0e04\u0e27\u0e23\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e04\u0e23\u0e1a\u0e16\u0e49\u0e27\u0e19\u0e41\u0e25\u0e49\u0e27 \u0e42\u0e14\u0e22\u0e21\u0e35\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a \u0e41\u0e25\u0e30 Troubleshoot \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e15\u0e32\u0e21\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23 Pull Image docker image pull nginx \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e43\u0e2b\u0e49 Container \u0e2d\u0e2d\u0e01 Internet docker container run --rm ubuntu apt-get update \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e40\u0e0a\u0e47\u0e04 IP \u0e02\u0e2d\u0e07 Container (\u0e44\u0e21\u0e48\u0e04\u0e27\u0e23\u0e08\u0e30\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e1a IP \u0e27\u0e07 Cloud) docker container run --rm centos ip addr \u0e16\u0e49\u0e32\u0e40\u0e0b\u0e47\u0e15\u0e22\u0e49\u0e32\u0e22 Subnet \u0e15\u0e32\u0e21\u0e02\u0e49\u0e32\u0e07\u0e1a\u0e19 \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 IP Address \u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 Subnet 172.26.0.0/16","title":"Test &amp; Play"},{"location":"docker2/meacloud/#_1","text":"\u0e42\u0e14\u0e22 Default \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 VM \u0e08\u0e30\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e2d\u0e30\u0e44\u0e23\u0e01\u0e31\u0e1a VM/Service \u0e20\u0e32\u0e22\u0e43\u0e19 Cloud \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 \u0e15\u0e49\u0e2d\u0e07\u0e02\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e17\u0e35\u0e48 \u0e04\u0e38\u0e13\u0e1a\u0e35\u0e21 \u0e18\u0e35\u0e23\u0e27\u0e34\u0e17\u0e22\u0e4c \u0e01\u0e17\u0e02. \u0e1d\u0e27\u0e17. \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14 Source Destination Port + Protocol (TCP/UDP) Direction (In, Out, In-Out)","title":"\u0e01\u0e32\u0e23\u0e02\u0e2d\u0e40\u0e1b\u0e34\u0e14\u0e1e\u0e2d\u0e23\u0e4c\u0e15"},{"location":"docker2/networks/","text":"Docker Networks Basic Networks \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e41\u0e25\u0e49\u0e27 \u0e08\u0e30\u0e21\u0e35 Networks \u0e2d\u0e22\u0e39\u0e48 3 \u0e41\u0e1a\u0e1a Bridge \u0e17\u0e33\u0e07\u0e32\u0e19\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19 NAT (Network Address Translation) Host \u0e43\u0e0a\u0e49 IP/Port \u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e1a Host None \u0e44\u0e21\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2d\u0e30\u0e44\u0e23\u0e40\u0e25\u0e22 \u0e21\u0e35\u0e41\u0e04\u0e48 Loopback Address \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49 Docker (\u0e1a\u0e19 Linux \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19) \u0e22\u0e31\u0e07\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19 Network MACVLAN \u0e01\u0e31\u0e1a IPVLAN \u0e43\u0e19\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49 Container \u0e43\u0e0a\u0e49 IP Address Space \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e1a External Network \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e44\u0e21\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Use Case \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e19\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e43\u0e0a\u0e49 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker Swarm \u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 Overlay Network \u0e43\u0e19\u0e01\u0e32\u0e23\u0e04\u0e38\u0e22\u0e02\u0e49\u0e32\u0e21 Docker Host Bridge Networks \u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e02\u0e2d\u0e07 Bridge Networks Default Bridge Network Containers \u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e01\u0e31\u0e19\u0e14\u0e49\u0e27\u0e22 IP Address \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d \u0e2b\u0e23\u0e37\u0e2d DNS Resolution \u0e44\u0e14\u0e49 Default Bridge Network \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e17\u0e35\u0e48\u0e27\u0e07 IP 172.17.0.0/16 \u0e0b\u0e36\u0e48\u0e07\u0e0a\u0e19\u0e01\u0e31\u0e1a IP Address Space \u0e02\u0e2d\u0e07 Private Cloud \u0e01\u0e1f\u0e19. \u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e01\u0e49\u0e44\u0e02\u0e2b\u0e32\u0e01\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker \u0e1a\u0e19 VM User Defined Bridge Network \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 DNS Resolution \u0e44\u0e14\u0e49 \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d Container \u0e41\u0e17\u0e19 IP Address \u0e44\u0e14\u0e49 Inspect Bridge Network docker network inspect <network_name> Create Bridge Network docker network create <network_name> Remove Bridge Network docker network rm <network_name> Connect Containers to Bridge docker container run --network <network_name> ... Host Network Host Network \u0e04\u0e37\u0e2d \u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e17\u0e35\u0e48 Container \u0e43\u0e0a\u0e49 IP \u0e41\u0e25\u0e30 Port \u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Docker Host \u0e40\u0e25\u0e22 Connect Containers to Host \u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Run Container \u0e44\u0e21\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e23\u0e30\u0e1a\u0e38 --publish \u0e2b\u0e23\u0e37\u0e2d -p \u0e40\u0e0a\u0e48\u0e19 docker container run -d --network host nginx \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 localhost:80 \u0e2b\u0e23\u0e37\u0e2d ip_address_docker_host:80 \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 None Network Container \u0e44\u0e21\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a External Network \u0e41\u0e25\u0e30 \u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e04\u0e38\u0e22\u0e01\u0e31\u0e1a Container \u0e2d\u0e37\u0e48\u0e19\u0e44\u0e14\u0e49 Connect Containers to None docker container run -d --network none nginx Overlay \u0e40\u0e1b\u0e47\u0e19\u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e17\u0e35\u0e48 Container \u0e43\u0e0a\u0e49\u0e04\u0e38\u0e22\u0e01\u0e31\u0e19\u0e02\u0e49\u0e32\u0e21 Docker Hosts \u0e08\u0e30\u0e43\u0e0a\u0e49 Overlay Network \u0e15\u0e2d\u0e19\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a Container Orchestration \u0e14\u0e49\u0e27\u0e22 Docker Swarm \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e43\u0e0a\u0e49 Kubernetes \u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48 \u0e41\u0e15\u0e48\u0e43\u0e19\u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35 Docker Swarm \u0e21\u0e31\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e48\u0e32\u0e22\u0e01\u0e27\u0e48\u0e32\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Infrastructure \u0e20\u0e32\u0e22\u0e43\u0e19\u0e40\u0e23\u0e47\u0e27\u0e01\u0e27\u0e48\u0e32 \u0e02\u0e49\u0e2d\u0e08\u0e33\u0e01\u0e31\u0e14\u0e02\u0e2d\u0e07 Swarm Mode \u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 Github \u0e2a\u0e23\u0e49\u0e32\u0e07 Overlay Network \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Subnet /24 (Default) \u0e2b\u0e32\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 IP Addresses \u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 256 Addresses \u0e43\u0e2b\u0e49\u0e2a\u0e23\u0e49\u0e32\u0e07 Overlay Network \u0e22\u0e48\u0e2d\u0e22\u0e46 \u0e41\u0e17\u0e19\u0e01\u0e32\u0e23\u0e02\u0e22\u0e32\u0e22 Subnet Creating an Overlay Network docker network create -d overlay <network_name>","title":"Networks"},{"location":"docker2/networks/#docker-networks","text":"","title":"Docker Networks"},{"location":"docker2/networks/#basic-networks","text":"\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker \u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e41\u0e25\u0e49\u0e27 \u0e08\u0e30\u0e21\u0e35 Networks \u0e2d\u0e22\u0e39\u0e48 3 \u0e41\u0e1a\u0e1a Bridge \u0e17\u0e33\u0e07\u0e32\u0e19\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19 NAT (Network Address Translation) Host \u0e43\u0e0a\u0e49 IP/Port \u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e1a Host None \u0e44\u0e21\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2d\u0e30\u0e44\u0e23\u0e40\u0e25\u0e22 \u0e21\u0e35\u0e41\u0e04\u0e48 Loopback Address \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49 Docker (\u0e1a\u0e19 Linux \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19) \u0e22\u0e31\u0e07\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19 Network MACVLAN \u0e01\u0e31\u0e1a IPVLAN \u0e43\u0e19\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49 Container \u0e43\u0e0a\u0e49 IP Address Space \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e1a External Network \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e44\u0e21\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Use Case \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e19\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e43\u0e0a\u0e49 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker Swarm \u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 Overlay Network \u0e43\u0e19\u0e01\u0e32\u0e23\u0e04\u0e38\u0e22\u0e02\u0e49\u0e32\u0e21 Docker Host","title":"Basic Networks"},{"location":"docker2/networks/#bridge-networks","text":"\u0e08\u0e38\u0e14\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e02\u0e2d\u0e07 Bridge Networks Default Bridge Network Containers \u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e01\u0e31\u0e19\u0e14\u0e49\u0e27\u0e22 IP Address \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d \u0e2b\u0e23\u0e37\u0e2d DNS Resolution \u0e44\u0e14\u0e49 Default Bridge Network \u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e17\u0e35\u0e48\u0e27\u0e07 IP 172.17.0.0/16 \u0e0b\u0e36\u0e48\u0e07\u0e0a\u0e19\u0e01\u0e31\u0e1a IP Address Space \u0e02\u0e2d\u0e07 Private Cloud \u0e01\u0e1f\u0e19. \u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e01\u0e49\u0e44\u0e02\u0e2b\u0e32\u0e01\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Docker \u0e1a\u0e19 VM User Defined Bridge Network \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 DNS Resolution \u0e44\u0e14\u0e49 \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e0a\u0e37\u0e48\u0e2d Container \u0e41\u0e17\u0e19 IP Address \u0e44\u0e14\u0e49","title":"Bridge Networks"},{"location":"docker2/networks/#inspect-bridge-network","text":"docker network inspect <network_name>","title":"Inspect Bridge Network"},{"location":"docker2/networks/#create-bridge-network","text":"docker network create <network_name>","title":"Create Bridge Network"},{"location":"docker2/networks/#remove-bridge-network","text":"docker network rm <network_name>","title":"Remove Bridge Network"},{"location":"docker2/networks/#connect-containers-to-bridge","text":"docker container run --network <network_name> ...","title":"Connect Containers to Bridge"},{"location":"docker2/networks/#host-network","text":"Host Network \u0e04\u0e37\u0e2d \u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e17\u0e35\u0e48 Container \u0e43\u0e0a\u0e49 IP \u0e41\u0e25\u0e30 Port \u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Docker Host \u0e40\u0e25\u0e22","title":"Host Network"},{"location":"docker2/networks/#connect-containers-to-host","text":"\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 Run Container \u0e44\u0e21\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e23\u0e30\u0e1a\u0e38 --publish \u0e2b\u0e23\u0e37\u0e2d -p \u0e40\u0e0a\u0e48\u0e19 docker container run -d --network host nginx \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e49\u0e32\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 localhost:80 \u0e2b\u0e23\u0e37\u0e2d ip_address_docker_host:80 \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22","title":"Connect Containers to Host"},{"location":"docker2/networks/#none-network","text":"Container \u0e44\u0e21\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a External Network \u0e41\u0e25\u0e30 \u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e04\u0e38\u0e22\u0e01\u0e31\u0e1a Container \u0e2d\u0e37\u0e48\u0e19\u0e44\u0e14\u0e49","title":"None Network"},{"location":"docker2/networks/#connect-containers-to-none","text":"docker container run -d --network none nginx","title":"Connect Containers to None"},{"location":"docker2/networks/#overlay","text":"\u0e40\u0e1b\u0e47\u0e19\u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e17\u0e35\u0e48 Container \u0e43\u0e0a\u0e49\u0e04\u0e38\u0e22\u0e01\u0e31\u0e19\u0e02\u0e49\u0e32\u0e21 Docker Hosts \u0e08\u0e30\u0e43\u0e0a\u0e49 Overlay Network \u0e15\u0e2d\u0e19\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a Container Orchestration \u0e14\u0e49\u0e27\u0e22 Docker Swarm \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e43\u0e0a\u0e49 Kubernetes \u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48 \u0e41\u0e15\u0e48\u0e43\u0e19\u0e1a\u0e32\u0e07\u0e01\u0e23\u0e13\u0e35 Docker Swarm \u0e21\u0e31\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e48\u0e32\u0e22\u0e01\u0e27\u0e48\u0e32\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49 Infrastructure \u0e20\u0e32\u0e22\u0e43\u0e19\u0e40\u0e23\u0e47\u0e27\u0e01\u0e27\u0e48\u0e32 \u0e02\u0e49\u0e2d\u0e08\u0e33\u0e01\u0e31\u0e14\u0e02\u0e2d\u0e07 Swarm Mode \u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e48 Github \u0e2a\u0e23\u0e49\u0e32\u0e07 Overlay Network \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49 Subnet /24 (Default) \u0e2b\u0e32\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 IP Addresses \u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 256 Addresses \u0e43\u0e2b\u0e49\u0e2a\u0e23\u0e49\u0e32\u0e07 Overlay Network \u0e22\u0e48\u0e2d\u0e22\u0e46 \u0e41\u0e17\u0e19\u0e01\u0e32\u0e23\u0e02\u0e22\u0e32\u0e22 Subnet","title":"Overlay"},{"location":"docker2/networks/#creating-an-overlay-network","text":"docker network create -d overlay <network_name>","title":"Creating an Overlay Network"},{"location":"docker2/secrets/","text":"Docker Secrets \u0e2d\u0e48\u0e32\u0e19\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e17\u0e35\u0e48 Docker Swarm Secrets","title":"Docker Secrets"},{"location":"docker2/secrets/#docker-secrets","text":"\u0e2d\u0e48\u0e32\u0e19\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21\u0e17\u0e35\u0e48 Docker Swarm Secrets","title":"Docker Secrets"},{"location":"docker2/swarm/","text":"Docker Swarm Built in container orchestration docker compose \u0e17\u0e33\u0e07\u0e32\u0e19\u0e1a\u0e19 Server \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27 docker swarm \u0e17\u0e33\u0e07\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19 Cluster (Server \u0e2b\u0e25\u0e32\u0e22\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07) \u0e1c\u0e48\u0e32\u0e19 Overlay Network Swarm Architecture \u0e2d\u0e48\u0e32\u0e19\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21 Raft Consensus Algorithm Differences between Services & Containers Swarm Init \u0e40\u0e23\u0e34\u0e48\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker Swarm \u0e44\u0e14\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker swarm init \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 Output Swarm initialized: current node (w5rj9pqmcv0z2b052f8dr0qd2) is now a manager. To add a worker to this swarm, run the following command: docker swarm join --token SWMTKN-1-6aq8xeo72o9kj5orlbzglt66fpxtw1dlmkb9djkgsatmpw8ugi-2jgc0rqmq2b5aet51dl89qbbz 192.168.1.77:2377 To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions. \u0e2a\u0e34\u0e48\u0e07\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e04\u0e37\u0e2d docker swarm init \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Manager Node \u0e41\u0e23\u0e01\u0e02\u0e2d\u0e07 Swarm \u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e15\u0e32\u0e21 Output \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1e\u0e34\u0e48\u0e21 Manager \u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e1e\u0e34\u0e48\u0e21 Worker \u0e44\u0e14\u0e49 \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01 Init \u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker service <sub-command> \u0e43\u0e19\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Container Creating Manager Nodes Copy \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e04\u0e32\u0e22\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e08\u0e32\u0e01 Swarm Initialization \u0e23\u0e30\u0e27\u0e31\u0e07\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 IP Address \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e08\u0e30\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e15\u0e32\u0e21\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e17\u0e33\u0e01\u0e32\u0e23 Initialize Swarm \u0e2b\u0e32\u0e01\u0e43\u0e0a\u0e49 Play with Docker \u0e43\u0e2b\u0e49\u0e01\u0e14\u0e1b\u0e38\u0e48\u0e21 ctrl + insert \u0e40\u0e1e\u0e37\u0e48\u0e2d Copy \u0e41\u0e25\u0e30 shift + insert \u0e40\u0e1e\u0e37\u0e48\u0e2d Paste docker swarm join --token SWMTKN-1-6aq8xeo72o9kj5orlbzglt66fpxtw1dlmkb9djkgsatmpw8ugi-2jgc0rqmq2b5aet51dl89qbbz 192 .168.1.77:2377 Creating Worker Nodes \u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Manager docker swarm join-token manager \u0e41\u0e25\u0e49\u0e27 Copy Output \u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 Manager Node Swarm Nodes \u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Swarm Nodes \u0e44\u0e14\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker node ls Deploy Services \u0e17\u0e14\u0e25\u0e2d\u0e07 Deploy Services Elastic Search v2 docker service create --name = elastic -p 9200 :9200 elasticsearch:2 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e02\u0e49\u0e32 Browser \u0e17\u0e35\u0e48 docker_nodes_ip:9200 \u0e43\u0e0a\u0e49 IP \u0e02\u0e2d\u0e07 Manager \u0e2b\u0e23\u0e37\u0e2d Worker \u0e01\u0e47\u0e44\u0e14\u0e49 \u0e17\u0e14\u0e25\u0e2d\u0e07 Refresh \u0e2b\u0e25\u0e32\u0e22\u0e46\u0e04\u0e23\u0e31\u0e49\u0e07\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Docker \u0e17\u0e33 Load Balancing \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Service \u0e43\u0e19 Overlay Network \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34 Managing Services List Services docker service ls List Logs docker service logs elastic Scale Services docker service scale elastic = 3 Remove Services docker service rm elastic Docker Stacks Stacks \u0e04\u0e25\u0e49\u0e32\u0e22\u0e46\u0e01\u0e31\u0e1a Compose \u0e41\u0e15\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19 Cluster \u0e41\u0e17\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Server \u0e15\u0e31\u0e27\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e21\u0e2d\u0e07\u0e07\u0e48\u0e32\u0e22\u0e46\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e2d\u0e07 Services \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 Compose File \u0e43\u0e19\u0e01\u0e32\u0e23 Deploy \u0e44\u0e14\u0e49 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23 Deploy Docker Stack \u0e02\u0e2d\u0e07 Portainer \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d portainer-agent-stack.yml \u0e41\u0e25\u0e30 Copy \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 version: '3.7' services: agent: image: portainer/agent:2.11.1 volumes: - /var/run/docker.sock:/var/run/docker.sock - /var/lib/docker/volumes:/var/lib/docker/volumes networks: - agent_network deploy: mode: global placement: constraints: [node.platform.os == linux] portainer: image: portainer/portainer-ce:2.11.1 command: -H tcp://tasks.agent:9001 --tlsskipverify ports: - \"9443:9443\" - \"9000:9000\" - \"8000:8000\" volumes: - portainer_data:/data networks: - agent_network deploy: mode: replicated replicas: 1 placement: constraints: [node.role == manager] networks: agent_network: driver: overlay attachable: true volumes: portainer_data: Deploy a Stack docker stack deploy -c portainer-agent-stack.yml portainer List Stacks docker stack ls List Services in a Stack docker stack services portainer Remove a Stack docker stack rm portainer \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 docker_nodes_ip:9000 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39 Portainer UI \u0e43\u0e19\u0e07\u0e32\u0e19 Data Engineering \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e21\u0e48\u0e04\u0e48\u0e2d\u0e22\u0e44\u0e14\u0e49\u0e43\u0e0a\u0e49 Docker Swarm \u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e1b\u0e2b\u0e19\u0e31\u0e01 Kubernetes \u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 \u0e41\u0e15\u0e48\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a Technology \u0e44\u0e27\u0e46 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e08\u0e30\u0e27\u0e19\u0e46\u0e41\u0e16\u0e27 Docker \u0e01\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e44\u0e1b\u0e40\u0e17 Infrastructure \u0e08\u0e23\u0e34\u0e07\u0e1a\u0e19 Kubernetes","title":"Docker Swarm"},{"location":"docker2/swarm/#docker-swarm","text":"Built in container orchestration docker compose \u0e17\u0e33\u0e07\u0e32\u0e19\u0e1a\u0e19 Server \u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27 docker swarm \u0e17\u0e33\u0e07\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19 Cluster (Server \u0e2b\u0e25\u0e32\u0e22\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07) \u0e1c\u0e48\u0e32\u0e19 Overlay Network","title":"Docker Swarm"},{"location":"docker2/swarm/#swarm-architecture","text":"\u0e2d\u0e48\u0e32\u0e19\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21 Raft Consensus Algorithm Differences between Services & Containers","title":"Swarm Architecture"},{"location":"docker2/swarm/#swarm-init","text":"\u0e40\u0e23\u0e34\u0e48\u0e21\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Docker Swarm \u0e44\u0e14\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker swarm init \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19 Output Swarm initialized: current node (w5rj9pqmcv0z2b052f8dr0qd2) is now a manager. To add a worker to this swarm, run the following command: docker swarm join --token SWMTKN-1-6aq8xeo72o9kj5orlbzglt66fpxtw1dlmkb9djkgsatmpw8ugi-2jgc0rqmq2b5aet51dl89qbbz 192.168.1.77:2377 To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions. \u0e2a\u0e34\u0e48\u0e07\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e04\u0e37\u0e2d docker swarm init \u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Manager Node \u0e41\u0e23\u0e01\u0e02\u0e2d\u0e07 Swarm \u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e15\u0e32\u0e21 Output \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1e\u0e34\u0e48\u0e21 Manager \u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e1e\u0e34\u0e48\u0e21 Worker \u0e44\u0e14\u0e49 \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01 Init \u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker service <sub-command> \u0e43\u0e19\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Container","title":"Swarm Init"},{"location":"docker2/swarm/#creating-manager-nodes","text":"Copy \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e04\u0e32\u0e22\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e08\u0e32\u0e01 Swarm Initialization \u0e23\u0e30\u0e27\u0e31\u0e07\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 IP Address \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e08\u0e30\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e15\u0e32\u0e21\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e17\u0e33\u0e01\u0e32\u0e23 Initialize Swarm \u0e2b\u0e32\u0e01\u0e43\u0e0a\u0e49 Play with Docker \u0e43\u0e2b\u0e49\u0e01\u0e14\u0e1b\u0e38\u0e48\u0e21 ctrl + insert \u0e40\u0e1e\u0e37\u0e48\u0e2d Copy \u0e41\u0e25\u0e30 shift + insert \u0e40\u0e1e\u0e37\u0e48\u0e2d Paste docker swarm join --token SWMTKN-1-6aq8xeo72o9kj5orlbzglt66fpxtw1dlmkb9djkgsatmpw8ugi-2jgc0rqmq2b5aet51dl89qbbz 192 .168.1.77:2377","title":"Creating Manager Nodes"},{"location":"docker2/swarm/#creating-worker-nodes","text":"\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Manager docker swarm join-token manager \u0e41\u0e25\u0e49\u0e27 Copy Output \u0e44\u0e1b\u0e43\u0e2a\u0e48\u0e43\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 Manager Node","title":"Creating Worker Nodes"},{"location":"docker2/swarm/#swarm-nodes","text":"\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a Swarm Nodes \u0e44\u0e14\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 docker node ls","title":"Swarm Nodes"},{"location":"docker2/swarm/#deploy-services","text":"\u0e17\u0e14\u0e25\u0e2d\u0e07 Deploy Services Elastic Search v2 docker service create --name = elastic -p 9200 :9200 elasticsearch:2 \u0e17\u0e14\u0e25\u0e2d\u0e07\u0e40\u0e02\u0e49\u0e32 Browser \u0e17\u0e35\u0e48 docker_nodes_ip:9200 \u0e43\u0e0a\u0e49 IP \u0e02\u0e2d\u0e07 Manager \u0e2b\u0e23\u0e37\u0e2d Worker \u0e01\u0e47\u0e44\u0e14\u0e49 \u0e17\u0e14\u0e25\u0e2d\u0e07 Refresh \u0e2b\u0e25\u0e32\u0e22\u0e46\u0e04\u0e23\u0e31\u0e49\u0e07\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Docker \u0e17\u0e33 Load Balancing \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Service \u0e43\u0e19 Overlay Network \u0e43\u0e2b\u0e49\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34","title":"Deploy Services"},{"location":"docker2/swarm/#managing-services","text":"","title":"Managing Services"},{"location":"docker2/swarm/#list-services","text":"docker service ls","title":"List Services"},{"location":"docker2/swarm/#list-logs","text":"docker service logs elastic","title":"List Logs"},{"location":"docker2/swarm/#scale-services","text":"docker service scale elastic = 3","title":"Scale Services"},{"location":"docker2/swarm/#remove-services","text":"docker service rm elastic","title":"Remove Services"},{"location":"docker2/swarm/#docker-stacks","text":"Stacks \u0e04\u0e25\u0e49\u0e32\u0e22\u0e46\u0e01\u0e31\u0e1a Compose \u0e41\u0e15\u0e48\u0e17\u0e33\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19 Cluster \u0e41\u0e17\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e1a\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07 Server \u0e15\u0e31\u0e27\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e21\u0e2d\u0e07\u0e07\u0e48\u0e32\u0e22\u0e46\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e2d\u0e07 Services \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 Compose File \u0e43\u0e19\u0e01\u0e32\u0e23 Deploy \u0e44\u0e14\u0e49 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23 Deploy Docker Stack \u0e02\u0e2d\u0e07 Portainer \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e0a\u0e37\u0e48\u0e2d portainer-agent-stack.yml \u0e41\u0e25\u0e30 Copy \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 version: '3.7' services: agent: image: portainer/agent:2.11.1 volumes: - /var/run/docker.sock:/var/run/docker.sock - /var/lib/docker/volumes:/var/lib/docker/volumes networks: - agent_network deploy: mode: global placement: constraints: [node.platform.os == linux] portainer: image: portainer/portainer-ce:2.11.1 command: -H tcp://tasks.agent:9001 --tlsskipverify ports: - \"9443:9443\" - \"9000:9000\" - \"8000:8000\" volumes: - portainer_data:/data networks: - agent_network deploy: mode: replicated replicas: 1 placement: constraints: [node.role == manager] networks: agent_network: driver: overlay attachable: true volumes: portainer_data:","title":"Docker Stacks"},{"location":"docker2/swarm/#deploy-a-stack","text":"docker stack deploy -c portainer-agent-stack.yml portainer","title":"Deploy a Stack"},{"location":"docker2/swarm/#list-stacks","text":"docker stack ls","title":"List Stacks"},{"location":"docker2/swarm/#list-services-in-a-stack","text":"docker stack services portainer","title":"List Services in a Stack"},{"location":"docker2/swarm/#remove-a-stack","text":"docker stack rm portainer \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 docker_nodes_ip:9000 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e14\u0e39 Portainer UI \u0e43\u0e19\u0e07\u0e32\u0e19 Data Engineering \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e21\u0e48\u0e04\u0e48\u0e2d\u0e22\u0e44\u0e14\u0e49\u0e43\u0e0a\u0e49 Docker Swarm \u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e1b\u0e2b\u0e19\u0e31\u0e01 Kubernetes \u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32 \u0e41\u0e15\u0e48\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a Technology \u0e44\u0e27\u0e46 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e08\u0e30\u0e27\u0e19\u0e46\u0e41\u0e16\u0e27 Docker \u0e01\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e44\u0e1b\u0e40\u0e17 Infrastructure \u0e08\u0e23\u0e34\u0e07\u0e1a\u0e19 Kubernetes","title":"Remove a Stack"}]}